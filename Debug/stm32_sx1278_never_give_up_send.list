
stm32_sx1278_never_give_up_send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a0c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08008b20  08008b20  00009b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009050  08009050  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009050  08009050  0000a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009058  08009058  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009058  08009058  0000a058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800905c  0800905c  0000a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009060  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  200001e8  08009248  0000b1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08009248  0000b828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e095  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a4  00000000  00000000  000192a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2c  00000000  00000000  0001c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001945c  00000000  00000000  0001cfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011767  00000000  00000000  00036408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000897e9  00000000  00000000  00047b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004988  00000000  00000000  000d139c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d5d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b04 	.word	0x08008b04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008b04 	.word	0x08008b04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b968 	b.w	800122c <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14e      	bne.n	800101e <__udivmoddi4+0xaa>
 8000f80:	4694      	mov	ip, r2
 8000f82:	458c      	cmp	ip, r1
 8000f84:	4686      	mov	lr, r0
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	d962      	bls.n	8001052 <__udivmoddi4+0xde>
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	4091      	lsls	r1, r2
 8000f94:	fa20 f303 	lsr.w	r3, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000faa:	fb07 1114 	mls	r1, r7, r4, r1
 8000fae:	fa1f f68c 	uxth.w	r6, ip
 8000fb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fba:	fb04 f106 	mul.w	r1, r4, r6
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d90a      	bls.n	8000fd8 <__udivmoddi4+0x64>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fca:	f080 8110 	bcs.w	80011ee <__udivmoddi4+0x27a>
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	f240 810d 	bls.w	80011ee <__udivmoddi4+0x27a>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a59      	subs	r1, r3, r1
 8000fda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fde:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe2:	fb00 f606 	mul.w	r6, r0, r6
 8000fe6:	fa1f f38e 	uxth.w	r3, lr
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffa:	f080 80fa 	bcs.w	80011f2 <__udivmoddi4+0x27e>
 8000ffe:	429e      	cmp	r6, r3
 8001000:	f240 80f7 	bls.w	80011f2 <__udivmoddi4+0x27e>
 8001004:	4463      	add	r3, ip
 8001006:	3802      	subs	r0, #2
 8001008:	2100      	movs	r1, #0
 800100a:	1b9b      	subs	r3, r3, r6
 800100c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001010:	b11d      	cbz	r5, 800101a <__udivmoddi4+0xa6>
 8001012:	40d3      	lsrs	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e9c5 3200 	strd	r3, r2, [r5]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d905      	bls.n	800102e <__udivmoddi4+0xba>
 8001022:	b10d      	cbz	r5, 8001028 <__udivmoddi4+0xb4>
 8001024:	e9c5 0100 	strd	r0, r1, [r5]
 8001028:	2100      	movs	r1, #0
 800102a:	4608      	mov	r0, r1
 800102c:	e7f5      	b.n	800101a <__udivmoddi4+0xa6>
 800102e:	fab3 f183 	clz	r1, r3
 8001032:	2900      	cmp	r1, #0
 8001034:	d146      	bne.n	80010c4 <__udivmoddi4+0x150>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0xcc>
 800103a:	4290      	cmp	r0, r2
 800103c:	f0c0 80ee 	bcc.w	800121c <__udivmoddi4+0x2a8>
 8001040:	1a86      	subs	r6, r0, r2
 8001042:	eb64 0303 	sbc.w	r3, r4, r3
 8001046:	2001      	movs	r0, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d0e6      	beq.n	800101a <__udivmoddi4+0xa6>
 800104c:	e9c5 6300 	strd	r6, r3, [r5]
 8001050:	e7e3      	b.n	800101a <__udivmoddi4+0xa6>
 8001052:	2a00      	cmp	r2, #0
 8001054:	f040 808f 	bne.w	8001176 <__udivmoddi4+0x202>
 8001058:	eba1 040c 	sub.w	r4, r1, ip
 800105c:	2101      	movs	r1, #1
 800105e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001062:	fa1f f78c 	uxth.w	r7, ip
 8001066:	fbb4 f6f8 	udiv	r6, r4, r8
 800106a:	fb08 4416 	mls	r4, r8, r6, r4
 800106e:	fb07 f006 	mul.w	r0, r7, r6
 8001072:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001076:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800107a:	4298      	cmp	r0, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x11c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f106 34ff 	add.w	r4, r6, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x11a>
 8001088:	4298      	cmp	r0, r3
 800108a:	f200 80cb 	bhi.w	8001224 <__udivmoddi4+0x2b0>
 800108e:	4626      	mov	r6, r4
 8001090:	1a1c      	subs	r4, r3, r0
 8001092:	fbb4 f0f8 	udiv	r0, r4, r8
 8001096:	fb08 4410 	mls	r4, r8, r0, r4
 800109a:	fb00 f707 	mul.w	r7, r0, r7
 800109e:	fa1f f38e 	uxth.w	r3, lr
 80010a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010a6:	429f      	cmp	r7, r3
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x148>
 80010aa:	eb1c 0303 	adds.w	r3, ip, r3
 80010ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x146>
 80010b4:	429f      	cmp	r7, r3
 80010b6:	f200 80ae 	bhi.w	8001216 <__udivmoddi4+0x2a2>
 80010ba:	4620      	mov	r0, r4
 80010bc:	1bdb      	subs	r3, r3, r7
 80010be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010c2:	e7a5      	b.n	8001010 <__udivmoddi4+0x9c>
 80010c4:	f1c1 0720 	rsb	r7, r1, #32
 80010c8:	408b      	lsls	r3, r1
 80010ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80010ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80010d2:	fa24 f607 	lsr.w	r6, r4, r7
 80010d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010da:	fbb6 f8f9 	udiv	r8, r6, r9
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	fb09 6618 	mls	r6, r9, r8, r6
 80010e6:	fa20 f307 	lsr.w	r3, r0, r7
 80010ea:	408c      	lsls	r4, r1
 80010ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80010f0:	fb08 f00e 	mul.w	r0, r8, lr
 80010f4:	431c      	orrs	r4, r3
 80010f6:	0c23      	lsrs	r3, r4, #16
 80010f8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010fc:	4298      	cmp	r0, r3
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x1a6>
 8001104:	eb1c 0303 	adds.w	r3, ip, r3
 8001108:	f108 36ff 	add.w	r6, r8, #4294967295
 800110c:	f080 8081 	bcs.w	8001212 <__udivmoddi4+0x29e>
 8001110:	4298      	cmp	r0, r3
 8001112:	d97e      	bls.n	8001212 <__udivmoddi4+0x29e>
 8001114:	f1a8 0802 	sub.w	r8, r8, #2
 8001118:	4463      	add	r3, ip
 800111a:	1a1e      	subs	r6, r3, r0
 800111c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001120:	fb09 6613 	mls	r6, r9, r3, r6
 8001124:	fb03 fe0e 	mul.w	lr, r3, lr
 8001128:	b2a4      	uxth	r4, r4
 800112a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800112e:	45a6      	cmp	lr, r4
 8001130:	d908      	bls.n	8001144 <__udivmoddi4+0x1d0>
 8001132:	eb1c 0404 	adds.w	r4, ip, r4
 8001136:	f103 30ff 	add.w	r0, r3, #4294967295
 800113a:	d266      	bcs.n	800120a <__udivmoddi4+0x296>
 800113c:	45a6      	cmp	lr, r4
 800113e:	d964      	bls.n	800120a <__udivmoddi4+0x296>
 8001140:	3b02      	subs	r3, #2
 8001142:	4464      	add	r4, ip
 8001144:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001148:	fba0 8302 	umull	r8, r3, r0, r2
 800114c:	eba4 040e 	sub.w	r4, r4, lr
 8001150:	429c      	cmp	r4, r3
 8001152:	46c6      	mov	lr, r8
 8001154:	461e      	mov	r6, r3
 8001156:	d350      	bcc.n	80011fa <__udivmoddi4+0x286>
 8001158:	d04d      	beq.n	80011f6 <__udivmoddi4+0x282>
 800115a:	b155      	cbz	r5, 8001172 <__udivmoddi4+0x1fe>
 800115c:	ebba 030e 	subs.w	r3, sl, lr
 8001160:	eb64 0406 	sbc.w	r4, r4, r6
 8001164:	fa04 f707 	lsl.w	r7, r4, r7
 8001168:	40cb      	lsrs	r3, r1
 800116a:	431f      	orrs	r7, r3
 800116c:	40cc      	lsrs	r4, r1
 800116e:	e9c5 7400 	strd	r7, r4, [r5]
 8001172:	2100      	movs	r1, #0
 8001174:	e751      	b.n	800101a <__udivmoddi4+0xa6>
 8001176:	fa0c fc02 	lsl.w	ip, ip, r2
 800117a:	f1c2 0320 	rsb	r3, r2, #32
 800117e:	40d9      	lsrs	r1, r3
 8001180:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001184:	fa20 f303 	lsr.w	r3, r0, r3
 8001188:	fa00 fe02 	lsl.w	lr, r0, r2
 800118c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001190:	fb08 1110 	mls	r1, r8, r0, r1
 8001194:	4094      	lsls	r4, r2
 8001196:	431c      	orrs	r4, r3
 8001198:	fa1f f78c 	uxth.w	r7, ip
 800119c:	0c23      	lsrs	r3, r4, #16
 800119e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a2:	fb00 f107 	mul.w	r1, r0, r7
 80011a6:	4299      	cmp	r1, r3
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x248>
 80011aa:	eb1c 0303 	adds.w	r3, ip, r3
 80011ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b2:	d22c      	bcs.n	800120e <__udivmoddi4+0x29a>
 80011b4:	4299      	cmp	r1, r3
 80011b6:	d92a      	bls.n	800120e <__udivmoddi4+0x29a>
 80011b8:	3802      	subs	r0, #2
 80011ba:	4463      	add	r3, ip
 80011bc:	1a5b      	subs	r3, r3, r1
 80011be:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c2:	fb08 3311 	mls	r3, r8, r1, r3
 80011c6:	b2a4      	uxth	r4, r4
 80011c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011cc:	fb01 f307 	mul.w	r3, r1, r7
 80011d0:	42a3      	cmp	r3, r4
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x272>
 80011d4:	eb1c 0404 	adds.w	r4, ip, r4
 80011d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011dc:	d213      	bcs.n	8001206 <__udivmoddi4+0x292>
 80011de:	42a3      	cmp	r3, r4
 80011e0:	d911      	bls.n	8001206 <__udivmoddi4+0x292>
 80011e2:	3902      	subs	r1, #2
 80011e4:	4464      	add	r4, ip
 80011e6:	1ae4      	subs	r4, r4, r3
 80011e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011ec:	e73b      	b.n	8001066 <__udivmoddi4+0xf2>
 80011ee:	4604      	mov	r4, r0
 80011f0:	e6f2      	b.n	8000fd8 <__udivmoddi4+0x64>
 80011f2:	4608      	mov	r0, r1
 80011f4:	e708      	b.n	8001008 <__udivmoddi4+0x94>
 80011f6:	45c2      	cmp	sl, r8
 80011f8:	d2af      	bcs.n	800115a <__udivmoddi4+0x1e6>
 80011fa:	ebb8 0e02 	subs.w	lr, r8, r2
 80011fe:	eb63 060c 	sbc.w	r6, r3, ip
 8001202:	3801      	subs	r0, #1
 8001204:	e7a9      	b.n	800115a <__udivmoddi4+0x1e6>
 8001206:	4631      	mov	r1, r6
 8001208:	e7ed      	b.n	80011e6 <__udivmoddi4+0x272>
 800120a:	4603      	mov	r3, r0
 800120c:	e79a      	b.n	8001144 <__udivmoddi4+0x1d0>
 800120e:	4630      	mov	r0, r6
 8001210:	e7d4      	b.n	80011bc <__udivmoddi4+0x248>
 8001212:	46b0      	mov	r8, r6
 8001214:	e781      	b.n	800111a <__udivmoddi4+0x1a6>
 8001216:	4463      	add	r3, ip
 8001218:	3802      	subs	r0, #2
 800121a:	e74f      	b.n	80010bc <__udivmoddi4+0x148>
 800121c:	4606      	mov	r6, r0
 800121e:	4623      	mov	r3, r4
 8001220:	4608      	mov	r0, r1
 8001222:	e711      	b.n	8001048 <__udivmoddi4+0xd4>
 8001224:	3e02      	subs	r6, #2
 8001226:	4463      	add	r3, ip
 8001228:	e732      	b.n	8001090 <__udivmoddi4+0x11c>
 800122a:	bf00      	nop

0800122c <__aeabi_idiv0>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <init_gpio>:
 */

#include "gpio.h"

void init_gpio()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001244:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <init_gpio+0xc8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a2b      	ldr	r2, [pc, #172]	@ (80012f8 <init_gpio+0xc8>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <init_gpio+0xc8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <init_gpio+0xc8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a25      	ldr	r2, [pc, #148]	@ (80012f8 <init_gpio+0xc8>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <init_gpio+0xc8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <init_gpio+0xc8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a1f      	ldr	r2, [pc, #124]	@ (80012f8 <init_gpio+0xc8>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <init_gpio+0xc8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2110      	movs	r1, #16
 8001290:	481a      	ldr	r0, [pc, #104]	@ (80012fc <init_gpio+0xcc>)
 8001292:	f001 fbe6 	bl	8002a62 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2102      	movs	r1, #2
 800129a:	4819      	ldr	r0, [pc, #100]	@ (8001300 <init_gpio+0xd0>)
 800129c:	f001 fbe1 	bl	8002a62 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = NSS_Pin;
 80012a0:	2310      	movs	r3, #16
 80012a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	4811      	ldr	r0, [pc, #68]	@ (80012fc <init_gpio+0xcc>)
 80012b8:	f001 fa38 	bl	800272c <HAL_GPIO_Init>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	@ (8001300 <init_gpio+0xd0>)
 80012d0:	f001 fa2c 	bl	800272c <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RESET_Pin;
 80012d4:	2302      	movs	r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <init_gpio+0xd0>)
 80012ec:	f001 fa1e 	bl	800272c <HAL_GPIO_Init>

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010800 	.word	0x40010800
 8001300:	40010c00 	.word	0x40010c00

08001304 <I2C1_Init>:


#include "i2c.h"

void I2C1_Init()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <I2C1_Init+0x50>)
 800130a:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <I2C1_Init+0x54>)
 800130c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <I2C1_Init+0x50>)
 8001310:	4a12      	ldr	r2, [pc, #72]	@ (800135c <I2C1_Init+0x58>)
 8001312:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <I2C1_Init+0x50>)
 8001322:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001326:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	@ (8001354 <I2C1_Init+0x50>)
 8001342:	f001 fba7 	bl	8002a94 <HAL_I2C_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <I2C1_Init+0x4c>
	{
	  Error_Handler();
 800134c:	f000 fa78 	bl	8001840 <Error_Handler>
	}
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000204 	.word	0x20000204
 8001358:	40005400 	.word	0x40005400
 800135c:	00061a80 	.word	0x00061a80

08001360 <I2C_MspInit>:

void I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
	if(i2cHandle->Instance==I2C1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a16      	ldr	r2, [pc, #88]	@ (80013d4 <I2C_MspInit+0x74>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d125      	bne.n	80013cc <I2C_MspInit+0x6c>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <I2C_MspInit+0x78>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <I2C_MspInit+0x78>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <I2C_MspInit+0x78>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		PB6     ------> I2C1_SCL
		PB7     ------> I2C1_SDA
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001398:	23c0      	movs	r3, #192	@ 0xc0
 800139a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139c:	2312      	movs	r3, #18
 800139e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	61fb      	str	r3, [r7, #28]
		//GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4619      	mov	r1, r3
 80013ae:	480b      	ldr	r0, [pc, #44]	@ (80013dc <I2C_MspInit+0x7c>)
 80013b0:	f001 f9bc 	bl	800272c <HAL_GPIO_Init>


		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <I2C_MspInit+0x78>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	4a07      	ldr	r2, [pc, #28]	@ (80013d8 <I2C_MspInit+0x78>)
 80013ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013be:	61d3      	str	r3, [r2, #28]
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <I2C_MspInit+0x78>)
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]

	}
}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40005400 	.word	0x40005400
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010c00 	.word	0x40010c00

080013e0 <MPU6050_Soft_Reset>:

char buffer[512];

int message;
int message_length;
void MPU6050_Soft_Reset(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af04      	add	r7, sp, #16
    uint8_t Data = 0x80; // Giá trị reset m�?m
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &Data, 1, HAL_MAX_DELAY);
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	2301      	movs	r3, #1
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	226b      	movs	r2, #107	@ 0x6b
 80013fc:	21d0      	movs	r1, #208	@ 0xd0
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MPU6050_Soft_Reset+0x34>)
 8001400:	f001 fc8c 	bl	8002d1c <HAL_I2C_Mem_Write>
    HAL_Delay(100); // �?ợi MPU6050 khởi động lại
 8001404:	2064      	movs	r0, #100	@ 0x64
 8001406:	f001 f889 	bl	800251c <HAL_Delay>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000204 	.word	0x20000204

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800141c:	b0a8      	sub	sp, #160	@ 0xa0
 800141e:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f001 f81a 	bl	8002458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f8f8 	bl	8001618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 f9ca 	bl	80017c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800142c:	f000 f968 	bl	8001700 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001430:	f000 f99c 	bl	800176c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001434:	f000 f936 	bl	80016a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_gpio();
 8001438:	f7ff fefa 	bl	8001230 <init_gpio>
  init_spi1();
 800143c:	f000 fdc6 	bl	8001fcc <init_spi1>
#if MODE_MASTER
  printf("Mode: Master\r\n");
 8001440:	4861      	ldr	r0, [pc, #388]	@ (80015c8 <main+0x1b0>)
 8001442:	f004 febd 	bl	80061c0 <puts>
#elif MODE_SLAVE
  printf("Mode: Slave\r\n");
#endif

  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001446:	4b61      	ldr	r3, [pc, #388]	@ (80015cc <main+0x1b4>)
 8001448:	4a61      	ldr	r2, [pc, #388]	@ (80015d0 <main+0x1b8>)
 800144a:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 800144c:	4b5f      	ldr	r3, [pc, #380]	@ (80015cc <main+0x1b4>)
 800144e:	2201      	movs	r2, #1
 8001450:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8001452:	4b5e      	ldr	r3, [pc, #376]	@ (80015cc <main+0x1b4>)
 8001454:	4a5f      	ldr	r2, [pc, #380]	@ (80015d4 <main+0x1bc>)
 8001456:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8001458:	4b5c      	ldr	r3, [pc, #368]	@ (80015cc <main+0x1b4>)
 800145a:	2210      	movs	r2, #16
 800145c:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 800145e:	4b5b      	ldr	r3, [pc, #364]	@ (80015cc <main+0x1b4>)
 8001460:	4a5b      	ldr	r2, [pc, #364]	@ (80015d0 <main+0x1b8>)
 8001462:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 8001464:	4b59      	ldr	r3, [pc, #356]	@ (80015cc <main+0x1b4>)
 8001466:	2202      	movs	r2, #2
 8001468:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 800146a:	4b58      	ldr	r3, [pc, #352]	@ (80015cc <main+0x1b4>)
 800146c:	4a5a      	ldr	r2, [pc, #360]	@ (80015d8 <main+0x1c0>)
 800146e:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8001470:	4b5a      	ldr	r3, [pc, #360]	@ (80015dc <main+0x1c4>)
 8001472:	4a56      	ldr	r2, [pc, #344]	@ (80015cc <main+0x1b4>)
 8001474:	601a      	str	r2, [r3, #0]

  printf("Configuring LoRa module\r\n");
 8001476:	485a      	ldr	r0, [pc, #360]	@ (80015e0 <main+0x1c8>)
 8001478:	f004 fea2 	bl	80061c0 <puts>
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 800147c:	230a      	movs	r3, #10
 800147e:	9305      	str	r3, [sp, #20]
 8001480:	2300      	movs	r3, #0
 8001482:	9304      	str	r3, [sp, #16]
 8001484:	2300      	movs	r3, #0
 8001486:	9303      	str	r3, [sp, #12]
 8001488:	2307      	movs	r3, #7
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	2301      	movs	r3, #1
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	2301      	movs	r3, #1
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	a34a      	add	r3, pc, #296	@ (adr r3, 80015c0 <main+0x1a8>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	4850      	ldr	r0, [pc, #320]	@ (80015dc <main+0x1c4>)
 800149c:	f004 f825 	bl	80054ea <SX1278_init>
		  	  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  printf("Done configuring LoRaModule\r\n");
 80014a0:	4850      	ldr	r0, [pc, #320]	@ (80015e4 <main+0x1cc>)
 80014a2:	f004 fe8d 	bl	80061c0 <puts>

#if MODE_MASTER
  ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 80014a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80014aa:	2110      	movs	r1, #16
 80014ac:	484b      	ldr	r0, [pc, #300]	@ (80015dc <main+0x1c4>)
 80014ae:	f003 ff85 	bl	80053bc <SX1278_LoRaEntryTx>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a4c      	ldr	r2, [pc, #304]	@ (80015e8 <main+0x1d0>)
 80014b6:	6013      	str	r3, [r2, #0]
#elif MODE_SLAVE
  ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
#endif
  I2C_MspInit(&hi2c1);
 80014b8:	484c      	ldr	r0, [pc, #304]	@ (80015ec <main+0x1d4>)
 80014ba:	f7ff ff51 	bl	8001360 <I2C_MspInit>
  I2C1_Init();
 80014be:	f7ff ff21 	bl	8001304 <I2C1_Init>
  MPU6050_Soft_Reset();
 80014c2:	f7ff ff8d 	bl	80013e0 <MPU6050_Soft_Reset>
  MPU6050_t MPU6050;
  while(MPU6050_Init(&hi2c1) == 1);
 80014c6:	bf00      	nop
 80014c8:	4848      	ldr	r0, [pc, #288]	@ (80015ec <main+0x1d4>)
 80014ca:	f000 f9c1 	bl	8001850 <MPU6050_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d0f9      	beq.n	80014c8 <main+0xb0>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("hello world\n");HAL_Delay(500);
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4619      	mov	r1, r3
 80014da:	4844      	ldr	r0, [pc, #272]	@ (80015ec <main+0x1d4>)
 80014dc:	f000 fa44 	bl	8001968 <MPU6050_Read_All>
#if	MODE_MASTER
	  printf("Master ...\r\n");
 80014e0:	4843      	ldr	r0, [pc, #268]	@ (80015f0 <main+0x1d8>)
 80014e2:	f004 fe6d 	bl	80061c0 <puts>
	  HAL_Delay(1000);
 80014e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ea:	f001 f817 	bl	800251c <HAL_Delay>
	  printf("Sending package...\r\n");
 80014ee:	4841      	ldr	r0, [pc, #260]	@ (80015f4 <main+0x1dc>)
 80014f0:	f004 fe66 	bl	80061c0 <puts>

	  message_length = sprintf(buffer,"Ax= %.2f  Ay:= %.2f  Az:= %.2f  Gx:= %.2f  Gy:= %.2f  Gz:= %.2f  Temperature:= %.2f\n",MPU6050.Ax,MPU6050.Ay,MPU6050.Az,MPU6050.Gx,MPU6050.Gy,MPU6050.Gz,MPU6050.Temperature);
 80014f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80014f8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80014fc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001500:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8001504:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8001508:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800150c:	e9c7 1202 	strd	r1, r2, [r7, #8]
 8001510:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001514:	e9c7 0100 	strd	r0, r1, [r7]
 8001518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ff84 	bl	8000428 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800152c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001530:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001534:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001538:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800153c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001540:	e9cd 4500 	strd	r4, r5, [sp]
 8001544:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001548:	492b      	ldr	r1, [pc, #172]	@ (80015f8 <main+0x1e0>)
 800154a:	482c      	ldr	r0, [pc, #176]	@ (80015fc <main+0x1e4>)
 800154c:	f004 fe40 	bl	80061d0 <siprintf>
 8001550:	4603      	mov	r3, r0
 8001552:	4a2b      	ldr	r2, [pc, #172]	@ (8001600 <main+0x1e8>)
 8001554:	6013      	str	r3, [r2, #0]
	  ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <main+0x1e8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001560:	4619      	mov	r1, r3
 8001562:	481e      	ldr	r0, [pc, #120]	@ (80015dc <main+0x1c4>)
 8001564:	f003 ff2a 	bl	80053bc <SX1278_LoRaEntryTx>
 8001568:	4603      	mov	r3, r0
 800156a:	4a1f      	ldr	r2, [pc, #124]	@ (80015e8 <main+0x1d0>)
 800156c:	6013      	str	r3, [r2, #0]
	  printf("Entry: %d\r\n", ret);
 800156e:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <main+0x1d0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4619      	mov	r1, r3
 8001574:	4823      	ldr	r0, [pc, #140]	@ (8001604 <main+0x1ec>)
 8001576:	f004 fdbb 	bl	80060f0 <iprintf>

	  printf("Sending %s\r\n", buffer);
 800157a:	4920      	ldr	r1, [pc, #128]	@ (80015fc <main+0x1e4>)
 800157c:	4822      	ldr	r0, [pc, #136]	@ (8001608 <main+0x1f0>)
 800157e:	f004 fdb7 	bl	80060f0 <iprintf>
	  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 8001582:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <main+0x1e8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800158c:	491b      	ldr	r1, [pc, #108]	@ (80015fc <main+0x1e4>)
 800158e:	4813      	ldr	r0, [pc, #76]	@ (80015dc <main+0x1c4>)
 8001590:	f003 ff6c 	bl	800546c <SX1278_LoRaTxPacket>
 8001594:	4603      	mov	r3, r0
 8001596:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <main+0x1d0>)
 8001598:	6013      	str	r3, [r2, #0]
			  	  	  	  	  	  message_length, 2000);
	  message += 1;
 800159a:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <main+0x1f4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	4a1a      	ldr	r2, [pc, #104]	@ (800160c <main+0x1f4>)
 80015a2:	6013      	str	r3, [r2, #0]

	  printf("Transmission: %d\r\n", ret);
 80015a4:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <main+0x1d0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4819      	ldr	r0, [pc, #100]	@ (8001610 <main+0x1f8>)
 80015ac:	f004 fda0 	bl	80060f0 <iprintf>
	  printf("Package sent...\r\n");
 80015b0:	4818      	ldr	r0, [pc, #96]	@ (8001614 <main+0x1fc>)
 80015b2:	f004 fe05 	bl	80061c0 <puts>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80015b6:	bf00      	nop
 80015b8:	e78c      	b.n	80014d4 <main+0xbc>
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
 80015c0:	19de5080 	.word	0x19de5080
 80015c4:	00000000 	.word	0x00000000
 80015c8:	08008b20 	.word	0x08008b20
 80015cc:	200002f8 	.word	0x200002f8
 80015d0:	40010c00 	.word	0x40010c00
 80015d4:	40010800 	.word	0x40010800
 80015d8:	20000258 	.word	0x20000258
 80015dc:	20000318 	.word	0x20000318
 80015e0:	08008b30 	.word	0x08008b30
 80015e4:	08008b4c 	.word	0x08008b4c
 80015e8:	20000430 	.word	0x20000430
 80015ec:	20000204 	.word	0x20000204
 80015f0:	08008b6c 	.word	0x08008b6c
 80015f4:	08008b78 	.word	0x08008b78
 80015f8:	08008b8c 	.word	0x08008b8c
 80015fc:	20000434 	.word	0x20000434
 8001600:	20000638 	.word	0x20000638
 8001604:	08008be4 	.word	0x08008be4
 8001608:	08008bf0 	.word	0x08008bf0
 800160c:	20000634 	.word	0x20000634
 8001610:	08008c00 	.word	0x08008c00
 8001614:	08008c14 	.word	0x08008c14

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b090      	sub	sp, #64	@ 0x40
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	2228      	movs	r2, #40	@ 0x28
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f004 feca 	bl	80063c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	2301      	movs	r3, #1
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164c:	2302      	movs	r3, #2
 800164e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001656:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800165a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fa7d 	bl	8003b60 <HAL_RCC_OscConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800166c:	f000 f8e8 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001670:	230f      	movs	r3, #15
 8001672:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001674:	2302      	movs	r3, #2
 8001676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800167c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2102      	movs	r1, #2
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fcea 	bl	8004064 <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001696:	f000 f8d3 	bl	8001840 <Error_Handler>
  }
}
 800169a:	bf00      	nop
 800169c:	3740      	adds	r7, #64	@ 0x40
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016aa:	4a13      	ldr	r2, [pc, #76]	@ (80016f8 <MX_I2C1_Init+0x54>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016b0:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <MX_I2C1_Init+0x58>)
 80016b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016e2:	f001 f9d7 	bl	8002a94 <HAL_I2C_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016ec:	f000 f8a8 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000204 	.word	0x20000204
 80016f8:	40005400 	.word	0x40005400
 80016fc:	00061a80 	.word	0x00061a80

08001700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_SPI1_Init+0x64>)
 8001706:	4a18      	ldr	r2, [pc, #96]	@ (8001768 <MX_SPI1_Init+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <MX_SPI1_Init+0x64>)
 800170c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <MX_SPI1_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <MX_SPI1_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_SPI1_Init+0x64>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <MX_SPI1_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_SPI1_Init+0x64>)
 8001734:	2218      	movs	r2, #24
 8001736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_SPI1_Init+0x64>)
 800174c:	220a      	movs	r2, #10
 800174e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <MX_SPI1_Init+0x64>)
 8001752:	f002 fe15 	bl	8004380 <HAL_SPI_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800175c:	f000 f870 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000258 	.word	0x20000258
 8001768:	40013000 	.word	0x40013000

0800176c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <MX_USART1_UART_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f003 fa23 	bl	8004bee <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ae:	f000 f847 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002b0 	.word	0x200002b0
 80017bc:	40013800 	.word	0x40013800

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <MX_GPIO_Init+0x58>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <MX_GPIO_Init+0x58>)
 80017cc:	f043 0320 	orr.w	r3, r3, #32
 80017d0:	6193      	str	r3, [r2, #24]
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_GPIO_Init+0x58>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_GPIO_Init+0x58>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <MX_GPIO_Init+0x58>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_GPIO_Init+0x58>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_GPIO_Init+0x58>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <MX_GPIO_Init+0x58>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6193      	str	r3, [r2, #24]
 8001802:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <MX_GPIO_Init+0x58>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40021000 	.word	0x40021000

0800181c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001824:	1d39      	adds	r1, r7, #4
 8001826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800182a:	2201      	movs	r2, #1
 800182c:	4803      	ldr	r0, [pc, #12]	@ (800183c <__io_putchar+0x20>)
 800182e:	f003 fa2e 	bl	8004c8e <HAL_UART_Transmit>

  return ch;
 8001832:	687b      	ldr	r3, [r7, #4]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200002b0 	.word	0x200002b0

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <Error_Handler+0x8>
 800184c:	0000      	movs	r0, r0
	...

08001850 <MPU6050_Init>:
const double Accel_Z_corrector = 14418.0;
uint32_t timer;


uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af04      	add	r7, sp, #16
 8001856:	6078      	str	r0, [r7, #4]
	kalmanX.Q_angle=0.001f;
 8001858:	4941      	ldr	r1, [pc, #260]	@ (8001960 <MPU6050_Init+0x110>)
 800185a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001948 <MPU6050_Init+0xf8>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	e9c1 2300 	strd	r2, r3, [r1]
	kalmanX.Q_bias=0.003f;
 8001864:	493e      	ldr	r1, [pc, #248]	@ (8001960 <MPU6050_Init+0x110>)
 8001866:	a33a      	add	r3, pc, #232	@ (adr r3, 8001950 <MPU6050_Init+0x100>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalmanX.R_measure=0.03f;
 8001870:	493b      	ldr	r1, [pc, #236]	@ (8001960 <MPU6050_Init+0x110>)
 8001872:	a339      	add	r3, pc, #228	@ (adr r3, 8001958 <MPU6050_Init+0x108>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	e9c1 2304 	strd	r2, r3, [r1, #16]

	kalmanY.Q_angle=0.001f;
 800187c:	4939      	ldr	r1, [pc, #228]	@ (8001964 <MPU6050_Init+0x114>)
 800187e:	a332      	add	r3, pc, #200	@ (adr r3, 8001948 <MPU6050_Init+0xf8>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	e9c1 2300 	strd	r2, r3, [r1]
	kalmanY.Q_bias=0.003f;
 8001888:	4936      	ldr	r1, [pc, #216]	@ (8001964 <MPU6050_Init+0x114>)
 800188a:	a331      	add	r3, pc, #196	@ (adr r3, 8001950 <MPU6050_Init+0x100>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalmanY.R_measure=0.03f;
 8001894:	4933      	ldr	r1, [pc, #204]	@ (8001964 <MPU6050_Init+0x114>)
 8001896:	a330      	add	r3, pc, #192	@ (adr r3, 8001958 <MPU6050_Init+0x108>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t check;
	uint8_t data;

	// check device ID WHO_I_AM

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80018a0:	2364      	movs	r3, #100	@ 0x64
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	2301      	movs	r3, #1
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	f107 030f 	add.w	r3, r7, #15
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2301      	movs	r3, #1
 80018b0:	2275      	movs	r2, #117	@ 0x75
 80018b2:	21d0      	movs	r1, #208	@ 0xd0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f001 fb2b 	bl	8002f10 <HAL_I2C_Mem_Read>
	// 0x68 will be returned by the sensor if everything goes well
	if(check==104)
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b68      	cmp	r3, #104	@ 0x68
 80018be:	d13d      	bne.n	800193c <MPU6050_Init+0xec>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up

		data=0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx,MPU6050_ADDR,PWR_MGMT_1_REG,1,&data,1,i2c_timeout);
 80018c4:	2364      	movs	r3, #100	@ 0x64
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	2301      	movs	r3, #1
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	f107 030e 	add.w	r3, r7, #14
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	226b      	movs	r2, #107	@ 0x6b
 80018d6:	21d0      	movs	r1, #208	@ 0xd0
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f001 fa1f 	bl	8002d1c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data = 0x07;
 80018de:	2307      	movs	r3, #7
 80018e0:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx,MPU6050_ADDR,SMPLRT_DIV_REG,1,&data,1,i2c_timeout);
 80018e2:	2364      	movs	r3, #100	@ 0x64
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	2301      	movs	r3, #1
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	f107 030e 	add.w	r3, r7, #14
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2301      	movs	r3, #1
 80018f2:	2219      	movs	r2, #25
 80018f4:	21d0      	movs	r1, #208	@ 0xd0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fa10 	bl	8002d1c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		data = 0x00;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, i2c_timeout);
 8001900:	2364      	movs	r3, #100	@ 0x64
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2301      	movs	r3, #1
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 030e 	add.w	r3, r7, #14
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	221c      	movs	r2, #28
 8001912:	21d0      	movs	r1, #208	@ 0xd0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f001 fa01 	bl	8002d1c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		data = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx,MPU6050_ADDR,GYRO_CONFIG_REG,1,&data,1,i2c_timeout);
 800191e:	2364      	movs	r3, #100	@ 0x64
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2301      	movs	r3, #1
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	f107 030e 	add.w	r3, r7, #14
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	221b      	movs	r2, #27
 8001930:	21d0      	movs	r1, #208	@ 0xd0
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f001 f9f2 	bl	8002d1c <HAL_I2C_Mem_Write>

		return 0;
 8001938:	2300      	movs	r3, #0
 800193a:	e000      	b.n	800193e <MPU6050_Init+0xee>
	}
	return 1;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e0000000 	.word	0xe0000000
 800194c:	3f50624d 	.word	0x3f50624d
 8001950:	c0000000 	.word	0xc0000000
 8001954:	3f689374 	.word	0x3f689374
 8001958:	e0000000 	.word	0xe0000000
 800195c:	3f9eb851 	.word	0x3f9eb851
 8001960:	20000640 	.word	0x20000640
 8001964:	20000688 	.word	0x20000688

08001968 <MPU6050_Read_All>:

}


void MPU6050_Read_All(I2C_HandleTypeDef * I2Cx,MPU6050_t *DataStruct)
{
 8001968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800196c:	b094      	sub	sp, #80	@ 0x50
 800196e:	af04      	add	r7, sp, #16
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx,MPU6050_ADDR,ACCEL_XOUT_H_REG,1,Rec_Data,14,i2c_timeout);
 8001974:	2364      	movs	r3, #100	@ 0x64
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	230e      	movs	r3, #14
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	223b      	movs	r2, #59	@ 0x3b
 8001986:	21d0      	movs	r1, #208	@ 0xd0
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f001 fac1 	bl	8002f10 <HAL_I2C_Mem_Read>

	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b21a      	sxth	r2, r3
 8001994:	7a7b      	ldrb	r3, [r7, #9]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21a      	sxth	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80019a0:	7abb      	ldrb	r3, [r7, #10]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80019b2:	7b3b      	ldrb	r3, [r7, #12]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	7b7b      	ldrb	r3, [r7, #13]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21a      	sxth	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	809a      	strh	r2, [r3, #4]

	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80019d2:	7c3b      	ldrb	r3, [r7, #16]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	7c7b      	ldrb	r3, [r7, #17]
 80019da:	b21b      	sxth	r3, r3
 80019dc:	4313      	orrs	r3, r2
 80019de:	b21a      	sxth	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80019e4:	7cbb      	ldrb	r3, [r7, #18]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7cfb      	ldrb	r3, [r7, #19]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	845a      	strh	r2, [r3, #34]	@ 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80019f6:	7d3b      	ldrb	r3, [r7, #20]
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	7d7b      	ldrb	r3, [r7, #21]
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	849a      	strh	r2, [r3, #36]	@ 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW/16384.0;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fcf8 	bl	8000404 <__aeabi_i2d>
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b95      	ldr	r3, [pc, #596]	@ (8001c70 <MPU6050_Read_All+0x308>)
 8001a1a:	f7fe fe87 	bl	800072c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW/16384.0;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fce8 	bl	8000404 <__aeabi_i2d>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b8d      	ldr	r3, [pc, #564]	@ (8001c70 <MPU6050_Read_All+0x308>)
 8001a3a:	f7fe fe77 	bl	800072c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW/Accel_Z_corrector;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fcd8 	bl	8000404 <__aeabi_i2d>
 8001a54:	a380      	add	r3, pc, #512	@ (adr r3, 8001c58 <MPU6050_Read_All+0x2f0>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe fe67 	bl	800072c <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	e9c1 2306 	strd	r2, r3, [r1, #24]

	DataStruct->Temperature = (float) ((int16_t) temp/(float) 340.0 + (float)36.53);
 8001a68:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff f8c5 	bl	8000bfc <__aeabi_i2f>
 8001a72:	4603      	mov	r3, r0
 8001a74:	497f      	ldr	r1, [pc, #508]	@ (8001c74 <MPU6050_Read_All+0x30c>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f9c8 	bl	8000e0c <__aeabi_fdiv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	497e      	ldr	r1, [pc, #504]	@ (8001c78 <MPU6050_Read_All+0x310>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f807 	bl	8000a94 <__addsf3>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	641a      	str	r2, [r3, #64]	@ 0x40
	DataStruct->Gx = DataStruct->Gyro_X_RAW/131.0;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fcb5 	bl	8000404 <__aeabi_i2d>
 8001a9a:	a371      	add	r3, pc, #452	@ (adr r3, 8001c60 <MPU6050_Read_All+0x2f8>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fe44 	bl	800072c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW/131.0;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fca5 	bl	8000404 <__aeabi_i2d>
 8001aba:	a369      	add	r3, pc, #420	@ (adr r3, 8001c60 <MPU6050_Read_All+0x2f8>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fe34 	bl	800072c <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW/131.0;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fc95 	bl	8000404 <__aeabi_i2d>
 8001ada:	a361      	add	r3, pc, #388	@ (adr r3, 8001c60 <MPU6050_Read_All+0x2f8>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fe24 	bl	800072c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	6839      	ldr	r1, [r7, #0]
 8001aea:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	// Kalman angle solve

	double dt = (double)(HAL_GetTick() - timer)/1000;
 8001aee:	f000 fd0b 	bl	8002508 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b61      	ldr	r3, [pc, #388]	@ (8001c7c <MPU6050_Read_All+0x314>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fc72 	bl	80003e4 <__aeabi_ui2d>
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b5e      	ldr	r3, [pc, #376]	@ (8001c80 <MPU6050_Read_All+0x318>)
 8001b06:	f7fe fe11 	bl	800072c <__aeabi_ddiv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	timer = HAL_GetTick();
 8001b12:	f000 fcf9 	bl	8002508 <HAL_GetTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a58      	ldr	r2, [pc, #352]	@ (8001c7c <MPU6050_Read_All+0x314>)
 8001b1a:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt=sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	fb03 f202 	mul.w	r2, r3, r2
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b34:	4619      	mov	r1, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
	double roll_sqrt=sqrt(
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fc5e 	bl	8000404 <__aeabi_i2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f006 fc76 	bl	8008440 <sqrt>
 8001b54:	e9c7 0108 	strd	r0, r1, [r7, #32]
	if(roll_sqrt != 0.0)
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b64:	f7fe ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d119      	bne.n	8001ba2 <MPU6050_Read_All+0x23a>
	{
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fc45 	bl	8000404 <__aeabi_i2d>
 8001b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b7e:	f7fe fdd5 	bl	800072c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f006 fc7d 	bl	8008488 <atan>
 8001b8e:	a336      	add	r3, pc, #216	@ (adr r3, 8001c68 <MPU6050_Read_All+0x300>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fca0 	bl	80004d8 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001ba0:	e005      	b.n	8001bae <MPU6050_Read_All+0x246>

	}
	else
	{
		roll = 0.0;
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	}

	double pitch = atan2(- DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc24 	bl	8000404 <__aeabi_i2d>
 8001bbc:	4682      	mov	sl, r0
 8001bbe:	468b      	mov	fp, r1
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc1c 	bl	8000404 <__aeabi_i2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4650      	mov	r0, sl
 8001bd2:	4659      	mov	r1, fp
 8001bd4:	f006 fc32 	bl	800843c <atan2>
 8001bd8:	a323      	add	r3, pc, #140	@ (adr r3, 8001c68 <MPU6050_Read_All+0x300>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fc7b 	bl	80004d8 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	if((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <MPU6050_Read_All+0x31c>)
 8001bf0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bf4:	f7fe fee2 	bl	80009bc <__aeabi_dcmplt>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00a      	beq.n	8001c14 <MPU6050_Read_All+0x2ac>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <MPU6050_Read_All+0x320>)
 8001c0a:	f7fe fef5 	bl	80009f8 <__aeabi_dcmpgt>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d114      	bne.n	8001c3e <MPU6050_Read_All+0x2d6>
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <MPU6050_Read_All+0x320>)
 8001c1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1e:	f7fe feeb 	bl	80009f8 <__aeabi_dcmpgt>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d033      	beq.n	8001c90 <MPU6050_Read_All+0x328>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <MPU6050_Read_All+0x31c>)
 8001c34:	f7fe fec2 	bl	80009bc <__aeabi_dcmplt>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d028      	beq.n	8001c90 <MPU6050_Read_All+0x328>
	{
		kalmanY.angle=pitch;
 8001c3e:	4913      	ldr	r1, [pc, #76]	@ (8001c8c <MPU6050_Read_All+0x324>)
 8001c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c44:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c52:	e030      	b.n	8001cb6 <MPU6050_Read_All+0x34e>
 8001c54:	f3af 8000 	nop.w
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40cc2900 	.word	0x40cc2900
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40606000 	.word	0x40606000
 8001c68:	1a63c1f8 	.word	0x1a63c1f8
 8001c6c:	404ca5dc 	.word	0x404ca5dc
 8001c70:	40d00000 	.word	0x40d00000
 8001c74:	43aa0000 	.word	0x43aa0000
 8001c78:	42121eb8 	.word	0x42121eb8
 8001c7c:	200006d0 	.word	0x200006d0
 8001c80:	408f4000 	.word	0x408f4000
 8001c84:	c0568000 	.word	0xc0568000
 8001c88:	40568000 	.word	0x40568000
 8001c8c:	20000688 	.word	0x20000688
	}
	else
	{
		DataStruct->KalmanAngleY = Kalman_getAngle(&kalmanY, pitch, DataStruct->Gy, dt);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001c96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c9e:	e9cd 2300 	strd	r2, r3, [sp]
 8001ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca6:	481c      	ldr	r0, [pc, #112]	@ (8001d18 <MPU6050_Read_All+0x3b0>)
 8001ca8:	f000 f83c 	bl	8001d24 <Kalman_getAngle>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	}
	if(fabs(DataStruct->KalmanAngleY) > 90)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001cbc:	4690      	mov	r8, r2
 8001cbe:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <MPU6050_Read_All+0x3b4>)
 8001cc8:	4640      	mov	r0, r8
 8001cca:	4649      	mov	r1, r9
 8001ccc:	f7fe fe94 	bl	80009f8 <__aeabi_dcmpgt>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <MPU6050_Read_All+0x380>
	{
		DataStruct->Gx = - DataStruct->Gx;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001cdc:	4614      	mov	r4, r2
 8001cde:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28

	}
	DataStruct->KalmanAngleX = Kalman_getAngle(&kalmanX, roll, DataStruct->Gy, dt);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001cee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cf6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001cfe:	4808      	ldr	r0, [pc, #32]	@ (8001d20 <MPU6050_Read_All+0x3b8>)
 8001d00:	f000 f810 	bl	8001d24 <Kalman_getAngle>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

}
 8001d0e:	bf00      	nop
 8001d10:	3740      	adds	r7, #64	@ 0x40
 8001d12:	46bd      	mov	sp, r7
 8001d14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d18:	20000688 	.word	0x20000688
 8001d1c:	40568000 	.word	0x40568000
 8001d20:	20000640 	.word	0x20000640

08001d24 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman,double newAngle,double newRate,double dt)
{
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b092      	sub	sp, #72	@ 0x48
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	e9c7 2300 	strd	r2, r3, [r7]
	// step1

	double rate = newRate - Kalman->bias;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001d3a:	f7fe fa15 	bl	8000168 <__aeabi_dsub>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	Kalman->angle += dt*rate;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001d54:	f7fe fbc0 	bl	80004d8 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f7fe fa04 	bl	800016c <__adddf3>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	/**
	*  P[2][2]=| P[0][0]  P[0][1] |
	*          | P[1][0]  P[1][1] |
	*/

	Kalman->P[0][0] += dt *(dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001d7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001d7e:	f7fe fbab 	bl	80004d8 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001d90:	f7fe f9ea 	bl	8000168 <__aeabi_dsub>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001da2:	f7fe f9e1 	bl	8000168 <__aeabi_dsub>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe f9da 	bl	800016c <__adddf3>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001dc4:	f7fe fb88 	bl	80004d8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f7fe f9cc 	bl	800016c <__adddf3>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	68f9      	ldr	r1, [r7, #12]
 8001dda:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001dea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001dee:	f7fe fb73 	bl	80004d8 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4620      	mov	r0, r4
 8001df8:	4629      	mov	r1, r5
 8001dfa:	f7fe f9b5 	bl	8000168 <__aeabi_dsub>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001e14:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001e18:	f7fe fb5e 	bl	80004d8 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe f9a0 	bl	8000168 <__aeabi_dsub>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001e42:	f7fe fb49 	bl	80004d8 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe f98d 	bl	800016c <__adddf3>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	68f9      	ldr	r1, [r7, #12]
 8001e58:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	// Phương trình cập nhật phép đo bộ lọc Kalman rời rạc - Cập nhật đo lường ("Chính xác")
	// Tính mức tăng Kalman - Tính mức tăng Kalman
	/* Step 4 */

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e68:	f7fe f980 	bl	800016c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	/* Step 5 */
	double K[2];
	K[0] = Kalman->P[0][0] /S;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e7e:	f7fe fc55 	bl	800072c <__aeabi_ddiv>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] /S;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001e90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e94:	f7fe fc4a 	bl	800072c <__aeabi_ddiv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Tính góc và độ lệch - Cập nhật ước tính với phép đo zk (newAngle)
	/* Step 3 */

	double y = newAngle - Kalman->angle;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ea6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eaa:	f7fe f95d 	bl	8000168 <__aeabi_dsub>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	/* Step 6*/

	Kalman->angle += K[0] * y;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001ebc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ec0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ec4:	f7fe fb08 	bl	80004d8 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4629      	mov	r1, r5
 8001ed0:	f7fe f94c 	bl	800016c <__adddf3>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	68f9      	ldr	r1, [r7, #12]
 8001eda:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias  += K[1] * y;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ee4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ee8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001eec:	f7fe faf4 	bl	80004d8 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe f938 	bl	800016c <__adddf3>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001f0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double P01_temp = Kalman->P[0][1];
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001f16:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001f20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f28:	f7fe fad6 	bl	80004d8 <__aeabi_dmul>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe f918 	bl	8000168 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	68f9      	ldr	r1, [r7, #12]
 8001f3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001f48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f50:	f7fe fac2 	bl	80004d8 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4620      	mov	r0, r4
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f7fe f904 	bl	8000168 <__aeabi_dsub>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001f70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f78:	f7fe faae 	bl	80004d8 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe f8f0 	bl	8000168 <__aeabi_dsub>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	68f9      	ldr	r1, [r7, #12]
 8001f8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001f98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fa0:	f7fe fa9a 	bl	80004d8 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4620      	mov	r0, r4
 8001faa:	4629      	mov	r1, r5
 8001fac:	f7fe f8dc 	bl	8000168 <__aeabi_dsub>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	return Kalman->angle;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	3748      	adds	r7, #72	@ 0x48
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001fcc <init_spi1>:


#include "spi.h"

void init_spi1(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <init_spi1+0x64>)
 8001fd2:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <init_spi1+0x68>)
 8001fd4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <init_spi1+0x64>)
 8001fd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fdc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <init_spi1+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <init_spi1+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <init_spi1+0x64>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <init_spi1+0x64>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <init_spi1+0x64>)
 8001ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ffc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <init_spi1+0x64>)
 8002000:	2218      	movs	r2, #24
 8002002:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002004:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <init_spi1+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <init_spi1+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <init_spi1+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <init_spi1+0x64>)
 8002018:	2207      	movs	r2, #7
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c
//	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	@ (8002030 <init_spi1+0x64>)
 800201e:	f002 f9af 	bl	8004380 <HAL_SPI_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <init_spi1+0x60>
	{
	  Error_Handler();
 8002028:	f7ff fc0a 	bl	8001840 <Error_Handler>
	}
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000258 	.word	0x20000258
 8002034:	40013000 	.word	0x40013000

08002038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_MspInit+0x40>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <HAL_MspInit+0x40>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6193      	str	r3, [r2, #24]
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <HAL_MspInit+0x40>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <HAL_MspInit+0x40>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a07      	ldr	r2, [pc, #28]	@ (8002078 <HAL_MspInit+0x40>)
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_MspInit+0x40>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a15      	ldr	r2, [pc, #84]	@ (80020ec <HAL_I2C_MspInit+0x70>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d123      	bne.n	80020e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209c:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <HAL_I2C_MspInit+0x74>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a13      	ldr	r2, [pc, #76]	@ (80020f0 <HAL_I2C_MspInit+0x74>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_I2C_MspInit+0x74>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b4:	23c0      	movs	r3, #192	@ 0xc0
 80020b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b8:	2312      	movs	r3, #18
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	480b      	ldr	r0, [pc, #44]	@ (80020f4 <HAL_I2C_MspInit+0x78>)
 80020c8:	f000 fb30 	bl	800272c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_I2C_MspInit+0x74>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_I2C_MspInit+0x74>)
 80020d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020d6:	61d3      	str	r3, [r2, #28]
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_I2C_MspInit+0x74>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020e4:	bf00      	nop
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40005400 	.word	0x40005400
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010c00 	.word	0x40010c00

080020f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <HAL_SPI_MspInit+0x88>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12f      	bne.n	8002178 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002118:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HAL_SPI_MspInit+0x8c>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_SPI_MspInit+0x8c>)
 800211e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <HAL_SPI_MspInit+0x8c>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <HAL_SPI_MspInit+0x8c>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a13      	ldr	r2, [pc, #76]	@ (8002184 <HAL_SPI_MspInit+0x8c>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <HAL_SPI_MspInit+0x8c>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002148:	23a0      	movs	r3, #160	@ 0xa0
 800214a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4619      	mov	r1, r3
 800215a:	480b      	ldr	r0, [pc, #44]	@ (8002188 <HAL_SPI_MspInit+0x90>)
 800215c:	f000 fae6 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002160:	2340      	movs	r3, #64	@ 0x40
 8002162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4619      	mov	r1, r3
 8002172:	4805      	ldr	r0, [pc, #20]	@ (8002188 <HAL_SPI_MspInit+0x90>)
 8002174:	f000 fada 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002178:	bf00      	nop
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40013000 	.word	0x40013000
 8002184:	40021000 	.word	0x40021000
 8002188:	40010800 	.word	0x40010800

0800218c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <HAL_UART_MspInit+0x8c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d131      	bne.n	8002210 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <HAL_UART_MspInit+0x90>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a1a      	ldr	r2, [pc, #104]	@ (800221c <HAL_UART_MspInit+0x90>)
 80021b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_UART_MspInit+0x90>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_UART_MspInit+0x90>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a14      	ldr	r2, [pc, #80]	@ (800221c <HAL_UART_MspInit+0x90>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_UART_MspInit+0x90>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	4619      	mov	r1, r3
 80021f0:	480b      	ldr	r0, [pc, #44]	@ (8002220 <HAL_UART_MspInit+0x94>)
 80021f2:	f000 fa9b 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4619      	mov	r1, r3
 800220a:	4805      	ldr	r0, [pc, #20]	@ (8002220 <HAL_UART_MspInit+0x94>)
 800220c:	f000 fa8e 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002210:	bf00      	nop
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40013800 	.word	0x40013800
 800221c:	40021000 	.word	0x40021000
 8002220:	40010800 	.word	0x40010800

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <NMI_Handler+0x4>

0800222c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <MemManage_Handler+0x4>

0800223c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <UsageFault_Handler+0x4>

0800224c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002274:	f000 f936 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
	return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <_kill>:

int _kill(int pid, int sig)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002294:	f004 f8e6 	bl	8006464 <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	2216      	movs	r2, #22
 800229c:	601a      	str	r2, [r3, #0]
	return -1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_exit>:

void _exit (int status)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022b2:	f04f 31ff 	mov.w	r1, #4294967295
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffe7 	bl	800228a <_kill>
	while (1) {}		/* Make sure we hang here */
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <_exit+0x12>

080022c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022d2:	f3af 8000 	nop.w
 80022d6:	4601      	mov	r1, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf0      	blt.n	80022d2 <_read+0x12>
	}

return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e009      	b.n	8002320 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fa81 	bl	800181c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf1      	blt.n	800230c <_write+0x12>
	}
	return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_close>:

int _close(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	return -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002358:	605a      	str	r2, [r3, #4]
	return 0;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <_isatty>:

int _isatty(int file)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
	return 1;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
	return 0;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
	...

08002394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800239c:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <_sbrk+0x5c>)
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <_sbrk+0x60>)
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a8:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b0:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <_sbrk+0x64>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	@ (80023fc <_sbrk+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023b6:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d207      	bcs.n	80023d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c4:	f004 f84e 	bl	8006464 <__errno>
 80023c8:	4603      	mov	r3, r0
 80023ca:	220c      	movs	r2, #12
 80023cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	e009      	b.n	80023e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d4:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023da:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <_sbrk+0x64>)
 80023e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023e6:	68fb      	ldr	r3, [r7, #12]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20005000 	.word	0x20005000
 80023f4:	00000400 	.word	0x00000400
 80023f8:	200006d4 	.word	0x200006d4
 80023fc:	20000828 	.word	0x20000828

08002400 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800240c:	f7ff fff8 	bl	8002400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002410:	480b      	ldr	r0, [pc, #44]	@ (8002440 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002412:	490c      	ldr	r1, [pc, #48]	@ (8002444 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002414:	4a0c      	ldr	r2, [pc, #48]	@ (8002448 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a09      	ldr	r2, [pc, #36]	@ (800244c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002428:	4c09      	ldr	r4, [pc, #36]	@ (8002450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002436:	f004 f81b 	bl	8006470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243a:	f7fe ffed 	bl	8001418 <main>
  bx lr
 800243e:	4770      	bx	lr
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002448:	08009060 	.word	0x08009060
  ldr r2, =_sbss
 800244c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002450:	20000828 	.word	0x20000828

08002454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC1_2_IRQHandler>
	...

08002458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <HAL_Init+0x28>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	@ (8002480 <HAL_Init+0x28>)
 8002462:	f043 0310 	orr.w	r3, r3, #16
 8002466:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 f92b 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	200f      	movs	r0, #15
 8002470:	f000 f808 	bl	8002484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff fde0 	bl	8002038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <HAL_InitTick+0x54>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_InitTick+0x58>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f935 	bl	8002712 <HAL_SYSTICK_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00e      	b.n	80024d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b0f      	cmp	r3, #15
 80024b6:	d80a      	bhi.n	80024ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b8:	2200      	movs	r2, #0
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f000 f90b 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c4:	4a06      	ldr	r2, [pc, #24]	@ (80024e0 <HAL_InitTick+0x5c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000000 	.word	0x20000000
 80024dc:	20000008 	.word	0x20000008
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <HAL_IncTick+0x1c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_IncTick+0x20>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a03      	ldr	r2, [pc, #12]	@ (8002504 <HAL_IncTick+0x20>)
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	20000008 	.word	0x20000008
 8002504:	200006d8 	.word	0x200006d8

08002508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return uwTick;
 800250c:	4b02      	ldr	r3, [pc, #8]	@ (8002518 <HAL_GetTick+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	200006d8 	.word	0x200006d8

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff fff0 	bl	8002508 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffe0 	bl	8002508 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff90 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff49 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff5e 	bl	80025ac <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff90 	bl	800261c <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5f 	bl	80025c8 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffb0 	bl	8002680 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b08b      	sub	sp, #44	@ 0x2c
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273e:	e169      	b.n	8002a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002740:	2201      	movs	r2, #1
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	429a      	cmp	r2, r3
 800275a:	f040 8158 	bne.w	8002a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a9a      	ldr	r2, [pc, #616]	@ (80029cc <HAL_GPIO_Init+0x2a0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d05e      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002768:	4a98      	ldr	r2, [pc, #608]	@ (80029cc <HAL_GPIO_Init+0x2a0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d875      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800276e:	4a98      	ldr	r2, [pc, #608]	@ (80029d0 <HAL_GPIO_Init+0x2a4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d058      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002774:	4a96      	ldr	r2, [pc, #600]	@ (80029d0 <HAL_GPIO_Init+0x2a4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d86f      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800277a:	4a96      	ldr	r2, [pc, #600]	@ (80029d4 <HAL_GPIO_Init+0x2a8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d052      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002780:	4a94      	ldr	r2, [pc, #592]	@ (80029d4 <HAL_GPIO_Init+0x2a8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d869      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 8002786:	4a94      	ldr	r2, [pc, #592]	@ (80029d8 <HAL_GPIO_Init+0x2ac>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04c      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 800278c:	4a92      	ldr	r2, [pc, #584]	@ (80029d8 <HAL_GPIO_Init+0x2ac>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d863      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 8002792:	4a92      	ldr	r2, [pc, #584]	@ (80029dc <HAL_GPIO_Init+0x2b0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d046      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002798:	4a90      	ldr	r2, [pc, #576]	@ (80029dc <HAL_GPIO_Init+0x2b0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d85d      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d82a      	bhi.n	80027f8 <HAL_GPIO_Init+0xcc>
 80027a2:	2b12      	cmp	r3, #18
 80027a4:	d859      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <HAL_GPIO_Init+0x80>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	08002827 	.word	0x08002827
 80027b0:	08002801 	.word	0x08002801
 80027b4:	08002813 	.word	0x08002813
 80027b8:	08002855 	.word	0x08002855
 80027bc:	0800285b 	.word	0x0800285b
 80027c0:	0800285b 	.word	0x0800285b
 80027c4:	0800285b 	.word	0x0800285b
 80027c8:	0800285b 	.word	0x0800285b
 80027cc:	0800285b 	.word	0x0800285b
 80027d0:	0800285b 	.word	0x0800285b
 80027d4:	0800285b 	.word	0x0800285b
 80027d8:	0800285b 	.word	0x0800285b
 80027dc:	0800285b 	.word	0x0800285b
 80027e0:	0800285b 	.word	0x0800285b
 80027e4:	0800285b 	.word	0x0800285b
 80027e8:	0800285b 	.word	0x0800285b
 80027ec:	0800285b 	.word	0x0800285b
 80027f0:	08002809 	.word	0x08002809
 80027f4:	0800281d 	.word	0x0800281d
 80027f8:	4a79      	ldr	r2, [pc, #484]	@ (80029e0 <HAL_GPIO_Init+0x2b4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fe:	e02c      	b.n	800285a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	623b      	str	r3, [r7, #32]
          break;
 8002806:	e029      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e024      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	3308      	adds	r3, #8
 8002818:	623b      	str	r3, [r7, #32]
          break;
 800281a:	e01f      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	330c      	adds	r3, #12
 8002822:	623b      	str	r3, [r7, #32]
          break;
 8002824:	e01a      	b.n	800285c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282e:	2304      	movs	r3, #4
 8002830:	623b      	str	r3, [r7, #32]
          break;
 8002832:	e013      	b.n	800285c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800283c:	2308      	movs	r3, #8
 800283e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	611a      	str	r2, [r3, #16]
          break;
 8002846:	e009      	b.n	800285c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002848:	2308      	movs	r3, #8
 800284a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	615a      	str	r2, [r3, #20]
          break;
 8002852:	e003      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
          break;
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x130>
          break;
 800285a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2bff      	cmp	r3, #255	@ 0xff
 8002860:	d801      	bhi.n	8002866 <HAL_GPIO_Init+0x13a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	e001      	b.n	800286a <HAL_GPIO_Init+0x13e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2bff      	cmp	r3, #255	@ 0xff
 8002870:	d802      	bhi.n	8002878 <HAL_GPIO_Init+0x14c>
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x152>
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	3b08      	subs	r3, #8
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	210f      	movs	r1, #15
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	6a39      	ldr	r1, [r7, #32]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	431a      	orrs	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80b1 	beq.w	8002a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028ac:	4b4d      	ldr	r3, [pc, #308]	@ (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a4c      	ldr	r2, [pc, #304]	@ (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b4a      	ldr	r3, [pc, #296]	@ (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c4:	4a48      	ldr	r2, [pc, #288]	@ (80029e8 <HAL_GPIO_Init+0x2bc>)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a40      	ldr	r2, [pc, #256]	@ (80029ec <HAL_GPIO_Init+0x2c0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d013      	beq.n	8002918 <HAL_GPIO_Init+0x1ec>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3f      	ldr	r2, [pc, #252]	@ (80029f0 <HAL_GPIO_Init+0x2c4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00d      	beq.n	8002914 <HAL_GPIO_Init+0x1e8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a3e      	ldr	r2, [pc, #248]	@ (80029f4 <HAL_GPIO_Init+0x2c8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <HAL_GPIO_Init+0x1e4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a3d      	ldr	r2, [pc, #244]	@ (80029f8 <HAL_GPIO_Init+0x2cc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_GPIO_Init+0x1e0>
 8002908:	2303      	movs	r3, #3
 800290a:	e006      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 800290c:	2304      	movs	r3, #4
 800290e:	e004      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002910:	2302      	movs	r3, #2
 8002912:	e002      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002918:	2300      	movs	r3, #0
 800291a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291c:	f002 0203 	and.w	r2, r2, #3
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	4093      	lsls	r3, r2
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800292a:	492f      	ldr	r1, [pc, #188]	@ (80029e8 <HAL_GPIO_Init+0x2bc>)
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002944:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	492c      	ldr	r1, [pc, #176]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002952:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	43db      	mvns	r3, r3
 800295a:	4928      	ldr	r1, [pc, #160]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800295c:	4013      	ands	r3, r2
 800295e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800296c:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4922      	ldr	r1, [pc, #136]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	491e      	ldr	r1, [pc, #120]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4918      	ldr	r1, [pc, #96]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029a2:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4914      	ldr	r1, [pc, #80]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d021      	beq.n	8002a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029bc:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	490e      	ldr	r1, [pc, #56]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]
 80029c8:	e021      	b.n	8002a0e <HAL_GPIO_Init+0x2e2>
 80029ca:	bf00      	nop
 80029cc:	10320000 	.word	0x10320000
 80029d0:	10310000 	.word	0x10310000
 80029d4:	10220000 	.word	0x10220000
 80029d8:	10210000 	.word	0x10210000
 80029dc:	10120000 	.word	0x10120000
 80029e0:	10110000 	.word	0x10110000
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40010800 	.word	0x40010800
 80029f0:	40010c00 	.word	0x40010c00
 80029f4:	40011000 	.word	0x40011000
 80029f8:	40011400 	.word	0x40011400
 80029fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	4909      	ldr	r1, [pc, #36]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	3301      	adds	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f47f ae8e 	bne.w	8002740 <HAL_GPIO_Init+0x14>
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	372c      	adds	r7, #44	@ 0x2c
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e001      	b.n	8002a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	807b      	strh	r3, [r7, #2]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a72:	787b      	ldrb	r3, [r7, #1]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a7e:	e003      	b.n	8002a88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a80:	887b      	ldrh	r3, [r7, #2]
 8002a82:	041a      	lsls	r2, r3, #16
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	611a      	str	r2, [r3, #16]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e12b      	b.n	8002cfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fade 	bl	800207c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af8:	f001 fbfc 	bl	80042f4 <HAL_RCC_GetPCLK1Freq>
 8002afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4a81      	ldr	r2, [pc, #516]	@ (8002d08 <HAL_I2C_Init+0x274>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d807      	bhi.n	8002b18 <HAL_I2C_Init+0x84>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a80      	ldr	r2, [pc, #512]	@ (8002d0c <HAL_I2C_Init+0x278>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	bf94      	ite	ls
 8002b10:	2301      	movls	r3, #1
 8002b12:	2300      	movhi	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e006      	b.n	8002b26 <HAL_I2C_Init+0x92>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d10 <HAL_I2C_Init+0x27c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	bf94      	ite	ls
 8002b20:	2301      	movls	r3, #1
 8002b22:	2300      	movhi	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0e7      	b.n	8002cfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4a78      	ldr	r2, [pc, #480]	@ (8002d14 <HAL_I2C_Init+0x280>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0c9b      	lsrs	r3, r3, #18
 8002b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d08 <HAL_I2C_Init+0x274>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d802      	bhi.n	8002b68 <HAL_I2C_Init+0xd4>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3301      	adds	r3, #1
 8002b66:	e009      	b.n	8002b7c <HAL_I2C_Init+0xe8>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	4a69      	ldr	r2, [pc, #420]	@ (8002d18 <HAL_I2C_Init+0x284>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	495c      	ldr	r1, [pc, #368]	@ (8002d08 <HAL_I2C_Init+0x274>)
 8002b98:	428b      	cmp	r3, r1
 8002b9a:	d819      	bhi.n	8002bd0 <HAL_I2C_Init+0x13c>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e59      	subs	r1, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002baa:	1c59      	adds	r1, r3, #1
 8002bac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_I2C_Init+0x138>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e59      	subs	r1, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bca:	e051      	b.n	8002c70 <HAL_I2C_Init+0x1dc>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e04f      	b.n	8002c70 <HAL_I2C_Init+0x1dc>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d111      	bne.n	8002bfc <HAL_I2C_Init+0x168>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e58      	subs	r0, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e012      	b.n	8002c22 <HAL_I2C_Init+0x18e>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e58      	subs	r0, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	0099      	lsls	r1, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Init+0x196>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e022      	b.n	8002c70 <HAL_I2C_Init+0x1dc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10e      	bne.n	8002c50 <HAL_I2C_Init+0x1bc>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1e58      	subs	r0, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6859      	ldr	r1, [r3, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	440b      	add	r3, r1
 8002c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c4e:	e00f      	b.n	8002c70 <HAL_I2C_Init+0x1dc>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1e58      	subs	r0, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	0099      	lsls	r1, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	6809      	ldr	r1, [r1, #0]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6911      	ldr	r1, [r2, #16]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68d2      	ldr	r2, [r2, #12]
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	000186a0 	.word	0x000186a0
 8002d0c:	001e847f 	.word	0x001e847f
 8002d10:	003d08ff 	.word	0x003d08ff
 8002d14:	431bde83 	.word	0x431bde83
 8002d18:	10624dd3 	.word	0x10624dd3

08002d1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	817b      	strh	r3, [r7, #10]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	813b      	strh	r3, [r7, #8]
 8002d32:	4613      	mov	r3, r2
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d36:	f7ff fbe7 	bl	8002508 <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	f040 80d9 	bne.w	8002efc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2319      	movs	r3, #25
 8002d50:	2201      	movs	r2, #1
 8002d52:	496d      	ldr	r1, [pc, #436]	@ (8002f08 <HAL_I2C_Mem_Write+0x1ec>)
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fccd 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0cc      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Mem_Write+0x56>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e0c5      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d007      	beq.n	8002d98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2221      	movs	r2, #33	@ 0x21
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2240      	movs	r2, #64	@ 0x40
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a3a      	ldr	r2, [r7, #32]
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a4d      	ldr	r2, [pc, #308]	@ (8002f0c <HAL_I2C_Mem_Write+0x1f0>)
 8002dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dda:	88f8      	ldrh	r0, [r7, #6]
 8002ddc:	893a      	ldrh	r2, [r7, #8]
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4603      	mov	r3, r0
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fb04 	bl	80033f8 <I2C_RequestMemoryWrite>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d052      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e081      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fd92 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d107      	bne.n	8002e22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06b      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d11b      	bne.n	8002e9c <HAL_I2C_Mem_Write+0x180>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1aa      	bne.n	8002dfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fd85 	bl	80039b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d107      	bne.n	8002ecc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e016      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e000      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
  }
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	00100002 	.word	0x00100002
 8002f0c:	ffff0000 	.word	0xffff0000

08002f10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	@ 0x30
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	817b      	strh	r3, [r7, #10]
 8002f22:	460b      	mov	r3, r1
 8002f24:	813b      	strh	r3, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f2e:	f7ff faeb 	bl	8002508 <HAL_GetTick>
 8002f32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	f040 8250 	bne.w	80033e2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2319      	movs	r3, #25
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4982      	ldr	r1, [pc, #520]	@ (8003154 <HAL_I2C_Mem_Read+0x244>)
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fbd1 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e243      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Mem_Read+0x5a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e23c      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d007      	beq.n	8002f90 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2222      	movs	r2, #34	@ 0x22
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2240      	movs	r2, #64	@ 0x40
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a62      	ldr	r2, [pc, #392]	@ (8003158 <HAL_I2C_Mem_Read+0x248>)
 8002fd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fd2:	88f8      	ldrh	r0, [r7, #6]
 8002fd4:	893a      	ldrh	r2, [r7, #8]
 8002fd6:	8979      	ldrh	r1, [r7, #10]
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa9e 	bl	8003524 <I2C_RequestMemoryRead>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1f8      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d113      	bne.n	8003022 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e1cc      	b.n	80033bc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003026:	2b01      	cmp	r3, #1
 8003028:	d11e      	bne.n	8003068 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003038:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800303a:	b672      	cpsid	i
}
 800303c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003062:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003064:	b662      	cpsie	i
}
 8003066:	e035      	b.n	80030d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	2b02      	cmp	r3, #2
 800306e:	d11e      	bne.n	80030ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800307e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003080:	b672      	cpsid	i
}
 8003082:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030aa:	b662      	cpsie	i
}
 80030ac:	e012      	b.n	80030d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030d4:	e172      	b.n	80033bc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	2b03      	cmp	r3, #3
 80030dc:	f200 811f 	bhi.w	800331e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d123      	bne.n	8003130 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fcab 	bl	8003a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e173      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800312e:	e145      	b.n	80033bc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003134:	2b02      	cmp	r3, #2
 8003136:	d152      	bne.n	80031de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313e:	2200      	movs	r2, #0
 8003140:	4906      	ldr	r1, [pc, #24]	@ (800315c <HAL_I2C_Mem_Read+0x24c>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fad6 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e148      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
 8003152:	bf00      	nop
 8003154:	00100002 	.word	0x00100002
 8003158:	ffff0000 	.word	0xffff0000
 800315c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
}
 8003162:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031a6:	b662      	cpsie	i
}
 80031a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031dc:	e0ee      	b.n	80033bc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	2200      	movs	r2, #0
 80031e6:	4981      	ldr	r1, [pc, #516]	@ (80033ec <HAL_I2C_Mem_Read+0x4dc>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fa83 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0f5      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003206:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003208:	b672      	cpsid	i
}
 800320a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800323e:	4b6c      	ldr	r3, [pc, #432]	@ (80033f0 <HAL_I2C_Mem_Read+0x4e0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	4a6b      	ldr	r2, [pc, #428]	@ (80033f4 <HAL_I2C_Mem_Read+0x4e4>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a1a      	lsrs	r2, r3, #8
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00da      	lsls	r2, r3, #3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	3b01      	subs	r3, #1
 800325c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d118      	bne.n	8003296 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003286:	b662      	cpsie	i
}
 8003288:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0a6      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d1d9      	bne.n	8003258 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032e6:	b662      	cpsie	i
}
 80032e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800331c:	e04e      	b.n	80033bc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003320:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fb90 	bl	8003a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e058      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d124      	bne.n	80033bc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003376:	2b03      	cmp	r3, #3
 8003378:	d107      	bne.n	800338a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003388:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f ae88 	bne.w	80030d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3728      	adds	r7, #40	@ 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	00010004 	.word	0x00010004
 80033f0:	20000000 	.word	0x20000000
 80033f4:	14f8b589 	.word	0x14f8b589

080033f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	817b      	strh	r3, [r7, #10]
 800340a:	460b      	mov	r3, r1
 800340c:	813b      	strh	r3, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	2200      	movs	r2, #0
 800342a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f960 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003448:	d103      	bne.n	8003452 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003450:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e05f      	b.n	8003516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	6a3a      	ldr	r2, [r7, #32]
 800346a:	492d      	ldr	r1, [pc, #180]	@ (8003520 <I2C_RequestMemoryWrite+0x128>)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f9bb 	bl	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e04c      	b.n	8003516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003494:	6a39      	ldr	r1, [r7, #32]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fa46 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00d      	beq.n	80034be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d107      	bne.n	80034ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e02b      	b.n	8003516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034c4:	893b      	ldrh	r3, [r7, #8]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]
 80034ce:	e021      	b.n	8003514 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d0:	893b      	ldrh	r3, [r7, #8]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e0:	6a39      	ldr	r1, [r7, #32]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fa20 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d107      	bne.n	8003506 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e005      	b.n	8003516 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800350a:	893b      	ldrh	r3, [r7, #8]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	00010002 	.word	0x00010002

08003524 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	817b      	strh	r3, [r7, #10]
 8003536:	460b      	mov	r3, r1
 8003538:	813b      	strh	r3, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800354c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800355c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	2200      	movs	r2, #0
 8003566:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f8c2 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003584:	d103      	bne.n	800358e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800358c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0aa      	b.n	80036e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	6a3a      	ldr	r2, [r7, #32]
 80035a6:	4952      	ldr	r1, [pc, #328]	@ (80036f0 <I2C_RequestMemoryRead+0x1cc>)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f91d 	bl	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e097      	b.n	80036e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d0:	6a39      	ldr	r1, [r7, #32]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f9a8 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00d      	beq.n	80035fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d107      	bne.n	80035f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e076      	b.n	80036e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003600:	893b      	ldrh	r3, [r7, #8]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	611a      	str	r2, [r3, #16]
 800360a:	e021      	b.n	8003650 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800360c:	893b      	ldrh	r3, [r7, #8]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	b29b      	uxth	r3, r3
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	6a39      	ldr	r1, [r7, #32]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f982 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	2b04      	cmp	r3, #4
 8003630:	d107      	bne.n	8003642 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003640:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e050      	b.n	80036e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003646:	893b      	ldrh	r3, [r7, #8]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003652:	6a39      	ldr	r1, [r7, #32]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f967 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	2b04      	cmp	r3, #4
 8003666:	d107      	bne.n	8003678 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003676:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e035      	b.n	80036e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800368a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2200      	movs	r2, #0
 8003694:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f82b 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b2:	d103      	bne.n	80036bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e013      	b.n	80036e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036c0:	897b      	ldrh	r3, [r7, #10]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	6a3a      	ldr	r2, [r7, #32]
 80036d4:	4906      	ldr	r1, [pc, #24]	@ (80036f0 <I2C_RequestMemoryRead+0x1cc>)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f886 	bl	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	00010002 	.word	0x00010002

080036f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003704:	e048      	b.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d044      	beq.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fe fefb 	bl	8002508 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d139      	bne.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10d      	bne.n	800374a <I2C_WaitOnFlagUntilTimeout+0x56>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	e00c      	b.n	8003764 <I2C_WaitOnFlagUntilTimeout+0x70>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	43da      	mvns	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	429a      	cmp	r2, r3
 8003768:	d116      	bne.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e023      	b.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10d      	bne.n	80037be <I2C_WaitOnFlagUntilTimeout+0xca>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	43da      	mvns	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	e00c      	b.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d093      	beq.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f6:	e071      	b.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003806:	d123      	bne.n	8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003816:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f043 0204 	orr.w	r2, r3, #4
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e067      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d041      	beq.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe fe56 	bl	8002508 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d136      	bne.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10c      	bne.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e00b      	b.n	80038aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e021      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	0c1b      	lsrs	r3, r3, #16
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10c      	bne.n	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	43da      	mvns	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4013      	ands	r3, r2
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e00b      	b.n	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4013      	ands	r3, r2
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	f47f af6d 	bne.w	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003934:	e034      	b.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8e3 	bl	8003b02 <I2C_IsAcknowledgeFailed>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e034      	b.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d028      	beq.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe fddb 	bl	8002508 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11d      	bne.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d016      	beq.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e007      	b.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039aa:	2b80      	cmp	r3, #128	@ 0x80
 80039ac:	d1c3      	bne.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c4:	e034      	b.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f89b 	bl	8003b02 <I2C_IsAcknowledgeFailed>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e034      	b.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d028      	beq.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7fe fd93 	bl	8002508 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11d      	bne.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d016      	beq.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e007      	b.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d1c3      	bne.n	80039c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a54:	e049      	b.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d119      	bne.n	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0210 	mvn.w	r2, #16
 8003a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e030      	b.n	8003afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a98:	f7fe fd36 	bl	8002508 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d302      	bcc.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11d      	bne.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d016      	beq.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e007      	b.n	8003afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d1ae      	bne.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b18:	d11b      	bne.n	8003b52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e272      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8087 	beq.w	8003c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b80:	4b92      	ldr	r3, [pc, #584]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d112      	bne.n	8003bbe <HAL_RCC_OscConfig+0x5e>
 8003b98:	4b8c      	ldr	r3, [pc, #560]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba4:	d10b      	bne.n	8003bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba6:	4b89      	ldr	r3, [pc, #548]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x12c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d168      	bne.n	8003c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e24c      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x76>
 8003bc8:	4b80      	ldr	r3, [pc, #512]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7f      	ldr	r2, [pc, #508]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e02e      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x98>
 8003bde:	4b7b      	ldr	r3, [pc, #492]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7a      	ldr	r2, [pc, #488]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b78      	ldr	r3, [pc, #480]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a77      	ldr	r2, [pc, #476]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0xbc>
 8003c02:	4b72      	ldr	r3, [pc, #456]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a71      	ldr	r2, [pc, #452]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6e      	ldr	r2, [pc, #440]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6a      	ldr	r2, [pc, #424]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b68      	ldr	r3, [pc, #416]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a67      	ldr	r2, [pc, #412]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fc64 	bl	8002508 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fe fc60 	bl	8002508 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	@ 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e200      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b5d      	ldr	r3, [pc, #372]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xe4>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fc50 	bl	8002508 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fc4c 	bl	8002508 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	@ 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1ec      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b53      	ldr	r3, [pc, #332]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x10c>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ca6:	4b49      	ldr	r3, [pc, #292]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x18c>
 8003cb2:	4b46      	ldr	r3, [pc, #280]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b43      	ldr	r3, [pc, #268]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x176>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1c0      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4939      	ldr	r1, [pc, #228]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e03a      	b.n	8003d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b36      	ldr	r3, [pc, #216]	@ (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe fc05 	bl	8002508 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fe fc01 	bl	8002508 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1a1      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	4b2d      	ldr	r3, [pc, #180]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b2a      	ldr	r3, [pc, #168]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4927      	ldr	r1, [pc, #156]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b26      	ldr	r3, [pc, #152]	@ (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fbe4 	bl	8002508 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fe fbe0 	bl	8002508 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e180      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03a      	beq.n	8003de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d019      	beq.n	8003daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b17      	ldr	r3, [pc, #92]	@ (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fe fbc4 	bl	8002508 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fe fbc0 	bl	8002508 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e160      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003da2:	2001      	movs	r0, #1
 8003da4:	f000 face 	bl	8004344 <RCC_Delay>
 8003da8:	e01c      	b.n	8003de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003daa:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db0:	f7fe fbaa 	bl	8002508 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db6:	e00f      	b.n	8003dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fe fba6 	bl	8002508 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d908      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e146      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	42420000 	.word	0x42420000
 8003dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b92      	ldr	r3, [pc, #584]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e9      	bne.n	8003db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a6 	beq.w	8003f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b8b      	ldr	r3, [pc, #556]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	4b88      	ldr	r3, [pc, #544]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4a87      	ldr	r2, [pc, #540]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0c:	61d3      	str	r3, [r2, #28]
 8003e0e:	4b85      	ldr	r3, [pc, #532]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b82      	ldr	r3, [pc, #520]	@ (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fe fb67 	bl	8002508 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fe fb63 	bl	8002508 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	@ 0x64
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e103      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b75      	ldr	r3, [pc, #468]	@ (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x312>
 8003e64:	4b6f      	ldr	r3, [pc, #444]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4a6e      	ldr	r2, [pc, #440]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6213      	str	r3, [r2, #32]
 8003e70:	e02d      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x334>
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a69      	ldr	r2, [pc, #420]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	4b67      	ldr	r3, [pc, #412]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4a66      	ldr	r2, [pc, #408]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6213      	str	r3, [r2, #32]
 8003e92:	e01c      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d10c      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x356>
 8003e9c:	4b61      	ldr	r3, [pc, #388]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4a60      	ldr	r2, [pc, #384]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	f043 0304 	orr.w	r3, r3, #4
 8003ea6:	6213      	str	r3, [r2, #32]
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a5d      	ldr	r2, [pc, #372]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6213      	str	r3, [r2, #32]
 8003eb4:	e00b      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a5a      	ldr	r2, [pc, #360]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	4b58      	ldr	r3, [pc, #352]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a57      	ldr	r2, [pc, #348]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d015      	beq.n	8003f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fb17 	bl	8002508 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fe fb13 	bl	8002508 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0b1      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCC_OscConfig+0x37e>
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fe fb01 	bl	8002508 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fe fafd 	bl	8002508 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e09b      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	4b40      	ldr	r3, [pc, #256]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ee      	bne.n	8003f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f32:	4b3c      	ldr	r3, [pc, #240]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8087 	beq.w	8004056 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f48:	4b36      	ldr	r3, [pc, #216]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d061      	beq.n	8004018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d146      	bne.n	8003fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5c:	4b33      	ldr	r3, [pc, #204]	@ (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe fad1 	bl	8002508 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe facd 	bl	8002508 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e06d      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7c:	4b29      	ldr	r3, [pc, #164]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f90:	d108      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f92:	4b24      	ldr	r3, [pc, #144]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	4921      	ldr	r1, [pc, #132]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a19      	ldr	r1, [r3, #32]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	491b      	ldr	r1, [pc, #108]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fe faa1 	bl	8002508 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fe fa9d 	bl	8002508 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e03d      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fdc:	4b11      	ldr	r3, [pc, #68]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x46a>
 8003fe8:	e035      	b.n	8004056 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	4b10      	ldr	r3, [pc, #64]	@ (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fe fa8a 	bl	8002508 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fe fa86 	bl	8002508 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e026      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400a:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x498>
 8004016:	e01e      	b.n	8004056 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e019      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
 8004024:	40021000 	.word	0x40021000
 8004028:	40007000 	.word	0x40007000
 800402c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004030:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_RCC_OscConfig+0x500>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	429a      	cmp	r2, r3
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d001      	beq.n	8004056 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000

08004064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0d0      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b6a      	ldr	r3, [pc, #424]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d910      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b67      	ldr	r3, [pc, #412]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	4965      	ldr	r1, [pc, #404]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a58      	ldr	r2, [pc, #352]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a52      	ldr	r2, [pc, #328]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d040      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d115      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b41      	ldr	r3, [pc, #260]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e073      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3d      	ldr	r3, [pc, #244]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06b      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b39      	ldr	r3, [pc, #228]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4936      	ldr	r1, [pc, #216]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fe f9d8 	bl	8002508 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fe f9d4 	bl	8002508 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e053      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2d      	ldr	r3, [pc, #180]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b27      	ldr	r3, [pc, #156]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d210      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b24      	ldr	r3, [pc, #144]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	4922      	ldr	r1, [pc, #136]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041de:	4b12      	ldr	r3, [pc, #72]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f821 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <HAL_RCC_ClockConfig+0x1cc>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_ClockConfig+0x1d0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe f936 	bl	8002484 <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40022000 	.word	0x40022000
 8004228:	40021000 	.word	0x40021000
 800422c:	08008c28 	.word	0x08008c28
 8004230:	20000000 	.word	0x20000000
 8004234:	20000004 	.word	0x20000004

08004238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004252:	4b1e      	ldr	r3, [pc, #120]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d002      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x30>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d003      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x36>
 8004266:	e027      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004268:	4b19      	ldr	r3, [pc, #100]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800426a:	613b      	str	r3, [r7, #16]
      break;
 800426c:	e027      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0c9b      	lsrs	r3, r3, #18
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	4a17      	ldr	r2, [pc, #92]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
 800427a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d010      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004286:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0c5b      	lsrs	r3, r3, #17
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	4a11      	ldr	r2, [pc, #68]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004292:	5cd3      	ldrb	r3, [r2, r3]
 8004294:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0d      	ldr	r2, [pc, #52]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800429a:	fb03 f202 	mul.w	r2, r3, r2
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e004      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0c      	ldr	r2, [pc, #48]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	613b      	str	r3, [r7, #16]
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ba:	613b      	str	r3, [r7, #16]
      break;
 80042bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042be:	693b      	ldr	r3, [r7, #16]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	007a1200 	.word	0x007a1200
 80042d4:	08008c40 	.word	0x08008c40
 80042d8:	08008c50 	.word	0x08008c50
 80042dc:	003d0900 	.word	0x003d0900

080042e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b02      	ldr	r3, [pc, #8]	@ (80042f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	20000000 	.word	0x20000000

080042f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042f8:	f7ff fff2 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	@ (8004318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	08008c38 	.word	0x08008c38

0800431c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004320:	f7ff ffde 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	0adb      	lsrs	r3, r3, #11
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4903      	ldr	r1, [pc, #12]	@ (8004340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	08008c38 	.word	0x08008c38

08004344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800434c:	4b0a      	ldr	r3, [pc, #40]	@ (8004378 <RCC_Delay+0x34>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <RCC_Delay+0x38>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0a5b      	lsrs	r3, r3, #9
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004360:	bf00      	nop
  }
  while (Delay --);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	60fa      	str	r2, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f9      	bne.n	8004360 <RCC_Delay+0x1c>
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	20000000 	.word	0x20000000
 800437c:	10624dd3 	.word	0x10624dd3

08004380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e076      	b.n	8004480 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d108      	bne.n	80043ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043a2:	d009      	beq.n	80043b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	61da      	str	r2, [r3, #28]
 80043aa:	e005      	b.n	80043b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fe90 	bl	80020f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443c:	ea42 0103 	orr.w	r1, r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004444:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	0c1a      	lsrs	r2, r3, #16
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f002 0204 	and.w	r2, r2, #4
 800445e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800446e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004498:	f7fe f836 	bl	8002508 <HAL_GetTick>
 800449c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
 80044b0:	e12a      	b.n	8004708 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Transmit+0x36>
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e122      	b.n	8004708 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_SPI_Transmit+0x48>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e11b      	b.n	8004708 <HAL_SPI_Transmit+0x280>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2203      	movs	r2, #3
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451e:	d10f      	bne.n	8004540 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800452e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800453e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d007      	beq.n	800455e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800455c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004566:	d152      	bne.n	800460e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_SPI_Transmit+0xee>
 8004570:	8b7b      	ldrh	r3, [r7, #26]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d145      	bne.n	8004602 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800459a:	e032      	b.n	8004602 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d112      	bne.n	80045d0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	881a      	ldrh	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045ce:	e018      	b.n	8004602 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045d0:	f7fd ff9a 	bl	8002508 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d803      	bhi.n	80045e8 <HAL_SPI_Transmit+0x160>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d102      	bne.n	80045ee <HAL_SPI_Transmit+0x166>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e082      	b.n	8004708 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1c7      	bne.n	800459c <HAL_SPI_Transmit+0x114>
 800460c:	e053      	b.n	80046b6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_SPI_Transmit+0x194>
 8004616:	8b7b      	ldrh	r3, [r7, #26]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d147      	bne.n	80046ac <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004642:	e033      	b.n	80046ac <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d113      	bne.n	800467a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004678:	e018      	b.n	80046ac <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467a:	f7fd ff45 	bl	8002508 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d803      	bhi.n	8004692 <HAL_SPI_Transmit+0x20a>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d102      	bne.n	8004698 <HAL_SPI_Transmit+0x210>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e02d      	b.n	8004708 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1c6      	bne.n	8004644 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fa66 	bl	8004b8c <SPI_EndRxTxTransaction>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004706:	2300      	movs	r3, #0
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	@ 0x28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800471e:	2301      	movs	r3, #1
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004722:	f7fd fef1 	bl	8002508 <HAL_GetTick>
 8004726:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800472e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004736:	887b      	ldrh	r3, [r7, #2]
 8004738:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800473a:	7ffb      	ldrb	r3, [r7, #31]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d00c      	beq.n	800475a <HAL_SPI_TransmitReceive+0x4a>
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004746:	d106      	bne.n	8004756 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <HAL_SPI_TransmitReceive+0x46>
 8004750:	7ffb      	ldrb	r3, [r7, #31]
 8004752:	2b04      	cmp	r3, #4
 8004754:	d001      	beq.n	800475a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	e17f      	b.n	8004a5a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_SPI_TransmitReceive+0x5c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_SPI_TransmitReceive+0x5c>
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e174      	b.n	8004a5a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_SPI_TransmitReceive+0x6e>
 800477a:	2302      	movs	r3, #2
 800477c:	e16d      	b.n	8004a5a <HAL_SPI_TransmitReceive+0x34a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b04      	cmp	r3, #4
 8004790:	d003      	beq.n	800479a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2205      	movs	r2, #5
 8004796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	887a      	ldrh	r2, [r7, #2]
 80047aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	887a      	ldrh	r2, [r7, #2]
 80047c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047da:	2b40      	cmp	r3, #64	@ 0x40
 80047dc:	d007      	beq.n	80047ee <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f6:	d17e      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_SPI_TransmitReceive+0xf6>
 8004800:	8afb      	ldrh	r3, [r7, #22]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d16c      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	1c9a      	adds	r2, r3, #2
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800482a:	e059      	b.n	80048e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11b      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x162>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <HAL_SPI_TransmitReceive+0x162>
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	2b01      	cmp	r3, #1
 8004848:	d113      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	881a      	ldrh	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	1c9a      	adds	r2, r3, #2
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d119      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x1a4>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d014      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	b292      	uxth	r2, r2
 8004896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489c:	1c9a      	adds	r2, r3, #2
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048b0:	2301      	movs	r3, #1
 80048b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048b4:	f7fd fe28 	bl	8002508 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d80d      	bhi.n	80048e0 <HAL_SPI_TransmitReceive+0x1d0>
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d009      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e0bc      	b.n	8004a5a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1a0      	bne.n	800482c <HAL_SPI_TransmitReceive+0x11c>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d19b      	bne.n	800482c <HAL_SPI_TransmitReceive+0x11c>
 80048f4:	e082      	b.n	80049fc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_TransmitReceive+0x1f4>
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d171      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	7812      	ldrb	r2, [r2, #0]
 8004910:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492a:	e05d      	b.n	80049e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d11c      	bne.n	8004974 <HAL_SPI_TransmitReceive+0x264>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d017      	beq.n	8004974 <HAL_SPI_TransmitReceive+0x264>
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	2b01      	cmp	r3, #1
 8004948:	d114      	bne.n	8004974 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d119      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x2a6>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d014      	beq.n	80049b6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049b2:	2301      	movs	r3, #1
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049b6:	f7fd fda7 	bl	8002508 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d803      	bhi.n	80049ce <HAL_SPI_TransmitReceive+0x2be>
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d102      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x2c4>
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e038      	b.n	8004a5a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d19c      	bne.n	800492c <HAL_SPI_TransmitReceive+0x21c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d197      	bne.n	800492c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049fc:	6a3a      	ldr	r2, [r7, #32]
 80049fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f8c3 	bl	8004b8c <SPI_EndRxTxTransaction>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e01d      	b.n	8004a5a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a26:	2300      	movs	r3, #0
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3728      	adds	r7, #40	@ 0x28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a70:	b2db      	uxtb	r3, r3
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a8c:	f7fd fd3c 	bl	8002508 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	4413      	add	r3, r2
 8004a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a9c:	f7fd fd34 	bl	8002508 <HAL_GetTick>
 8004aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	@ (8004b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	015b      	lsls	r3, r3, #5
 8004aa8:	0d1b      	lsrs	r3, r3, #20
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab2:	e054      	b.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d050      	beq.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004abc:	f7fd fd24 	bl	8002508 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d902      	bls.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d13d      	bne.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aea:	d111      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af4:	d004      	beq.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afe:	d107      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b18:	d10f      	bne.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e017      	b.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d19b      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000000 	.word	0x20000000

08004b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff ff6a 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e013      	b.n	8004be6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2180      	movs	r1, #128	@ 0x80
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff ff57 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f043 0220 	orr.w	r2, r3, #32
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e000      	b.n	8004be6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e042      	b.n	8004c86 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fd fab9 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2224      	movs	r2, #36	@ 0x24
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f972 	bl	8004f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b08a      	sub	sp, #40	@ 0x28
 8004c92:	af02      	add	r7, sp, #8
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d175      	bne.n	8004d9a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_UART_Transmit+0x2c>
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e06e      	b.n	8004d9c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2221      	movs	r2, #33	@ 0x21
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ccc:	f7fd fc1c 	bl	8002508 <HAL_GetTick>
 8004cd0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	88fa      	ldrh	r2, [r7, #6]
 8004cd6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce6:	d108      	bne.n	8004cfa <HAL_UART_Transmit+0x6c>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e003      	b.n	8004d02 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d02:	e02e      	b.n	8004d62 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2180      	movs	r1, #128	@ 0x80
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f848 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e03a      	b.n	8004d9c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	3302      	adds	r3, #2
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e007      	b.n	8004d54 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	781a      	ldrb	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1cb      	bne.n	8004d04 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	2140      	movs	r1, #64	@ 0x40
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f814 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e006      	b.n	8004d9c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
  }
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db4:	e03b      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d037      	beq.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fd fba3 	bl	8002508 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	6a3a      	ldr	r2, [r7, #32]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e03a      	b.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d023      	beq.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b80      	cmp	r3, #128	@ 0x80
 8004dea:	d020      	beq.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b40      	cmp	r3, #64	@ 0x40
 8004df0:	d01d      	beq.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d116      	bne.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f81d 	bl	8004e56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2208      	movs	r2, #8
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e00f      	b.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	bf0c      	ite	eq
 8004e3e:	2301      	moveq	r3, #1
 8004e40:	2300      	movne	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d0b4      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b095      	sub	sp, #84	@ 0x54
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3314      	adds	r3, #20
 8004eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e5      	bne.n	8004e92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d119      	bne.n	8004f02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f023 0310 	bic.w	r3, r3, #16
 8004ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eee:	61ba      	str	r2, [r7, #24]
 8004ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6979      	ldr	r1, [r7, #20]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	613b      	str	r3, [r7, #16]
   return(result);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f10:	bf00      	nop
 8004f12:	3754      	adds	r7, #84	@ 0x54
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
	...

08004f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f56:	f023 030c 	bic.w	r3, r3, #12
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	430b      	orrs	r3, r1
 8004f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005030 <UART_SetConfig+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d103      	bne.n	8004f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f84:	f7ff f9ca 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	e002      	b.n	8004f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f8c:	f7ff f9b2 	bl	80042f4 <HAL_RCC_GetPCLK1Freq>
 8004f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009a      	lsls	r2, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	4a22      	ldr	r2, [pc, #136]	@ (8005034 <UART_SetConfig+0x118>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	0119      	lsls	r1, r3, #4
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	009a      	lsls	r2, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <UART_SetConfig+0x118>)
 8004fca:	fba3 0302 	umull	r0, r3, r3, r2
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	2064      	movs	r0, #100	@ 0x64
 8004fd2:	fb00 f303 	mul.w	r3, r0, r3
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	3332      	adds	r3, #50	@ 0x32
 8004fdc:	4a15      	ldr	r2, [pc, #84]	@ (8005034 <UART_SetConfig+0x118>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe8:	4419      	add	r1, r3
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009a      	lsls	r2, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <UART_SetConfig+0x118>)
 8005002:	fba3 0302 	umull	r0, r3, r3, r2
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2064      	movs	r0, #100	@ 0x64
 800500a:	fb00 f303 	mul.w	r3, r0, r3
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	3332      	adds	r3, #50	@ 0x32
 8005014:	4a07      	ldr	r2, [pc, #28]	@ (8005034 <UART_SetConfig+0x118>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	440a      	add	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40013800 	.word	0x40013800
 8005034:	51eb851f 	.word	0x51eb851f

08005038 <SX1278_SPIRead>:
 *  Created on: Oct 6, 2024
 *      Author: Phat
 */

#include "sx1278.hpp"
uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fac9 	bl	80055e4 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fae4 	bl	8005624 <SX1278_hw_SPIReadByte>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2101      	movs	r1, #1
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fa81 	bl	800556e <SX1278_hw_SetNSS>
	return tmp;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	70fb      	strb	r3, [r7, #3]
 8005082:	4613      	mov	r3, r2
 8005084:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fa6e 	bl	800556e <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800509c:	b2db      	uxtb	r3, r3
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 fa9f 	bl	80055e4 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	78ba      	ldrb	r2, [r7, #2]
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fa98 	bl	80055e4 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2101      	movs	r1, #1
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fa57 	bl	800556e <SX1278_hw_SetNSS>
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	607a      	str	r2, [r7, #4]
 80050d2:	461a      	mov	r2, r3
 80050d4:	460b      	mov	r3, r1
 80050d6:	72fb      	strb	r3, [r7, #11]
 80050d8:	4613      	mov	r3, r2
 80050da:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80050dc:	7abb      	ldrb	r3, [r7, #10]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d929      	bls.n	8005136 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fa40 	bl	800556e <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	7afb      	ldrb	r3, [r7, #11]
 80050f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f000 fa71 	bl	80055e4 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
 8005106:	e00b      	b.n	8005120 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	4619      	mov	r1, r3
 8005116:	f000 fa65 	bl	80055e4 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	3301      	adds	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
 8005120:	7dfa      	ldrb	r2, [r7, #23]
 8005122:	7abb      	ldrb	r3, [r7, #10]
 8005124:	429a      	cmp	r2, r3
 8005126:	d3ef      	bcc.n	8005108 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2101      	movs	r1, #1
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fa1d 	bl	800556e <SX1278_hw_SetNSS>
 8005134:	e000      	b.n	8005138 <SX1278_SPIBurstWrite+0x70>
		return;
 8005136:	bf00      	nop
	}
}
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f90d 	bl	8005368 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800514e:	200f      	movs	r0, #15
 8005150:	f000 fa8e 	bl	8005670 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f917 	bl	8005388 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005160:	f04f 0000 	mov.w	r0, #0
 8005164:	f04f 0100 	mov.w	r1, #0
 8005168:	04d9      	lsls	r1, r3, #19
 800516a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800516e:	04d0      	lsls	r0, r2, #19
 8005170:	4a6f      	ldr	r2, [pc, #444]	@ (8005330 <SX1278_config+0x1f0>)
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	f7fb fee5 	bl	8000f44 <__aeabi_uldivmod>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8005182:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	0c02      	lsrs	r2, r0, #16
 8005190:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005194:	0c0b      	lsrs	r3, r1, #16
 8005196:	b2d3      	uxtb	r3, r2
 8005198:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800519a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	0a02      	lsrs	r2, r0, #8
 80051a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80051ac:	0a0b      	lsrs	r3, r1, #8
 80051ae:	b2d3      	uxtb	r3, r2
 80051b0:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80051b2:	7c3b      	ldrb	r3, [r7, #16]
 80051b4:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80051b6:	f107 020c 	add.w	r2, r7, #12
 80051ba:	2303      	movs	r3, #3
 80051bc:	2106      	movs	r1, #6
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff82 	bl	80050c8 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80051c4:	2234      	movs	r2, #52	@ 0x34
 80051c6:	2139      	movs	r1, #57	@ 0x39
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff54 	bl	8005076 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	7c1b      	ldrb	r3, [r3, #16]
 80051d2:	461a      	mov	r2, r3
 80051d4:	4b57      	ldr	r3, [pc, #348]	@ (8005334 <SX1278_config+0x1f4>)
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	461a      	mov	r2, r3
 80051da:	2109      	movs	r1, #9
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff4a 	bl	8005076 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80051e2:	220b      	movs	r2, #11
 80051e4:	210b      	movs	r1, #11
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ff45 	bl	8005076 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80051ec:	2223      	movs	r2, #35	@ 0x23
 80051ee:	210c      	movs	r1, #12
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ff40 	bl	8005076 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	7c5b      	ldrb	r3, [r3, #17]
 80051fa:	461a      	mov	r2, r3
 80051fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005338 <SX1278_config+0x1f8>)
 80051fe:	5c9b      	ldrb	r3, [r3, r2]
 8005200:	2b06      	cmp	r3, #6
 8005202:	d147      	bne.n	8005294 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	7c9b      	ldrb	r3, [r3, #18]
 8005208:	461a      	mov	r2, r3
 800520a:	4b4c      	ldr	r3, [pc, #304]	@ (800533c <SX1278_config+0x1fc>)
 800520c:	5c9b      	ldrb	r3, [r3, r2]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	7cdb      	ldrb	r3, [r3, #19]
 8005216:	4619      	mov	r1, r3
 8005218:	4b49      	ldr	r3, [pc, #292]	@ (8005340 <SX1278_config+0x200>)
 800521a:	5c5b      	ldrb	r3, [r3, r1]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	b2db      	uxtb	r3, r3
 8005220:	4413      	add	r3, r2
 8005222:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8005224:	3301      	adds	r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	211d      	movs	r1, #29
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ff22 	bl	8005076 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7c5b      	ldrb	r3, [r3, #17]
 8005236:	461a      	mov	r2, r3
 8005238:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <SX1278_config+0x1f8>)
 800523a:	5c9b      	ldrb	r3, [r3, r2]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	7d1b      	ldrb	r3, [r3, #20]
 8005244:	4619      	mov	r1, r3
 8005246:	4b3f      	ldr	r3, [pc, #252]	@ (8005344 <SX1278_config+0x204>)
 8005248:	5c5b      	ldrb	r3, [r3, r1]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4413      	add	r3, r2
 8005250:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8005252:	3303      	adds	r3, #3
 8005254:	b2db      	uxtb	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	211e      	movs	r1, #30
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ff0b 	bl	8005076 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8005260:	2131      	movs	r1, #49	@ 0x31
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff fee8 	bl	8005038 <SX1278_SPIRead>
 8005268:	4603      	mov	r3, r0
 800526a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	f043 0305 	orr.w	r3, r3, #5
 800527a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	461a      	mov	r2, r3
 8005280:	2131      	movs	r1, #49	@ 0x31
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fef7 	bl	8005076 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8005288:	220c      	movs	r2, #12
 800528a:	2137      	movs	r1, #55	@ 0x37
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fef2 	bl	8005076 <SX1278_SPIWrite>
 8005292:	e029      	b.n	80052e8 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7c9b      	ldrb	r3, [r3, #18]
 8005298:	461a      	mov	r2, r3
 800529a:	4b28      	ldr	r3, [pc, #160]	@ (800533c <SX1278_config+0x1fc>)
 800529c:	5c9b      	ldrb	r3, [r3, r2]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	7cdb      	ldrb	r3, [r3, #19]
 80052a6:	4619      	mov	r1, r3
 80052a8:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <SX1278_config+0x200>)
 80052aa:	5c5b      	ldrb	r3, [r3, r1]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80052b0:	4413      	add	r3, r2
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	211d      	movs	r1, #29
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fedc 	bl	8005076 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7c5b      	ldrb	r3, [r3, #17]
 80052c2:	461a      	mov	r2, r3
 80052c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005338 <SX1278_config+0x1f8>)
 80052c6:	5c9b      	ldrb	r3, [r3, r2]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7d1b      	ldrb	r3, [r3, #20]
 80052d0:	4619      	mov	r1, r3
 80052d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005344 <SX1278_config+0x204>)
 80052d4:	5c5b      	ldrb	r3, [r3, r1]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80052da:	4413      	add	r3, r2
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	211e      	movs	r1, #30
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fec7 	bl	8005076 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80052e8:	2204      	movs	r2, #4
 80052ea:	2126      	movs	r1, #38	@ 0x26
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff fec2 	bl	8005076 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80052f2:	2208      	movs	r2, #8
 80052f4:	211f      	movs	r1, #31
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff febd 	bl	8005076 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80052fc:	2200      	movs	r2, #0
 80052fe:	2120      	movs	r1, #32
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff feb8 	bl	8005076 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8005306:	2208      	movs	r2, #8
 8005308:	2121      	movs	r1, #33	@ 0x21
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff feb3 	bl	8005076 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8005310:	2201      	movs	r2, #1
 8005312:	2141      	movs	r1, #65	@ 0x41
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff feae 	bl	8005076 <SX1278_SPIWrite>
	module->readBytes = 0;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f810 	bl	8005348 <SX1278_standby>
}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	01e84800 	.word	0x01e84800
 8005334:	08008c54 	.word	0x08008c54
 8005338:	08008c58 	.word	0x08008c58
 800533c:	08008c60 	.word	0x08008c60
 8005340:	08008c6c 	.word	0x08008c6c
 8005344:	08008c70 	.word	0x08008c70

08005348 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8005350:	2209      	movs	r2, #9
 8005352:	2101      	movs	r1, #1
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fe8e 	bl	8005076 <SX1278_SPIWrite>
	module->status = STANDBY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	759a      	strb	r2, [r3, #22]
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8005370:	2208      	movs	r2, #8
 8005372:	2101      	movs	r1, #1
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fe7e 	bl	8005076 <SX1278_SPIWrite>
	module->status = SLEEP;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	759a      	strb	r2, [r3, #22]
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8005390:	2288      	movs	r2, #136	@ 0x88
 8005392:	2101      	movs	r1, #1
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fe6e 	bl	8005076 <SX1278_SPIWrite>
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80053aa:	22ff      	movs	r2, #255	@ 0xff
 80053ac:	2112      	movs	r1, #18
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fe61 	bl	8005076 <SX1278_SPIWrite>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	460b      	mov	r3, r1
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	7afa      	ldrb	r2, [r7, #11]
 80053ce:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff feb5 	bl	8005140 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80053d6:	2287      	movs	r2, #135	@ 0x87
 80053d8:	214d      	movs	r1, #77	@ 0x4d
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff fe4b 	bl	8005076 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80053e0:	2200      	movs	r2, #0
 80053e2:	2124      	movs	r1, #36	@ 0x24
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7ff fe46 	bl	8005076 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80053ea:	2241      	movs	r2, #65	@ 0x41
 80053ec:	2140      	movs	r1, #64	@ 0x40
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fe41 	bl	8005076 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7ff ffd4 	bl	80053a2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80053fa:	22f7      	movs	r2, #247	@ 0xf7
 80053fc:	2111      	movs	r1, #17
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff fe39 	bl	8005076 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8005404:	7afb      	ldrb	r3, [r7, #11]
 8005406:	461a      	mov	r2, r3
 8005408:	2122      	movs	r1, #34	@ 0x22
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fe33 	bl	8005076 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8005410:	210e      	movs	r1, #14
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff fe10 	bl	8005038 <SX1278_SPIRead>
 8005418:	4603      	mov	r3, r0
 800541a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	461a      	mov	r2, r3
 8005420:	210d      	movs	r1, #13
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff fe27 	bl	8005076 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8005428:	2122      	movs	r1, #34	@ 0x22
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff fe04 	bl	8005038 <SX1278_SPIRead>
 8005430:	4603      	mov	r3, r0
 8005432:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8005434:	7dba      	ldrb	r2, [r7, #22]
 8005436:	7afb      	ldrb	r3, [r7, #11]
 8005438:	429a      	cmp	r2, r3
 800543a:	d104      	bne.n	8005446 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2202      	movs	r2, #2
 8005440:	759a      	strb	r2, [r3, #22]
			return 1;
 8005442:	2301      	movs	r3, #1
 8005444:	e00e      	b.n	8005464 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3b01      	subs	r3, #1
 800544a:	607b      	str	r3, [r7, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1ea      	bne.n	8005428 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f8a0 	bl	800559c <SX1278_hw_Reset>
			SX1278_config(module);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff fe6f 	bl	8005140 <SX1278_config>
			return 0;
 8005462:	2300      	movs	r3, #0
		}
	}
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	2100      	movs	r1, #0
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff fe20 	bl	80050c8 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8005488:	228b      	movs	r2, #139	@ 0x8b
 800548a:	2101      	movs	r1, #1
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7ff fdf2 	bl	8005076 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f8f5 	bl	8005686 <SX1278_hw_GetDIO0>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00b      	beq.n	80054ba <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80054a2:	2112      	movs	r1, #18
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fdc7 	bl	8005038 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff ff79 	bl	80053a2 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff ff49 	bl	8005348 <SX1278_standby>
			return 1;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e013      	b.n	80054e2 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f866 	bl	800559c <SX1278_hw_Reset>
			SX1278_config(module);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff fe35 	bl	8005140 <SX1278_config>
			return 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e003      	b.n	80054e2 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80054da:	2001      	movs	r0, #1
 80054dc:	f000 f8c8 	bl	8005670 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80054e0:	e7d7      	b.n	8005492 <SX1278_LoRaTxPacket+0x26>
	}
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f822 	bl	8005544 <SX1278_hw_init>
	module->frequency = frequency;
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005506:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	7e3a      	ldrb	r2, [r7, #24]
 800550e:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	7f3a      	ldrb	r2, [r7, #28]
 8005514:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f897 2020 	ldrb.w	r2, [r7, #32]
 800551c:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005524:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800552c:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005534:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff fe02 	bl	8005140 <SX1278_config>
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <SX1278_hw_init>:
 */

#include "sx1278_hw.hpp"
#include <string.h>

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800554c:	2101      	movs	r1, #1
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f80d 	bl	800556e <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6858      	ldr	r0, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	2201      	movs	r2, #1
 8005560:	4619      	mov	r1, r3
 8005562:	f7fd fa7e 	bl	8002a62 <HAL_GPIO_WritePin>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6958      	ldr	r0, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	b299      	uxth	r1, r3
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	bf0c      	ite	eq
 8005588:	2301      	moveq	r3, #1
 800558a:	2300      	movne	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	f7fd fa67 	bl	8002a62 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80055a4:	2101      	movs	r1, #1
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff ffe1 	bl	800556e <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6858      	ldr	r0, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2200      	movs	r2, #0
 80055b8:	4619      	mov	r1, r3
 80055ba:	f7fd fa52 	bl	8002a62 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80055be:	2001      	movs	r0, #1
 80055c0:	f000 f856 	bl	8005670 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6858      	ldr	r0, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2201      	movs	r2, #1
 80055d0:	4619      	mov	r1, r3
 80055d2:	f7fd fa46 	bl	8002a62 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80055d6:	2064      	movs	r0, #100	@ 0x64
 80055d8:	f000 f84a 	bl	8005670 <SX1278_hw_DelayMs>
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80055f0:	2100      	movs	r1, #0
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ffbb 	bl	800556e <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6998      	ldr	r0, [r3, #24]
 80055fc:	1cf9      	adds	r1, r7, #3
 80055fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005602:	2201      	movs	r2, #1
 8005604:	f7fe ff40 	bl	8004488 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8005608:	bf00      	nop
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fa27 	bl	8004a62 <HAL_SPI_GetState>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	d1f7      	bne.n	800560a <SX1278_hw_SPICommand+0x26>
		;
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af02      	add	r7, sp, #8
 800562a:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8005630:	2300      	movs	r3, #0
 8005632:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8005634:	2100      	movs	r1, #0
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff ff99 	bl	800556e <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6998      	ldr	r0, [r3, #24]
 8005640:	f107 020e 	add.w	r2, r7, #14
 8005644:	f107 010f 	add.w	r1, r7, #15
 8005648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	2301      	movs	r3, #1
 8005650:	f7ff f85e 	bl	8004710 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8005654:	bf00      	nop
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fa01 	bl	8004a62 <HAL_SPI_GetState>
 8005660:	4603      	mov	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	d1f7      	bne.n	8005656 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8005666:	7bbb      	ldrb	r3, [r7, #14]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7fc ff4f 	bl	800251c <HAL_Delay>
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	b29b      	uxth	r3, r3
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f7fd f9ca 	bl	8002a34 <HAL_GPIO_ReadPin>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <__cvt>:
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ba:	461d      	mov	r5, r3
 80056bc:	bfbb      	ittet	lt
 80056be:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80056c2:	461d      	movlt	r5, r3
 80056c4:	2300      	movge	r3, #0
 80056c6:	232d      	movlt	r3, #45	@ 0x2d
 80056c8:	b088      	sub	sp, #32
 80056ca:	4614      	mov	r4, r2
 80056cc:	bfb8      	it	lt
 80056ce:	4614      	movlt	r4, r2
 80056d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80056d4:	7013      	strb	r3, [r2, #0]
 80056d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80056dc:	f023 0820 	bic.w	r8, r3, #32
 80056e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056e4:	d005      	beq.n	80056f2 <__cvt+0x3e>
 80056e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056ea:	d100      	bne.n	80056ee <__cvt+0x3a>
 80056ec:	3601      	adds	r6, #1
 80056ee:	2302      	movs	r3, #2
 80056f0:	e000      	b.n	80056f4 <__cvt+0x40>
 80056f2:	2303      	movs	r3, #3
 80056f4:	aa07      	add	r2, sp, #28
 80056f6:	9204      	str	r2, [sp, #16]
 80056f8:	aa06      	add	r2, sp, #24
 80056fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056fe:	e9cd 3600 	strd	r3, r6, [sp]
 8005702:	4622      	mov	r2, r4
 8005704:	462b      	mov	r3, r5
 8005706:	f000 ff7f 	bl	8006608 <_dtoa_r>
 800570a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800570e:	4607      	mov	r7, r0
 8005710:	d119      	bne.n	8005746 <__cvt+0x92>
 8005712:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005714:	07db      	lsls	r3, r3, #31
 8005716:	d50e      	bpl.n	8005736 <__cvt+0x82>
 8005718:	eb00 0906 	add.w	r9, r0, r6
 800571c:	2200      	movs	r2, #0
 800571e:	2300      	movs	r3, #0
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fb f940 	bl	80009a8 <__aeabi_dcmpeq>
 8005728:	b108      	cbz	r0, 800572e <__cvt+0x7a>
 800572a:	f8cd 901c 	str.w	r9, [sp, #28]
 800572e:	2230      	movs	r2, #48	@ 0x30
 8005730:	9b07      	ldr	r3, [sp, #28]
 8005732:	454b      	cmp	r3, r9
 8005734:	d31e      	bcc.n	8005774 <__cvt+0xc0>
 8005736:	4638      	mov	r0, r7
 8005738:	9b07      	ldr	r3, [sp, #28]
 800573a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800573c:	1bdb      	subs	r3, r3, r7
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	b008      	add	sp, #32
 8005742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005746:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800574a:	eb00 0906 	add.w	r9, r0, r6
 800574e:	d1e5      	bne.n	800571c <__cvt+0x68>
 8005750:	7803      	ldrb	r3, [r0, #0]
 8005752:	2b30      	cmp	r3, #48	@ 0x30
 8005754:	d10a      	bne.n	800576c <__cvt+0xb8>
 8005756:	2200      	movs	r2, #0
 8005758:	2300      	movs	r3, #0
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fb f923 	bl	80009a8 <__aeabi_dcmpeq>
 8005762:	b918      	cbnz	r0, 800576c <__cvt+0xb8>
 8005764:	f1c6 0601 	rsb	r6, r6, #1
 8005768:	f8ca 6000 	str.w	r6, [sl]
 800576c:	f8da 3000 	ldr.w	r3, [sl]
 8005770:	4499      	add	r9, r3
 8005772:	e7d3      	b.n	800571c <__cvt+0x68>
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	9107      	str	r1, [sp, #28]
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e7d9      	b.n	8005730 <__cvt+0x7c>

0800577c <__exponent>:
 800577c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800577e:	2900      	cmp	r1, #0
 8005780:	bfb6      	itet	lt
 8005782:	232d      	movlt	r3, #45	@ 0x2d
 8005784:	232b      	movge	r3, #43	@ 0x2b
 8005786:	4249      	neglt	r1, r1
 8005788:	2909      	cmp	r1, #9
 800578a:	7002      	strb	r2, [r0, #0]
 800578c:	7043      	strb	r3, [r0, #1]
 800578e:	dd29      	ble.n	80057e4 <__exponent+0x68>
 8005790:	f10d 0307 	add.w	r3, sp, #7
 8005794:	461d      	mov	r5, r3
 8005796:	270a      	movs	r7, #10
 8005798:	fbb1 f6f7 	udiv	r6, r1, r7
 800579c:	461a      	mov	r2, r3
 800579e:	fb07 1416 	mls	r4, r7, r6, r1
 80057a2:	3430      	adds	r4, #48	@ 0x30
 80057a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057a8:	460c      	mov	r4, r1
 80057aa:	2c63      	cmp	r4, #99	@ 0x63
 80057ac:	4631      	mov	r1, r6
 80057ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80057b2:	dcf1      	bgt.n	8005798 <__exponent+0x1c>
 80057b4:	3130      	adds	r1, #48	@ 0x30
 80057b6:	1e94      	subs	r4, r2, #2
 80057b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057bc:	4623      	mov	r3, r4
 80057be:	1c41      	adds	r1, r0, #1
 80057c0:	42ab      	cmp	r3, r5
 80057c2:	d30a      	bcc.n	80057da <__exponent+0x5e>
 80057c4:	f10d 0309 	add.w	r3, sp, #9
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	42ac      	cmp	r4, r5
 80057cc:	bf88      	it	hi
 80057ce:	2300      	movhi	r3, #0
 80057d0:	3302      	adds	r3, #2
 80057d2:	4403      	add	r3, r0
 80057d4:	1a18      	subs	r0, r3, r0
 80057d6:	b003      	add	sp, #12
 80057d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057e2:	e7ed      	b.n	80057c0 <__exponent+0x44>
 80057e4:	2330      	movs	r3, #48	@ 0x30
 80057e6:	3130      	adds	r1, #48	@ 0x30
 80057e8:	7083      	strb	r3, [r0, #2]
 80057ea:	70c1      	strb	r1, [r0, #3]
 80057ec:	1d03      	adds	r3, r0, #4
 80057ee:	e7f1      	b.n	80057d4 <__exponent+0x58>

080057f0 <_printf_float>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	b091      	sub	sp, #68	@ 0x44
 80057f6:	460c      	mov	r4, r1
 80057f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80057fc:	4616      	mov	r6, r2
 80057fe:	461f      	mov	r7, r3
 8005800:	4605      	mov	r5, r0
 8005802:	f000 fde5 	bl	80063d0 <_localeconv_r>
 8005806:	6803      	ldr	r3, [r0, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	9308      	str	r3, [sp, #32]
 800580c:	f7fa fca0 	bl	8000150 <strlen>
 8005810:	2300      	movs	r3, #0
 8005812:	930e      	str	r3, [sp, #56]	@ 0x38
 8005814:	f8d8 3000 	ldr.w	r3, [r8]
 8005818:	9009      	str	r0, [sp, #36]	@ 0x24
 800581a:	3307      	adds	r3, #7
 800581c:	f023 0307 	bic.w	r3, r3, #7
 8005820:	f103 0208 	add.w	r2, r3, #8
 8005824:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005828:	f8d4 b000 	ldr.w	fp, [r4]
 800582c:	f8c8 2000 	str.w	r2, [r8]
 8005830:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005834:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800583a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800583e:	f04f 32ff 	mov.w	r2, #4294967295
 8005842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005846:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800584a:	4b9c      	ldr	r3, [pc, #624]	@ (8005abc <_printf_float+0x2cc>)
 800584c:	f7fb f8de 	bl	8000a0c <__aeabi_dcmpun>
 8005850:	bb70      	cbnz	r0, 80058b0 <_printf_float+0xc0>
 8005852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	4b98      	ldr	r3, [pc, #608]	@ (8005abc <_printf_float+0x2cc>)
 800585c:	f7fb f8b8 	bl	80009d0 <__aeabi_dcmple>
 8005860:	bb30      	cbnz	r0, 80058b0 <_printf_float+0xc0>
 8005862:	2200      	movs	r2, #0
 8005864:	2300      	movs	r3, #0
 8005866:	4640      	mov	r0, r8
 8005868:	4649      	mov	r1, r9
 800586a:	f7fb f8a7 	bl	80009bc <__aeabi_dcmplt>
 800586e:	b110      	cbz	r0, 8005876 <_printf_float+0x86>
 8005870:	232d      	movs	r3, #45	@ 0x2d
 8005872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005876:	4a92      	ldr	r2, [pc, #584]	@ (8005ac0 <_printf_float+0x2d0>)
 8005878:	4b92      	ldr	r3, [pc, #584]	@ (8005ac4 <_printf_float+0x2d4>)
 800587a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800587e:	bf94      	ite	ls
 8005880:	4690      	movls	r8, r2
 8005882:	4698      	movhi	r8, r3
 8005884:	2303      	movs	r3, #3
 8005886:	f04f 0900 	mov.w	r9, #0
 800588a:	6123      	str	r3, [r4, #16]
 800588c:	f02b 0304 	bic.w	r3, fp, #4
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	4633      	mov	r3, r6
 8005894:	4621      	mov	r1, r4
 8005896:	4628      	mov	r0, r5
 8005898:	9700      	str	r7, [sp, #0]
 800589a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800589c:	f000 f9d4 	bl	8005c48 <_printf_common>
 80058a0:	3001      	adds	r0, #1
 80058a2:	f040 8090 	bne.w	80059c6 <_printf_float+0x1d6>
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295
 80058aa:	b011      	add	sp, #68	@ 0x44
 80058ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b0:	4642      	mov	r2, r8
 80058b2:	464b      	mov	r3, r9
 80058b4:	4640      	mov	r0, r8
 80058b6:	4649      	mov	r1, r9
 80058b8:	f7fb f8a8 	bl	8000a0c <__aeabi_dcmpun>
 80058bc:	b148      	cbz	r0, 80058d2 <_printf_float+0xe2>
 80058be:	464b      	mov	r3, r9
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bfb8      	it	lt
 80058c4:	232d      	movlt	r3, #45	@ 0x2d
 80058c6:	4a80      	ldr	r2, [pc, #512]	@ (8005ac8 <_printf_float+0x2d8>)
 80058c8:	bfb8      	it	lt
 80058ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058ce:	4b7f      	ldr	r3, [pc, #508]	@ (8005acc <_printf_float+0x2dc>)
 80058d0:	e7d3      	b.n	800587a <_printf_float+0x8a>
 80058d2:	6863      	ldr	r3, [r4, #4]
 80058d4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	d13f      	bne.n	800595c <_printf_float+0x16c>
 80058dc:	2306      	movs	r3, #6
 80058de:	6063      	str	r3, [r4, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	9206      	str	r2, [sp, #24]
 80058ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80058ec:	e9cd a204 	strd	sl, r2, [sp, #16]
 80058f0:	aa0d      	add	r2, sp, #52	@ 0x34
 80058f2:	9203      	str	r2, [sp, #12]
 80058f4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80058f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80058fc:	6863      	ldr	r3, [r4, #4]
 80058fe:	4642      	mov	r2, r8
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	4628      	mov	r0, r5
 8005904:	464b      	mov	r3, r9
 8005906:	910a      	str	r1, [sp, #40]	@ 0x28
 8005908:	f7ff fed4 	bl	80056b4 <__cvt>
 800590c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800590e:	4680      	mov	r8, r0
 8005910:	2947      	cmp	r1, #71	@ 0x47
 8005912:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005914:	d128      	bne.n	8005968 <_printf_float+0x178>
 8005916:	1cc8      	adds	r0, r1, #3
 8005918:	db02      	blt.n	8005920 <_printf_float+0x130>
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	4299      	cmp	r1, r3
 800591e:	dd40      	ble.n	80059a2 <_printf_float+0x1b2>
 8005920:	f1aa 0a02 	sub.w	sl, sl, #2
 8005924:	fa5f fa8a 	uxtb.w	sl, sl
 8005928:	4652      	mov	r2, sl
 800592a:	3901      	subs	r1, #1
 800592c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005930:	910d      	str	r1, [sp, #52]	@ 0x34
 8005932:	f7ff ff23 	bl	800577c <__exponent>
 8005936:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005938:	4681      	mov	r9, r0
 800593a:	1813      	adds	r3, r2, r0
 800593c:	2a01      	cmp	r2, #1
 800593e:	6123      	str	r3, [r4, #16]
 8005940:	dc02      	bgt.n	8005948 <_printf_float+0x158>
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	07d2      	lsls	r2, r2, #31
 8005946:	d501      	bpl.n	800594c <_printf_float+0x15c>
 8005948:	3301      	adds	r3, #1
 800594a:	6123      	str	r3, [r4, #16]
 800594c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005950:	2b00      	cmp	r3, #0
 8005952:	d09e      	beq.n	8005892 <_printf_float+0xa2>
 8005954:	232d      	movs	r3, #45	@ 0x2d
 8005956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800595a:	e79a      	b.n	8005892 <_printf_float+0xa2>
 800595c:	2947      	cmp	r1, #71	@ 0x47
 800595e:	d1bf      	bne.n	80058e0 <_printf_float+0xf0>
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1bd      	bne.n	80058e0 <_printf_float+0xf0>
 8005964:	2301      	movs	r3, #1
 8005966:	e7ba      	b.n	80058de <_printf_float+0xee>
 8005968:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800596c:	d9dc      	bls.n	8005928 <_printf_float+0x138>
 800596e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005972:	d118      	bne.n	80059a6 <_printf_float+0x1b6>
 8005974:	2900      	cmp	r1, #0
 8005976:	6863      	ldr	r3, [r4, #4]
 8005978:	dd0b      	ble.n	8005992 <_printf_float+0x1a2>
 800597a:	6121      	str	r1, [r4, #16]
 800597c:	b913      	cbnz	r3, 8005984 <_printf_float+0x194>
 800597e:	6822      	ldr	r2, [r4, #0]
 8005980:	07d0      	lsls	r0, r2, #31
 8005982:	d502      	bpl.n	800598a <_printf_float+0x19a>
 8005984:	3301      	adds	r3, #1
 8005986:	440b      	add	r3, r1
 8005988:	6123      	str	r3, [r4, #16]
 800598a:	f04f 0900 	mov.w	r9, #0
 800598e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005990:	e7dc      	b.n	800594c <_printf_float+0x15c>
 8005992:	b913      	cbnz	r3, 800599a <_printf_float+0x1aa>
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	07d2      	lsls	r2, r2, #31
 8005998:	d501      	bpl.n	800599e <_printf_float+0x1ae>
 800599a:	3302      	adds	r3, #2
 800599c:	e7f4      	b.n	8005988 <_printf_float+0x198>
 800599e:	2301      	movs	r3, #1
 80059a0:	e7f2      	b.n	8005988 <_printf_float+0x198>
 80059a2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059a8:	4299      	cmp	r1, r3
 80059aa:	db05      	blt.n	80059b8 <_printf_float+0x1c8>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	6121      	str	r1, [r4, #16]
 80059b0:	07d8      	lsls	r0, r3, #31
 80059b2:	d5ea      	bpl.n	800598a <_printf_float+0x19a>
 80059b4:	1c4b      	adds	r3, r1, #1
 80059b6:	e7e7      	b.n	8005988 <_printf_float+0x198>
 80059b8:	2900      	cmp	r1, #0
 80059ba:	bfcc      	ite	gt
 80059bc:	2201      	movgt	r2, #1
 80059be:	f1c1 0202 	rsble	r2, r1, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	e7e0      	b.n	8005988 <_printf_float+0x198>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	055a      	lsls	r2, r3, #21
 80059ca:	d407      	bmi.n	80059dc <_printf_float+0x1ec>
 80059cc:	6923      	ldr	r3, [r4, #16]
 80059ce:	4642      	mov	r2, r8
 80059d0:	4631      	mov	r1, r6
 80059d2:	4628      	mov	r0, r5
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	d12b      	bne.n	8005a32 <_printf_float+0x242>
 80059da:	e764      	b.n	80058a6 <_printf_float+0xb6>
 80059dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059e0:	f240 80dc 	bls.w	8005b9c <_printf_float+0x3ac>
 80059e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059e8:	2200      	movs	r2, #0
 80059ea:	2300      	movs	r3, #0
 80059ec:	f7fa ffdc 	bl	80009a8 <__aeabi_dcmpeq>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d033      	beq.n	8005a5c <_printf_float+0x26c>
 80059f4:	2301      	movs	r3, #1
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	4a35      	ldr	r2, [pc, #212]	@ (8005ad0 <_printf_float+0x2e0>)
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f43f af51 	beq.w	80058a6 <_printf_float+0xb6>
 8005a04:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005a08:	4543      	cmp	r3, r8
 8005a0a:	db02      	blt.n	8005a12 <_printf_float+0x222>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	07d8      	lsls	r0, r3, #31
 8005a10:	d50f      	bpl.n	8005a32 <_printf_float+0x242>
 8005a12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	f43f af42 	beq.w	80058a6 <_printf_float+0xb6>
 8005a22:	f04f 0900 	mov.w	r9, #0
 8005a26:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a2a:	f104 0a1a 	add.w	sl, r4, #26
 8005a2e:	45c8      	cmp	r8, r9
 8005a30:	dc09      	bgt.n	8005a46 <_printf_float+0x256>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	079b      	lsls	r3, r3, #30
 8005a36:	f100 8102 	bmi.w	8005c3e <_printf_float+0x44e>
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a3e:	4298      	cmp	r0, r3
 8005a40:	bfb8      	it	lt
 8005a42:	4618      	movlt	r0, r3
 8005a44:	e731      	b.n	80058aa <_printf_float+0xba>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4652      	mov	r2, sl
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	47b8      	blx	r7
 8005a50:	3001      	adds	r0, #1
 8005a52:	f43f af28 	beq.w	80058a6 <_printf_float+0xb6>
 8005a56:	f109 0901 	add.w	r9, r9, #1
 8005a5a:	e7e8      	b.n	8005a2e <_printf_float+0x23e>
 8005a5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	dc38      	bgt.n	8005ad4 <_printf_float+0x2e4>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	4a19      	ldr	r2, [pc, #100]	@ (8005ad0 <_printf_float+0x2e0>)
 8005a6a:	47b8      	blx	r7
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f43f af1a 	beq.w	80058a6 <_printf_float+0xb6>
 8005a72:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005a76:	ea59 0303 	orrs.w	r3, r9, r3
 8005a7a:	d102      	bne.n	8005a82 <_printf_float+0x292>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	07d9      	lsls	r1, r3, #31
 8005a80:	d5d7      	bpl.n	8005a32 <_printf_float+0x242>
 8005a82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b8      	blx	r7
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	f43f af0a 	beq.w	80058a6 <_printf_float+0xb6>
 8005a92:	f04f 0a00 	mov.w	sl, #0
 8005a96:	f104 0b1a 	add.w	fp, r4, #26
 8005a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a9c:	425b      	negs	r3, r3
 8005a9e:	4553      	cmp	r3, sl
 8005aa0:	dc01      	bgt.n	8005aa6 <_printf_float+0x2b6>
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	e793      	b.n	80059ce <_printf_float+0x1de>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	465a      	mov	r2, fp
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f aef8 	beq.w	80058a6 <_printf_float+0xb6>
 8005ab6:	f10a 0a01 	add.w	sl, sl, #1
 8005aba:	e7ee      	b.n	8005a9a <_printf_float+0x2aa>
 8005abc:	7fefffff 	.word	0x7fefffff
 8005ac0:	08008c72 	.word	0x08008c72
 8005ac4:	08008c76 	.word	0x08008c76
 8005ac8:	08008c7a 	.word	0x08008c7a
 8005acc:	08008c7e 	.word	0x08008c7e
 8005ad0:	08008c82 	.word	0x08008c82
 8005ad4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ad6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ada:	4553      	cmp	r3, sl
 8005adc:	bfa8      	it	ge
 8005ade:	4653      	movge	r3, sl
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	dc36      	bgt.n	8005b54 <_printf_float+0x364>
 8005ae6:	f04f 0b00 	mov.w	fp, #0
 8005aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aee:	f104 021a 	add.w	r2, r4, #26
 8005af2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005af4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005af6:	eba3 0309 	sub.w	r3, r3, r9
 8005afa:	455b      	cmp	r3, fp
 8005afc:	dc31      	bgt.n	8005b62 <_printf_float+0x372>
 8005afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b00:	459a      	cmp	sl, r3
 8005b02:	dc3a      	bgt.n	8005b7a <_printf_float+0x38a>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	07da      	lsls	r2, r3, #31
 8005b08:	d437      	bmi.n	8005b7a <_printf_float+0x38a>
 8005b0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b0c:	ebaa 0903 	sub.w	r9, sl, r3
 8005b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b12:	ebaa 0303 	sub.w	r3, sl, r3
 8005b16:	4599      	cmp	r9, r3
 8005b18:	bfa8      	it	ge
 8005b1a:	4699      	movge	r9, r3
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	dc33      	bgt.n	8005b8a <_printf_float+0x39a>
 8005b22:	f04f 0800 	mov.w	r8, #0
 8005b26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b2a:	f104 0b1a 	add.w	fp, r4, #26
 8005b2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b30:	ebaa 0303 	sub.w	r3, sl, r3
 8005b34:	eba3 0309 	sub.w	r3, r3, r9
 8005b38:	4543      	cmp	r3, r8
 8005b3a:	f77f af7a 	ble.w	8005a32 <_printf_float+0x242>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	465a      	mov	r2, fp
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f43f aeac 	beq.w	80058a6 <_printf_float+0xb6>
 8005b4e:	f108 0801 	add.w	r8, r8, #1
 8005b52:	e7ec      	b.n	8005b2e <_printf_float+0x33e>
 8005b54:	4642      	mov	r2, r8
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1c2      	bne.n	8005ae6 <_printf_float+0x2f6>
 8005b60:	e6a1      	b.n	80058a6 <_printf_float+0xb6>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	920a      	str	r2, [sp, #40]	@ 0x28
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f ae9a 	beq.w	80058a6 <_printf_float+0xb6>
 8005b72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b74:	f10b 0b01 	add.w	fp, fp, #1
 8005b78:	e7bb      	b.n	8005af2 <_printf_float+0x302>
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	d1c0      	bne.n	8005b0a <_printf_float+0x31a>
 8005b88:	e68d      	b.n	80058a6 <_printf_float+0xb6>
 8005b8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	4442      	add	r2, r8
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d1c3      	bne.n	8005b22 <_printf_float+0x332>
 8005b9a:	e684      	b.n	80058a6 <_printf_float+0xb6>
 8005b9c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ba0:	f1ba 0f01 	cmp.w	sl, #1
 8005ba4:	dc01      	bgt.n	8005baa <_printf_float+0x3ba>
 8005ba6:	07db      	lsls	r3, r3, #31
 8005ba8:	d536      	bpl.n	8005c18 <_printf_float+0x428>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4642      	mov	r2, r8
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae76 	beq.w	80058a6 <_printf_float+0xb6>
 8005bba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b8      	blx	r7
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f43f ae6e 	beq.w	80058a6 <_printf_float+0xb6>
 8005bca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd6:	f7fa fee7 	bl	80009a8 <__aeabi_dcmpeq>
 8005bda:	b9c0      	cbnz	r0, 8005c0e <_printf_float+0x41e>
 8005bdc:	4653      	mov	r3, sl
 8005bde:	f108 0201 	add.w	r2, r8, #1
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	d10c      	bne.n	8005c06 <_printf_float+0x416>
 8005bec:	e65b      	b.n	80058a6 <_printf_float+0xb6>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	465a      	mov	r2, fp
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f ae54 	beq.w	80058a6 <_printf_float+0xb6>
 8005bfe:	f108 0801 	add.w	r8, r8, #1
 8005c02:	45d0      	cmp	r8, sl
 8005c04:	dbf3      	blt.n	8005bee <_printf_float+0x3fe>
 8005c06:	464b      	mov	r3, r9
 8005c08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c0c:	e6e0      	b.n	80059d0 <_printf_float+0x1e0>
 8005c0e:	f04f 0800 	mov.w	r8, #0
 8005c12:	f104 0b1a 	add.w	fp, r4, #26
 8005c16:	e7f4      	b.n	8005c02 <_printf_float+0x412>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	e7e1      	b.n	8005be2 <_printf_float+0x3f2>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	464a      	mov	r2, r9
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae3c 	beq.w	80058a6 <_printf_float+0xb6>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	dcf0      	bgt.n	8005c1e <_printf_float+0x42e>
 8005c3c:	e6fd      	b.n	8005a3a <_printf_float+0x24a>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	f104 0919 	add.w	r9, r4, #25
 8005c46:	e7f4      	b.n	8005c32 <_printf_float+0x442>

08005c48 <_printf_common>:
 8005c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	4698      	mov	r8, r3
 8005c50:	688a      	ldr	r2, [r1, #8]
 8005c52:	690b      	ldr	r3, [r1, #16]
 8005c54:	4607      	mov	r7, r0
 8005c56:	4293      	cmp	r3, r2
 8005c58:	bfb8      	it	lt
 8005c5a:	4613      	movlt	r3, r2
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c62:	460c      	mov	r4, r1
 8005c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c68:	b10a      	cbz	r2, 8005c6e <_printf_common+0x26>
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	0699      	lsls	r1, r3, #26
 8005c72:	bf42      	ittt	mi
 8005c74:	6833      	ldrmi	r3, [r6, #0]
 8005c76:	3302      	addmi	r3, #2
 8005c78:	6033      	strmi	r3, [r6, #0]
 8005c7a:	6825      	ldr	r5, [r4, #0]
 8005c7c:	f015 0506 	ands.w	r5, r5, #6
 8005c80:	d106      	bne.n	8005c90 <_printf_common+0x48>
 8005c82:	f104 0a19 	add.w	sl, r4, #25
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	6832      	ldr	r2, [r6, #0]
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dc2b      	bgt.n	8005ce8 <_printf_common+0xa0>
 8005c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	3b00      	subs	r3, #0
 8005c98:	bf18      	it	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	0692      	lsls	r2, r2, #26
 8005c9e:	d430      	bmi.n	8005d02 <_printf_common+0xba>
 8005ca0:	4641      	mov	r1, r8
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ca8:	47c8      	blx	r9
 8005caa:	3001      	adds	r0, #1
 8005cac:	d023      	beq.n	8005cf6 <_printf_common+0xae>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	6922      	ldr	r2, [r4, #16]
 8005cb2:	f003 0306 	and.w	r3, r3, #6
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	bf14      	ite	ne
 8005cba:	2500      	movne	r5, #0
 8005cbc:	6833      	ldreq	r3, [r6, #0]
 8005cbe:	f04f 0600 	mov.w	r6, #0
 8005cc2:	bf08      	it	eq
 8005cc4:	68e5      	ldreq	r5, [r4, #12]
 8005cc6:	f104 041a 	add.w	r4, r4, #26
 8005cca:	bf08      	it	eq
 8005ccc:	1aed      	subeq	r5, r5, r3
 8005cce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005cd2:	bf08      	it	eq
 8005cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	bfc4      	itt	gt
 8005cdc:	1a9b      	subgt	r3, r3, r2
 8005cde:	18ed      	addgt	r5, r5, r3
 8005ce0:	42b5      	cmp	r5, r6
 8005ce2:	d11a      	bne.n	8005d1a <_printf_common+0xd2>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	e008      	b.n	8005cfa <_printf_common+0xb2>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	4652      	mov	r2, sl
 8005cec:	4641      	mov	r1, r8
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c8      	blx	r9
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d103      	bne.n	8005cfe <_printf_common+0xb6>
 8005cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	3501      	adds	r5, #1
 8005d00:	e7c1      	b.n	8005c86 <_printf_common+0x3e>
 8005d02:	2030      	movs	r0, #48	@ 0x30
 8005d04:	18e1      	adds	r1, r4, r3
 8005d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d10:	4422      	add	r2, r4
 8005d12:	3302      	adds	r3, #2
 8005d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d18:	e7c2      	b.n	8005ca0 <_printf_common+0x58>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	4641      	mov	r1, r8
 8005d20:	4638      	mov	r0, r7
 8005d22:	47c8      	blx	r9
 8005d24:	3001      	adds	r0, #1
 8005d26:	d0e6      	beq.n	8005cf6 <_printf_common+0xae>
 8005d28:	3601      	adds	r6, #1
 8005d2a:	e7d9      	b.n	8005ce0 <_printf_common+0x98>

08005d2c <_printf_i>:
 8005d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	7e0f      	ldrb	r7, [r1, #24]
 8005d32:	4691      	mov	r9, r2
 8005d34:	2f78      	cmp	r7, #120	@ 0x78
 8005d36:	4680      	mov	r8, r0
 8005d38:	460c      	mov	r4, r1
 8005d3a:	469a      	mov	sl, r3
 8005d3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d42:	d807      	bhi.n	8005d54 <_printf_i+0x28>
 8005d44:	2f62      	cmp	r7, #98	@ 0x62
 8005d46:	d80a      	bhi.n	8005d5e <_printf_i+0x32>
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	f000 80d3 	beq.w	8005ef4 <_printf_i+0x1c8>
 8005d4e:	2f58      	cmp	r7, #88	@ 0x58
 8005d50:	f000 80ba 	beq.w	8005ec8 <_printf_i+0x19c>
 8005d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d5c:	e03a      	b.n	8005dd4 <_printf_i+0xa8>
 8005d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d62:	2b15      	cmp	r3, #21
 8005d64:	d8f6      	bhi.n	8005d54 <_printf_i+0x28>
 8005d66:	a101      	add	r1, pc, #4	@ (adr r1, 8005d6c <_printf_i+0x40>)
 8005d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005dd9 	.word	0x08005dd9
 8005d74:	08005d55 	.word	0x08005d55
 8005d78:	08005d55 	.word	0x08005d55
 8005d7c:	08005d55 	.word	0x08005d55
 8005d80:	08005d55 	.word	0x08005d55
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005d55 	.word	0x08005d55
 8005d8c:	08005d55 	.word	0x08005d55
 8005d90:	08005d55 	.word	0x08005d55
 8005d94:	08005d55 	.word	0x08005d55
 8005d98:	08005edb 	.word	0x08005edb
 8005d9c:	08005e03 	.word	0x08005e03
 8005da0:	08005e95 	.word	0x08005e95
 8005da4:	08005d55 	.word	0x08005d55
 8005da8:	08005d55 	.word	0x08005d55
 8005dac:	08005efd 	.word	0x08005efd
 8005db0:	08005d55 	.word	0x08005d55
 8005db4:	08005e03 	.word	0x08005e03
 8005db8:	08005d55 	.word	0x08005d55
 8005dbc:	08005d55 	.word	0x08005d55
 8005dc0:	08005e9d 	.word	0x08005e9d
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	1d1a      	adds	r2, r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6032      	str	r2, [r6, #0]
 8005dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e09e      	b.n	8005f16 <_printf_i+0x1ea>
 8005dd8:	6833      	ldr	r3, [r6, #0]
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	1d19      	adds	r1, r3, #4
 8005dde:	6031      	str	r1, [r6, #0]
 8005de0:	0606      	lsls	r6, r0, #24
 8005de2:	d501      	bpl.n	8005de8 <_printf_i+0xbc>
 8005de4:	681d      	ldr	r5, [r3, #0]
 8005de6:	e003      	b.n	8005df0 <_printf_i+0xc4>
 8005de8:	0645      	lsls	r5, r0, #25
 8005dea:	d5fb      	bpl.n	8005de4 <_printf_i+0xb8>
 8005dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005df0:	2d00      	cmp	r5, #0
 8005df2:	da03      	bge.n	8005dfc <_printf_i+0xd0>
 8005df4:	232d      	movs	r3, #45	@ 0x2d
 8005df6:	426d      	negs	r5, r5
 8005df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dfc:	230a      	movs	r3, #10
 8005dfe:	4859      	ldr	r0, [pc, #356]	@ (8005f64 <_printf_i+0x238>)
 8005e00:	e011      	b.n	8005e26 <_printf_i+0xfa>
 8005e02:	6821      	ldr	r1, [r4, #0]
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	0608      	lsls	r0, r1, #24
 8005e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e0c:	d402      	bmi.n	8005e14 <_printf_i+0xe8>
 8005e0e:	0649      	lsls	r1, r1, #25
 8005e10:	bf48      	it	mi
 8005e12:	b2ad      	uxthmi	r5, r5
 8005e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e16:	6033      	str	r3, [r6, #0]
 8005e18:	bf14      	ite	ne
 8005e1a:	230a      	movne	r3, #10
 8005e1c:	2308      	moveq	r3, #8
 8005e1e:	4851      	ldr	r0, [pc, #324]	@ (8005f64 <_printf_i+0x238>)
 8005e20:	2100      	movs	r1, #0
 8005e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e26:	6866      	ldr	r6, [r4, #4]
 8005e28:	2e00      	cmp	r6, #0
 8005e2a:	bfa8      	it	ge
 8005e2c:	6821      	ldrge	r1, [r4, #0]
 8005e2e:	60a6      	str	r6, [r4, #8]
 8005e30:	bfa4      	itt	ge
 8005e32:	f021 0104 	bicge.w	r1, r1, #4
 8005e36:	6021      	strge	r1, [r4, #0]
 8005e38:	b90d      	cbnz	r5, 8005e3e <_printf_i+0x112>
 8005e3a:	2e00      	cmp	r6, #0
 8005e3c:	d04b      	beq.n	8005ed6 <_printf_i+0x1aa>
 8005e3e:	4616      	mov	r6, r2
 8005e40:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e44:	fb03 5711 	mls	r7, r3, r1, r5
 8005e48:	5dc7      	ldrb	r7, [r0, r7]
 8005e4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e4e:	462f      	mov	r7, r5
 8005e50:	42bb      	cmp	r3, r7
 8005e52:	460d      	mov	r5, r1
 8005e54:	d9f4      	bls.n	8005e40 <_printf_i+0x114>
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d10b      	bne.n	8005e72 <_printf_i+0x146>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	07df      	lsls	r7, r3, #31
 8005e5e:	d508      	bpl.n	8005e72 <_printf_i+0x146>
 8005e60:	6923      	ldr	r3, [r4, #16]
 8005e62:	6861      	ldr	r1, [r4, #4]
 8005e64:	4299      	cmp	r1, r3
 8005e66:	bfde      	ittt	le
 8005e68:	2330      	movle	r3, #48	@ 0x30
 8005e6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e72:	1b92      	subs	r2, r2, r6
 8005e74:	6122      	str	r2, [r4, #16]
 8005e76:	464b      	mov	r3, r9
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	f8cd a000 	str.w	sl, [sp]
 8005e80:	aa03      	add	r2, sp, #12
 8005e82:	f7ff fee1 	bl	8005c48 <_printf_common>
 8005e86:	3001      	adds	r0, #1
 8005e88:	d14a      	bne.n	8005f20 <_printf_i+0x1f4>
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8e:	b004      	add	sp, #16
 8005e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	f043 0320 	orr.w	r3, r3, #32
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	2778      	movs	r7, #120	@ 0x78
 8005e9e:	4832      	ldr	r0, [pc, #200]	@ (8005f68 <_printf_i+0x23c>)
 8005ea0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	061f      	lsls	r7, r3, #24
 8005eaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eae:	d402      	bmi.n	8005eb6 <_printf_i+0x18a>
 8005eb0:	065f      	lsls	r7, r3, #25
 8005eb2:	bf48      	it	mi
 8005eb4:	b2ad      	uxthmi	r5, r5
 8005eb6:	6031      	str	r1, [r6, #0]
 8005eb8:	07d9      	lsls	r1, r3, #31
 8005eba:	bf44      	itt	mi
 8005ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8005ec0:	6023      	strmi	r3, [r4, #0]
 8005ec2:	b11d      	cbz	r5, 8005ecc <_printf_i+0x1a0>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	e7ab      	b.n	8005e20 <_printf_i+0xf4>
 8005ec8:	4826      	ldr	r0, [pc, #152]	@ (8005f64 <_printf_i+0x238>)
 8005eca:	e7e9      	b.n	8005ea0 <_printf_i+0x174>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	f023 0320 	bic.w	r3, r3, #32
 8005ed2:	6023      	str	r3, [r4, #0]
 8005ed4:	e7f6      	b.n	8005ec4 <_printf_i+0x198>
 8005ed6:	4616      	mov	r6, r2
 8005ed8:	e7bd      	b.n	8005e56 <_printf_i+0x12a>
 8005eda:	6833      	ldr	r3, [r6, #0]
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	1d18      	adds	r0, r3, #4
 8005ee0:	6961      	ldr	r1, [r4, #20]
 8005ee2:	6030      	str	r0, [r6, #0]
 8005ee4:	062e      	lsls	r6, r5, #24
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	d501      	bpl.n	8005eee <_printf_i+0x1c2>
 8005eea:	6019      	str	r1, [r3, #0]
 8005eec:	e002      	b.n	8005ef4 <_printf_i+0x1c8>
 8005eee:	0668      	lsls	r0, r5, #25
 8005ef0:	d5fb      	bpl.n	8005eea <_printf_i+0x1be>
 8005ef2:	8019      	strh	r1, [r3, #0]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4616      	mov	r6, r2
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	e7bc      	b.n	8005e76 <_printf_i+0x14a>
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	2100      	movs	r1, #0
 8005f00:	1d1a      	adds	r2, r3, #4
 8005f02:	6032      	str	r2, [r6, #0]
 8005f04:	681e      	ldr	r6, [r3, #0]
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f000 fad8 	bl	80064be <memchr>
 8005f0e:	b108      	cbz	r0, 8005f14 <_printf_i+0x1e8>
 8005f10:	1b80      	subs	r0, r0, r6
 8005f12:	6060      	str	r0, [r4, #4]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f1e:	e7aa      	b.n	8005e76 <_printf_i+0x14a>
 8005f20:	4632      	mov	r2, r6
 8005f22:	4649      	mov	r1, r9
 8005f24:	4640      	mov	r0, r8
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	47d0      	blx	sl
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d0ad      	beq.n	8005e8a <_printf_i+0x15e>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	079b      	lsls	r3, r3, #30
 8005f32:	d413      	bmi.n	8005f5c <_printf_i+0x230>
 8005f34:	68e0      	ldr	r0, [r4, #12]
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	4298      	cmp	r0, r3
 8005f3a:	bfb8      	it	lt
 8005f3c:	4618      	movlt	r0, r3
 8005f3e:	e7a6      	b.n	8005e8e <_printf_i+0x162>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4632      	mov	r2, r6
 8005f44:	4649      	mov	r1, r9
 8005f46:	4640      	mov	r0, r8
 8005f48:	47d0      	blx	sl
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d09d      	beq.n	8005e8a <_printf_i+0x15e>
 8005f4e:	3501      	adds	r5, #1
 8005f50:	68e3      	ldr	r3, [r4, #12]
 8005f52:	9903      	ldr	r1, [sp, #12]
 8005f54:	1a5b      	subs	r3, r3, r1
 8005f56:	42ab      	cmp	r3, r5
 8005f58:	dcf2      	bgt.n	8005f40 <_printf_i+0x214>
 8005f5a:	e7eb      	b.n	8005f34 <_printf_i+0x208>
 8005f5c:	2500      	movs	r5, #0
 8005f5e:	f104 0619 	add.w	r6, r4, #25
 8005f62:	e7f5      	b.n	8005f50 <_printf_i+0x224>
 8005f64:	08008c84 	.word	0x08008c84
 8005f68:	08008c95 	.word	0x08008c95

08005f6c <std>:
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	4604      	mov	r4, r0
 8005f72:	e9c0 3300 	strd	r3, r3, [r0]
 8005f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f7a:	6083      	str	r3, [r0, #8]
 8005f7c:	8181      	strh	r1, [r0, #12]
 8005f7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f80:	81c2      	strh	r2, [r0, #14]
 8005f82:	6183      	str	r3, [r0, #24]
 8005f84:	4619      	mov	r1, r3
 8005f86:	2208      	movs	r2, #8
 8005f88:	305c      	adds	r0, #92	@ 0x5c
 8005f8a:	f000 fa19 	bl	80063c0 <memset>
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <std+0x58>)
 8005f90:	6224      	str	r4, [r4, #32]
 8005f92:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f94:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <std+0x5c>)
 8005f96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f98:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <std+0x60>)
 8005f9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd0 <std+0x64>)
 8005f9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <std+0x68>)
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	d006      	beq.n	8005fb4 <std+0x48>
 8005fa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005faa:	4294      	cmp	r4, r2
 8005fac:	d002      	beq.n	8005fb4 <std+0x48>
 8005fae:	33d0      	adds	r3, #208	@ 0xd0
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d105      	bne.n	8005fc0 <std+0x54>
 8005fb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fbc:	f000 ba7c 	b.w	80064b8 <__retarget_lock_init_recursive>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08006211 	.word	0x08006211
 8005fc8:	08006233 	.word	0x08006233
 8005fcc:	0800626b 	.word	0x0800626b
 8005fd0:	0800628f 	.word	0x0800628f
 8005fd4:	200006dc 	.word	0x200006dc

08005fd8 <stdio_exit_handler>:
 8005fd8:	4a02      	ldr	r2, [pc, #8]	@ (8005fe4 <stdio_exit_handler+0xc>)
 8005fda:	4903      	ldr	r1, [pc, #12]	@ (8005fe8 <stdio_exit_handler+0x10>)
 8005fdc:	4803      	ldr	r0, [pc, #12]	@ (8005fec <stdio_exit_handler+0x14>)
 8005fde:	f000 b869 	b.w	80060b4 <_fwalk_sglue>
 8005fe2:	bf00      	nop
 8005fe4:	2000000c 	.word	0x2000000c
 8005fe8:	080080c5 	.word	0x080080c5
 8005fec:	2000001c 	.word	0x2000001c

08005ff0 <cleanup_stdio>:
 8005ff0:	6841      	ldr	r1, [r0, #4]
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <cleanup_stdio+0x34>)
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	d001      	beq.n	8006000 <cleanup_stdio+0x10>
 8005ffc:	f002 f862 	bl	80080c4 <_fflush_r>
 8006000:	68a1      	ldr	r1, [r4, #8]
 8006002:	4b09      	ldr	r3, [pc, #36]	@ (8006028 <cleanup_stdio+0x38>)
 8006004:	4299      	cmp	r1, r3
 8006006:	d002      	beq.n	800600e <cleanup_stdio+0x1e>
 8006008:	4620      	mov	r0, r4
 800600a:	f002 f85b 	bl	80080c4 <_fflush_r>
 800600e:	68e1      	ldr	r1, [r4, #12]
 8006010:	4b06      	ldr	r3, [pc, #24]	@ (800602c <cleanup_stdio+0x3c>)
 8006012:	4299      	cmp	r1, r3
 8006014:	d004      	beq.n	8006020 <cleanup_stdio+0x30>
 8006016:	4620      	mov	r0, r4
 8006018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601c:	f002 b852 	b.w	80080c4 <_fflush_r>
 8006020:	bd10      	pop	{r4, pc}
 8006022:	bf00      	nop
 8006024:	200006dc 	.word	0x200006dc
 8006028:	20000744 	.word	0x20000744
 800602c:	200007ac 	.word	0x200007ac

08006030 <global_stdio_init.part.0>:
 8006030:	b510      	push	{r4, lr}
 8006032:	4b0b      	ldr	r3, [pc, #44]	@ (8006060 <global_stdio_init.part.0+0x30>)
 8006034:	4c0b      	ldr	r4, [pc, #44]	@ (8006064 <global_stdio_init.part.0+0x34>)
 8006036:	4a0c      	ldr	r2, [pc, #48]	@ (8006068 <global_stdio_init.part.0+0x38>)
 8006038:	4620      	mov	r0, r4
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	2104      	movs	r1, #4
 800603e:	2200      	movs	r2, #0
 8006040:	f7ff ff94 	bl	8005f6c <std>
 8006044:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006048:	2201      	movs	r2, #1
 800604a:	2109      	movs	r1, #9
 800604c:	f7ff ff8e 	bl	8005f6c <std>
 8006050:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006054:	2202      	movs	r2, #2
 8006056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605a:	2112      	movs	r1, #18
 800605c:	f7ff bf86 	b.w	8005f6c <std>
 8006060:	20000814 	.word	0x20000814
 8006064:	200006dc 	.word	0x200006dc
 8006068:	08005fd9 	.word	0x08005fd9

0800606c <__sfp_lock_acquire>:
 800606c:	4801      	ldr	r0, [pc, #4]	@ (8006074 <__sfp_lock_acquire+0x8>)
 800606e:	f000 ba24 	b.w	80064ba <__retarget_lock_acquire_recursive>
 8006072:	bf00      	nop
 8006074:	2000081d 	.word	0x2000081d

08006078 <__sfp_lock_release>:
 8006078:	4801      	ldr	r0, [pc, #4]	@ (8006080 <__sfp_lock_release+0x8>)
 800607a:	f000 ba1f 	b.w	80064bc <__retarget_lock_release_recursive>
 800607e:	bf00      	nop
 8006080:	2000081d 	.word	0x2000081d

08006084 <__sinit>:
 8006084:	b510      	push	{r4, lr}
 8006086:	4604      	mov	r4, r0
 8006088:	f7ff fff0 	bl	800606c <__sfp_lock_acquire>
 800608c:	6a23      	ldr	r3, [r4, #32]
 800608e:	b11b      	cbz	r3, 8006098 <__sinit+0x14>
 8006090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006094:	f7ff bff0 	b.w	8006078 <__sfp_lock_release>
 8006098:	4b04      	ldr	r3, [pc, #16]	@ (80060ac <__sinit+0x28>)
 800609a:	6223      	str	r3, [r4, #32]
 800609c:	4b04      	ldr	r3, [pc, #16]	@ (80060b0 <__sinit+0x2c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f5      	bne.n	8006090 <__sinit+0xc>
 80060a4:	f7ff ffc4 	bl	8006030 <global_stdio_init.part.0>
 80060a8:	e7f2      	b.n	8006090 <__sinit+0xc>
 80060aa:	bf00      	nop
 80060ac:	08005ff1 	.word	0x08005ff1
 80060b0:	20000814 	.word	0x20000814

080060b4 <_fwalk_sglue>:
 80060b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b8:	4607      	mov	r7, r0
 80060ba:	4688      	mov	r8, r1
 80060bc:	4614      	mov	r4, r2
 80060be:	2600      	movs	r6, #0
 80060c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060c4:	f1b9 0901 	subs.w	r9, r9, #1
 80060c8:	d505      	bpl.n	80060d6 <_fwalk_sglue+0x22>
 80060ca:	6824      	ldr	r4, [r4, #0]
 80060cc:	2c00      	cmp	r4, #0
 80060ce:	d1f7      	bne.n	80060c0 <_fwalk_sglue+0xc>
 80060d0:	4630      	mov	r0, r6
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d907      	bls.n	80060ec <_fwalk_sglue+0x38>
 80060dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060e0:	3301      	adds	r3, #1
 80060e2:	d003      	beq.n	80060ec <_fwalk_sglue+0x38>
 80060e4:	4629      	mov	r1, r5
 80060e6:	4638      	mov	r0, r7
 80060e8:	47c0      	blx	r8
 80060ea:	4306      	orrs	r6, r0
 80060ec:	3568      	adds	r5, #104	@ 0x68
 80060ee:	e7e9      	b.n	80060c4 <_fwalk_sglue+0x10>

080060f0 <iprintf>:
 80060f0:	b40f      	push	{r0, r1, r2, r3}
 80060f2:	b507      	push	{r0, r1, r2, lr}
 80060f4:	4906      	ldr	r1, [pc, #24]	@ (8006110 <iprintf+0x20>)
 80060f6:	ab04      	add	r3, sp, #16
 80060f8:	6808      	ldr	r0, [r1, #0]
 80060fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80060fe:	6881      	ldr	r1, [r0, #8]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	f001 fe47 	bl	8007d94 <_vfiprintf_r>
 8006106:	b003      	add	sp, #12
 8006108:	f85d eb04 	ldr.w	lr, [sp], #4
 800610c:	b004      	add	sp, #16
 800610e:	4770      	bx	lr
 8006110:	20000018 	.word	0x20000018

08006114 <_puts_r>:
 8006114:	6a03      	ldr	r3, [r0, #32]
 8006116:	b570      	push	{r4, r5, r6, lr}
 8006118:	4605      	mov	r5, r0
 800611a:	460e      	mov	r6, r1
 800611c:	6884      	ldr	r4, [r0, #8]
 800611e:	b90b      	cbnz	r3, 8006124 <_puts_r+0x10>
 8006120:	f7ff ffb0 	bl	8006084 <__sinit>
 8006124:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006126:	07db      	lsls	r3, r3, #31
 8006128:	d405      	bmi.n	8006136 <_puts_r+0x22>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	0598      	lsls	r0, r3, #22
 800612e:	d402      	bmi.n	8006136 <_puts_r+0x22>
 8006130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006132:	f000 f9c2 	bl	80064ba <__retarget_lock_acquire_recursive>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	0719      	lsls	r1, r3, #28
 800613a:	d502      	bpl.n	8006142 <_puts_r+0x2e>
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d135      	bne.n	80061ae <_puts_r+0x9a>
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 f8e5 	bl	8006314 <__swsetup_r>
 800614a:	b380      	cbz	r0, 80061ae <_puts_r+0x9a>
 800614c:	f04f 35ff 	mov.w	r5, #4294967295
 8006150:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006152:	07da      	lsls	r2, r3, #31
 8006154:	d405      	bmi.n	8006162 <_puts_r+0x4e>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	059b      	lsls	r3, r3, #22
 800615a:	d402      	bmi.n	8006162 <_puts_r+0x4e>
 800615c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800615e:	f000 f9ad 	bl	80064bc <__retarget_lock_release_recursive>
 8006162:	4628      	mov	r0, r5
 8006164:	bd70      	pop	{r4, r5, r6, pc}
 8006166:	2b00      	cmp	r3, #0
 8006168:	da04      	bge.n	8006174 <_puts_r+0x60>
 800616a:	69a2      	ldr	r2, [r4, #24]
 800616c:	429a      	cmp	r2, r3
 800616e:	dc17      	bgt.n	80061a0 <_puts_r+0x8c>
 8006170:	290a      	cmp	r1, #10
 8006172:	d015      	beq.n	80061a0 <_puts_r+0x8c>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	6022      	str	r2, [r4, #0]
 800617a:	7019      	strb	r1, [r3, #0]
 800617c:	68a3      	ldr	r3, [r4, #8]
 800617e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006182:	3b01      	subs	r3, #1
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	2900      	cmp	r1, #0
 8006188:	d1ed      	bne.n	8006166 <_puts_r+0x52>
 800618a:	2b00      	cmp	r3, #0
 800618c:	da11      	bge.n	80061b2 <_puts_r+0x9e>
 800618e:	4622      	mov	r2, r4
 8006190:	210a      	movs	r1, #10
 8006192:	4628      	mov	r0, r5
 8006194:	f000 f87f 	bl	8006296 <__swbuf_r>
 8006198:	3001      	adds	r0, #1
 800619a:	d0d7      	beq.n	800614c <_puts_r+0x38>
 800619c:	250a      	movs	r5, #10
 800619e:	e7d7      	b.n	8006150 <_puts_r+0x3c>
 80061a0:	4622      	mov	r2, r4
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 f877 	bl	8006296 <__swbuf_r>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d1e7      	bne.n	800617c <_puts_r+0x68>
 80061ac:	e7ce      	b.n	800614c <_puts_r+0x38>
 80061ae:	3e01      	subs	r6, #1
 80061b0:	e7e4      	b.n	800617c <_puts_r+0x68>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	6022      	str	r2, [r4, #0]
 80061b8:	220a      	movs	r2, #10
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e7ee      	b.n	800619c <_puts_r+0x88>
	...

080061c0 <puts>:
 80061c0:	4b02      	ldr	r3, [pc, #8]	@ (80061cc <puts+0xc>)
 80061c2:	4601      	mov	r1, r0
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	f7ff bfa5 	b.w	8006114 <_puts_r>
 80061ca:	bf00      	nop
 80061cc:	20000018 	.word	0x20000018

080061d0 <siprintf>:
 80061d0:	b40e      	push	{r1, r2, r3}
 80061d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061d6:	b500      	push	{lr}
 80061d8:	b09c      	sub	sp, #112	@ 0x70
 80061da:	ab1d      	add	r3, sp, #116	@ 0x74
 80061dc:	9002      	str	r0, [sp, #8]
 80061de:	9006      	str	r0, [sp, #24]
 80061e0:	9107      	str	r1, [sp, #28]
 80061e2:	9104      	str	r1, [sp, #16]
 80061e4:	4808      	ldr	r0, [pc, #32]	@ (8006208 <siprintf+0x38>)
 80061e6:	4909      	ldr	r1, [pc, #36]	@ (800620c <siprintf+0x3c>)
 80061e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ec:	9105      	str	r1, [sp, #20]
 80061ee:	6800      	ldr	r0, [r0, #0]
 80061f0:	a902      	add	r1, sp, #8
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	f001 fcaa 	bl	8007b4c <_svfiprintf_r>
 80061f8:	2200      	movs	r2, #0
 80061fa:	9b02      	ldr	r3, [sp, #8]
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	b01c      	add	sp, #112	@ 0x70
 8006200:	f85d eb04 	ldr.w	lr, [sp], #4
 8006204:	b003      	add	sp, #12
 8006206:	4770      	bx	lr
 8006208:	20000018 	.word	0x20000018
 800620c:	ffff0208 	.word	0xffff0208

08006210 <__sread>:
 8006210:	b510      	push	{r4, lr}
 8006212:	460c      	mov	r4, r1
 8006214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006218:	f000 f900 	bl	800641c <_read_r>
 800621c:	2800      	cmp	r0, #0
 800621e:	bfab      	itete	ge
 8006220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006222:	89a3      	ldrhlt	r3, [r4, #12]
 8006224:	181b      	addge	r3, r3, r0
 8006226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800622a:	bfac      	ite	ge
 800622c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800622e:	81a3      	strhlt	r3, [r4, #12]
 8006230:	bd10      	pop	{r4, pc}

08006232 <__swrite>:
 8006232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006236:	461f      	mov	r7, r3
 8006238:	898b      	ldrh	r3, [r1, #12]
 800623a:	4605      	mov	r5, r0
 800623c:	05db      	lsls	r3, r3, #23
 800623e:	460c      	mov	r4, r1
 8006240:	4616      	mov	r6, r2
 8006242:	d505      	bpl.n	8006250 <__swrite+0x1e>
 8006244:	2302      	movs	r3, #2
 8006246:	2200      	movs	r2, #0
 8006248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624c:	f000 f8d4 	bl	80063f8 <_lseek_r>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	4632      	mov	r2, r6
 8006254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006258:	81a3      	strh	r3, [r4, #12]
 800625a:	4628      	mov	r0, r5
 800625c:	463b      	mov	r3, r7
 800625e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006266:	f000 b8eb 	b.w	8006440 <_write_r>

0800626a <__sseek>:
 800626a:	b510      	push	{r4, lr}
 800626c:	460c      	mov	r4, r1
 800626e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006272:	f000 f8c1 	bl	80063f8 <_lseek_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	bf15      	itete	ne
 800627c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800627e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006286:	81a3      	strheq	r3, [r4, #12]
 8006288:	bf18      	it	ne
 800628a:	81a3      	strhne	r3, [r4, #12]
 800628c:	bd10      	pop	{r4, pc}

0800628e <__sclose>:
 800628e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006292:	f000 b8a1 	b.w	80063d8 <_close_r>

08006296 <__swbuf_r>:
 8006296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006298:	460e      	mov	r6, r1
 800629a:	4614      	mov	r4, r2
 800629c:	4605      	mov	r5, r0
 800629e:	b118      	cbz	r0, 80062a8 <__swbuf_r+0x12>
 80062a0:	6a03      	ldr	r3, [r0, #32]
 80062a2:	b90b      	cbnz	r3, 80062a8 <__swbuf_r+0x12>
 80062a4:	f7ff feee 	bl	8006084 <__sinit>
 80062a8:	69a3      	ldr	r3, [r4, #24]
 80062aa:	60a3      	str	r3, [r4, #8]
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	071a      	lsls	r2, r3, #28
 80062b0:	d501      	bpl.n	80062b6 <__swbuf_r+0x20>
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	b943      	cbnz	r3, 80062c8 <__swbuf_r+0x32>
 80062b6:	4621      	mov	r1, r4
 80062b8:	4628      	mov	r0, r5
 80062ba:	f000 f82b 	bl	8006314 <__swsetup_r>
 80062be:	b118      	cbz	r0, 80062c8 <__swbuf_r+0x32>
 80062c0:	f04f 37ff 	mov.w	r7, #4294967295
 80062c4:	4638      	mov	r0, r7
 80062c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	6922      	ldr	r2, [r4, #16]
 80062cc:	b2f6      	uxtb	r6, r6
 80062ce:	1a98      	subs	r0, r3, r2
 80062d0:	6963      	ldr	r3, [r4, #20]
 80062d2:	4637      	mov	r7, r6
 80062d4:	4283      	cmp	r3, r0
 80062d6:	dc05      	bgt.n	80062e4 <__swbuf_r+0x4e>
 80062d8:	4621      	mov	r1, r4
 80062da:	4628      	mov	r0, r5
 80062dc:	f001 fef2 	bl	80080c4 <_fflush_r>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d1ed      	bne.n	80062c0 <__swbuf_r+0x2a>
 80062e4:	68a3      	ldr	r3, [r4, #8]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	60a3      	str	r3, [r4, #8]
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	6022      	str	r2, [r4, #0]
 80062f0:	701e      	strb	r6, [r3, #0]
 80062f2:	6962      	ldr	r2, [r4, #20]
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d004      	beq.n	8006304 <__swbuf_r+0x6e>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	07db      	lsls	r3, r3, #31
 80062fe:	d5e1      	bpl.n	80062c4 <__swbuf_r+0x2e>
 8006300:	2e0a      	cmp	r6, #10
 8006302:	d1df      	bne.n	80062c4 <__swbuf_r+0x2e>
 8006304:	4621      	mov	r1, r4
 8006306:	4628      	mov	r0, r5
 8006308:	f001 fedc 	bl	80080c4 <_fflush_r>
 800630c:	2800      	cmp	r0, #0
 800630e:	d0d9      	beq.n	80062c4 <__swbuf_r+0x2e>
 8006310:	e7d6      	b.n	80062c0 <__swbuf_r+0x2a>
	...

08006314 <__swsetup_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4b29      	ldr	r3, [pc, #164]	@ (80063bc <__swsetup_r+0xa8>)
 8006318:	4605      	mov	r5, r0
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	460c      	mov	r4, r1
 800631e:	b118      	cbz	r0, 8006328 <__swsetup_r+0x14>
 8006320:	6a03      	ldr	r3, [r0, #32]
 8006322:	b90b      	cbnz	r3, 8006328 <__swsetup_r+0x14>
 8006324:	f7ff feae 	bl	8006084 <__sinit>
 8006328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800632c:	0719      	lsls	r1, r3, #28
 800632e:	d422      	bmi.n	8006376 <__swsetup_r+0x62>
 8006330:	06da      	lsls	r2, r3, #27
 8006332:	d407      	bmi.n	8006344 <__swsetup_r+0x30>
 8006334:	2209      	movs	r2, #9
 8006336:	602a      	str	r2, [r5, #0]
 8006338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	e033      	b.n	80063ac <__swsetup_r+0x98>
 8006344:	0758      	lsls	r0, r3, #29
 8006346:	d512      	bpl.n	800636e <__swsetup_r+0x5a>
 8006348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800634a:	b141      	cbz	r1, 800635e <__swsetup_r+0x4a>
 800634c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006350:	4299      	cmp	r1, r3
 8006352:	d002      	beq.n	800635a <__swsetup_r+0x46>
 8006354:	4628      	mov	r0, r5
 8006356:	f000 ff1f 	bl	8007198 <_free_r>
 800635a:	2300      	movs	r3, #0
 800635c:	6363      	str	r3, [r4, #52]	@ 0x34
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	2300      	movs	r3, #0
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	f043 0308 	orr.w	r3, r3, #8
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	b94b      	cbnz	r3, 800638e <__swsetup_r+0x7a>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006384:	d003      	beq.n	800638e <__swsetup_r+0x7a>
 8006386:	4621      	mov	r1, r4
 8006388:	4628      	mov	r0, r5
 800638a:	f001 fee8 	bl	800815e <__smakebuf_r>
 800638e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006392:	f013 0201 	ands.w	r2, r3, #1
 8006396:	d00a      	beq.n	80063ae <__swsetup_r+0x9a>
 8006398:	2200      	movs	r2, #0
 800639a:	60a2      	str	r2, [r4, #8]
 800639c:	6962      	ldr	r2, [r4, #20]
 800639e:	4252      	negs	r2, r2
 80063a0:	61a2      	str	r2, [r4, #24]
 80063a2:	6922      	ldr	r2, [r4, #16]
 80063a4:	b942      	cbnz	r2, 80063b8 <__swsetup_r+0xa4>
 80063a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063aa:	d1c5      	bne.n	8006338 <__swsetup_r+0x24>
 80063ac:	bd38      	pop	{r3, r4, r5, pc}
 80063ae:	0799      	lsls	r1, r3, #30
 80063b0:	bf58      	it	pl
 80063b2:	6962      	ldrpl	r2, [r4, #20]
 80063b4:	60a2      	str	r2, [r4, #8]
 80063b6:	e7f4      	b.n	80063a2 <__swsetup_r+0x8e>
 80063b8:	2000      	movs	r0, #0
 80063ba:	e7f7      	b.n	80063ac <__swsetup_r+0x98>
 80063bc:	20000018 	.word	0x20000018

080063c0 <memset>:
 80063c0:	4603      	mov	r3, r0
 80063c2:	4402      	add	r2, r0
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d100      	bne.n	80063ca <memset+0xa>
 80063c8:	4770      	bx	lr
 80063ca:	f803 1b01 	strb.w	r1, [r3], #1
 80063ce:	e7f9      	b.n	80063c4 <memset+0x4>

080063d0 <_localeconv_r>:
 80063d0:	4800      	ldr	r0, [pc, #0]	@ (80063d4 <_localeconv_r+0x4>)
 80063d2:	4770      	bx	lr
 80063d4:	20000158 	.word	0x20000158

080063d8 <_close_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	2300      	movs	r3, #0
 80063dc:	4d05      	ldr	r5, [pc, #20]	@ (80063f4 <_close_r+0x1c>)
 80063de:	4604      	mov	r4, r0
 80063e0:	4608      	mov	r0, r1
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	f7fb ffa5 	bl	8002332 <_close>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d102      	bne.n	80063f2 <_close_r+0x1a>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b103      	cbz	r3, 80063f2 <_close_r+0x1a>
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	20000818 	.word	0x20000818

080063f8 <_lseek_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	2200      	movs	r2, #0
 8006402:	4d05      	ldr	r5, [pc, #20]	@ (8006418 <_lseek_r+0x20>)
 8006404:	602a      	str	r2, [r5, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	f7fb ffb7 	bl	800237a <_lseek>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_lseek_r+0x1e>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_lseek_r+0x1e>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20000818 	.word	0x20000818

0800641c <_read_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	4611      	mov	r1, r2
 8006424:	2200      	movs	r2, #0
 8006426:	4d05      	ldr	r5, [pc, #20]	@ (800643c <_read_r+0x20>)
 8006428:	602a      	str	r2, [r5, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	f7fb ff48 	bl	80022c0 <_read>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_read_r+0x1e>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_read_r+0x1e>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	20000818 	.word	0x20000818

08006440 <_write_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	2200      	movs	r2, #0
 800644a:	4d05      	ldr	r5, [pc, #20]	@ (8006460 <_write_r+0x20>)
 800644c:	602a      	str	r2, [r5, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f7fb ff53 	bl	80022fa <_write>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_write_r+0x1e>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_write_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	20000818 	.word	0x20000818

08006464 <__errno>:
 8006464:	4b01      	ldr	r3, [pc, #4]	@ (800646c <__errno+0x8>)
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	20000018 	.word	0x20000018

08006470 <__libc_init_array>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	2600      	movs	r6, #0
 8006474:	4d0c      	ldr	r5, [pc, #48]	@ (80064a8 <__libc_init_array+0x38>)
 8006476:	4c0d      	ldr	r4, [pc, #52]	@ (80064ac <__libc_init_array+0x3c>)
 8006478:	1b64      	subs	r4, r4, r5
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	42a6      	cmp	r6, r4
 800647e:	d109      	bne.n	8006494 <__libc_init_array+0x24>
 8006480:	f002 fb40 	bl	8008b04 <_init>
 8006484:	2600      	movs	r6, #0
 8006486:	4d0a      	ldr	r5, [pc, #40]	@ (80064b0 <__libc_init_array+0x40>)
 8006488:	4c0a      	ldr	r4, [pc, #40]	@ (80064b4 <__libc_init_array+0x44>)
 800648a:	1b64      	subs	r4, r4, r5
 800648c:	10a4      	asrs	r4, r4, #2
 800648e:	42a6      	cmp	r6, r4
 8006490:	d105      	bne.n	800649e <__libc_init_array+0x2e>
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	f855 3b04 	ldr.w	r3, [r5], #4
 8006498:	4798      	blx	r3
 800649a:	3601      	adds	r6, #1
 800649c:	e7ee      	b.n	800647c <__libc_init_array+0xc>
 800649e:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a2:	4798      	blx	r3
 80064a4:	3601      	adds	r6, #1
 80064a6:	e7f2      	b.n	800648e <__libc_init_array+0x1e>
 80064a8:	08009058 	.word	0x08009058
 80064ac:	08009058 	.word	0x08009058
 80064b0:	08009058 	.word	0x08009058
 80064b4:	0800905c 	.word	0x0800905c

080064b8 <__retarget_lock_init_recursive>:
 80064b8:	4770      	bx	lr

080064ba <__retarget_lock_acquire_recursive>:
 80064ba:	4770      	bx	lr

080064bc <__retarget_lock_release_recursive>:
 80064bc:	4770      	bx	lr

080064be <memchr>:
 80064be:	4603      	mov	r3, r0
 80064c0:	b510      	push	{r4, lr}
 80064c2:	b2c9      	uxtb	r1, r1
 80064c4:	4402      	add	r2, r0
 80064c6:	4293      	cmp	r3, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	d101      	bne.n	80064d0 <memchr+0x12>
 80064cc:	2000      	movs	r0, #0
 80064ce:	e003      	b.n	80064d8 <memchr+0x1a>
 80064d0:	7804      	ldrb	r4, [r0, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	428c      	cmp	r4, r1
 80064d6:	d1f6      	bne.n	80064c6 <memchr+0x8>
 80064d8:	bd10      	pop	{r4, pc}

080064da <memcpy>:
 80064da:	440a      	add	r2, r1
 80064dc:	4291      	cmp	r1, r2
 80064de:	f100 33ff 	add.w	r3, r0, #4294967295
 80064e2:	d100      	bne.n	80064e6 <memcpy+0xc>
 80064e4:	4770      	bx	lr
 80064e6:	b510      	push	{r4, lr}
 80064e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ec:	4291      	cmp	r1, r2
 80064ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064f2:	d1f9      	bne.n	80064e8 <memcpy+0xe>
 80064f4:	bd10      	pop	{r4, pc}

080064f6 <quorem>:
 80064f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	6903      	ldr	r3, [r0, #16]
 80064fc:	690c      	ldr	r4, [r1, #16]
 80064fe:	4607      	mov	r7, r0
 8006500:	42a3      	cmp	r3, r4
 8006502:	db7e      	blt.n	8006602 <quorem+0x10c>
 8006504:	3c01      	subs	r4, #1
 8006506:	00a3      	lsls	r3, r4, #2
 8006508:	f100 0514 	add.w	r5, r0, #20
 800650c:	f101 0814 	add.w	r8, r1, #20
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800651c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006520:	3301      	adds	r3, #1
 8006522:	429a      	cmp	r2, r3
 8006524:	fbb2 f6f3 	udiv	r6, r2, r3
 8006528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800652c:	d32e      	bcc.n	800658c <quorem+0x96>
 800652e:	f04f 0a00 	mov.w	sl, #0
 8006532:	46c4      	mov	ip, r8
 8006534:	46ae      	mov	lr, r5
 8006536:	46d3      	mov	fp, sl
 8006538:	f85c 3b04 	ldr.w	r3, [ip], #4
 800653c:	b298      	uxth	r0, r3
 800653e:	fb06 a000 	mla	r0, r6, r0, sl
 8006542:	0c1b      	lsrs	r3, r3, #16
 8006544:	0c02      	lsrs	r2, r0, #16
 8006546:	fb06 2303 	mla	r3, r6, r3, r2
 800654a:	f8de 2000 	ldr.w	r2, [lr]
 800654e:	b280      	uxth	r0, r0
 8006550:	b292      	uxth	r2, r2
 8006552:	1a12      	subs	r2, r2, r0
 8006554:	445a      	add	r2, fp
 8006556:	f8de 0000 	ldr.w	r0, [lr]
 800655a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800655e:	b29b      	uxth	r3, r3
 8006560:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006564:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006568:	b292      	uxth	r2, r2
 800656a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800656e:	45e1      	cmp	r9, ip
 8006570:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006574:	f84e 2b04 	str.w	r2, [lr], #4
 8006578:	d2de      	bcs.n	8006538 <quorem+0x42>
 800657a:	9b00      	ldr	r3, [sp, #0]
 800657c:	58eb      	ldr	r3, [r5, r3]
 800657e:	b92b      	cbnz	r3, 800658c <quorem+0x96>
 8006580:	9b01      	ldr	r3, [sp, #4]
 8006582:	3b04      	subs	r3, #4
 8006584:	429d      	cmp	r5, r3
 8006586:	461a      	mov	r2, r3
 8006588:	d32f      	bcc.n	80065ea <quorem+0xf4>
 800658a:	613c      	str	r4, [r7, #16]
 800658c:	4638      	mov	r0, r7
 800658e:	f001 f979 	bl	8007884 <__mcmp>
 8006592:	2800      	cmp	r0, #0
 8006594:	db25      	blt.n	80065e2 <quorem+0xec>
 8006596:	4629      	mov	r1, r5
 8006598:	2000      	movs	r0, #0
 800659a:	f858 2b04 	ldr.w	r2, [r8], #4
 800659e:	f8d1 c000 	ldr.w	ip, [r1]
 80065a2:	fa1f fe82 	uxth.w	lr, r2
 80065a6:	fa1f f38c 	uxth.w	r3, ip
 80065aa:	eba3 030e 	sub.w	r3, r3, lr
 80065ae:	4403      	add	r3, r0
 80065b0:	0c12      	lsrs	r2, r2, #16
 80065b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80065b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065c0:	45c1      	cmp	r9, r8
 80065c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065c6:	f841 3b04 	str.w	r3, [r1], #4
 80065ca:	d2e6      	bcs.n	800659a <quorem+0xa4>
 80065cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065d4:	b922      	cbnz	r2, 80065e0 <quorem+0xea>
 80065d6:	3b04      	subs	r3, #4
 80065d8:	429d      	cmp	r5, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	d30b      	bcc.n	80065f6 <quorem+0x100>
 80065de:	613c      	str	r4, [r7, #16]
 80065e0:	3601      	adds	r6, #1
 80065e2:	4630      	mov	r0, r6
 80065e4:	b003      	add	sp, #12
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	3b04      	subs	r3, #4
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	d1cb      	bne.n	800658a <quorem+0x94>
 80065f2:	3c01      	subs	r4, #1
 80065f4:	e7c6      	b.n	8006584 <quorem+0x8e>
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	3b04      	subs	r3, #4
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d1ef      	bne.n	80065de <quorem+0xe8>
 80065fe:	3c01      	subs	r4, #1
 8006600:	e7ea      	b.n	80065d8 <quorem+0xe2>
 8006602:	2000      	movs	r0, #0
 8006604:	e7ee      	b.n	80065e4 <quorem+0xee>
	...

08006608 <_dtoa_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4614      	mov	r4, r2
 800660e:	461d      	mov	r5, r3
 8006610:	69c7      	ldr	r7, [r0, #28]
 8006612:	b097      	sub	sp, #92	@ 0x5c
 8006614:	4683      	mov	fp, r0
 8006616:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800661a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800661c:	b97f      	cbnz	r7, 800663e <_dtoa_r+0x36>
 800661e:	2010      	movs	r0, #16
 8006620:	f000 fe02 	bl	8007228 <malloc>
 8006624:	4602      	mov	r2, r0
 8006626:	f8cb 001c 	str.w	r0, [fp, #28]
 800662a:	b920      	cbnz	r0, 8006636 <_dtoa_r+0x2e>
 800662c:	21ef      	movs	r1, #239	@ 0xef
 800662e:	4ba8      	ldr	r3, [pc, #672]	@ (80068d0 <_dtoa_r+0x2c8>)
 8006630:	48a8      	ldr	r0, [pc, #672]	@ (80068d4 <_dtoa_r+0x2cc>)
 8006632:	f001 fe1d 	bl	8008270 <__assert_func>
 8006636:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800663a:	6007      	str	r7, [r0, #0]
 800663c:	60c7      	str	r7, [r0, #12]
 800663e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006642:	6819      	ldr	r1, [r3, #0]
 8006644:	b159      	cbz	r1, 800665e <_dtoa_r+0x56>
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	2301      	movs	r3, #1
 800664a:	4093      	lsls	r3, r2
 800664c:	604a      	str	r2, [r1, #4]
 800664e:	608b      	str	r3, [r1, #8]
 8006650:	4658      	mov	r0, fp
 8006652:	f000 fedf 	bl	8007414 <_Bfree>
 8006656:	2200      	movs	r2, #0
 8006658:	f8db 301c 	ldr.w	r3, [fp, #28]
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	1e2b      	subs	r3, r5, #0
 8006660:	bfaf      	iteee	ge
 8006662:	2300      	movge	r3, #0
 8006664:	2201      	movlt	r2, #1
 8006666:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800666a:	9303      	strlt	r3, [sp, #12]
 800666c:	bfa8      	it	ge
 800666e:	6033      	strge	r3, [r6, #0]
 8006670:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006674:	4b98      	ldr	r3, [pc, #608]	@ (80068d8 <_dtoa_r+0x2d0>)
 8006676:	bfb8      	it	lt
 8006678:	6032      	strlt	r2, [r6, #0]
 800667a:	ea33 0308 	bics.w	r3, r3, r8
 800667e:	d112      	bne.n	80066a6 <_dtoa_r+0x9e>
 8006680:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006684:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800668c:	4323      	orrs	r3, r4
 800668e:	f000 8550 	beq.w	8007132 <_dtoa_r+0xb2a>
 8006692:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006694:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80068dc <_dtoa_r+0x2d4>
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8552 	beq.w	8007142 <_dtoa_r+0xb3a>
 800669e:	f10a 0303 	add.w	r3, sl, #3
 80066a2:	f000 bd4c 	b.w	800713e <_dtoa_r+0xb36>
 80066a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80066ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066b2:	2200      	movs	r2, #0
 80066b4:	2300      	movs	r3, #0
 80066b6:	f7fa f977 	bl	80009a8 <__aeabi_dcmpeq>
 80066ba:	4607      	mov	r7, r0
 80066bc:	b158      	cbz	r0, 80066d6 <_dtoa_r+0xce>
 80066be:	2301      	movs	r3, #1
 80066c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066c6:	b113      	cbz	r3, 80066ce <_dtoa_r+0xc6>
 80066c8:	4b85      	ldr	r3, [pc, #532]	@ (80068e0 <_dtoa_r+0x2d8>)
 80066ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80068e4 <_dtoa_r+0x2dc>
 80066d2:	f000 bd36 	b.w	8007142 <_dtoa_r+0xb3a>
 80066d6:	ab14      	add	r3, sp, #80	@ 0x50
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	ab15      	add	r3, sp, #84	@ 0x54
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4658      	mov	r0, fp
 80066e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80066e4:	f001 f97e 	bl	80079e4 <__d2b>
 80066e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80066ec:	4681      	mov	r9, r0
 80066ee:	2e00      	cmp	r6, #0
 80066f0:	d077      	beq.n	80067e2 <_dtoa_r+0x1da>
 80066f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80066fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006700:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006704:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006708:	9712      	str	r7, [sp, #72]	@ 0x48
 800670a:	4619      	mov	r1, r3
 800670c:	2200      	movs	r2, #0
 800670e:	4b76      	ldr	r3, [pc, #472]	@ (80068e8 <_dtoa_r+0x2e0>)
 8006710:	f7f9 fd2a 	bl	8000168 <__aeabi_dsub>
 8006714:	a368      	add	r3, pc, #416	@ (adr r3, 80068b8 <_dtoa_r+0x2b0>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fedd 	bl	80004d8 <__aeabi_dmul>
 800671e:	a368      	add	r3, pc, #416	@ (adr r3, 80068c0 <_dtoa_r+0x2b8>)
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f7f9 fd22 	bl	800016c <__adddf3>
 8006728:	4604      	mov	r4, r0
 800672a:	4630      	mov	r0, r6
 800672c:	460d      	mov	r5, r1
 800672e:	f7f9 fe69 	bl	8000404 <__aeabi_i2d>
 8006732:	a365      	add	r3, pc, #404	@ (adr r3, 80068c8 <_dtoa_r+0x2c0>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f7f9 fece 	bl	80004d8 <__aeabi_dmul>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	f7f9 fd12 	bl	800016c <__adddf3>
 8006748:	4604      	mov	r4, r0
 800674a:	460d      	mov	r5, r1
 800674c:	f7fa f974 	bl	8000a38 <__aeabi_d2iz>
 8006750:	2200      	movs	r2, #0
 8006752:	4607      	mov	r7, r0
 8006754:	2300      	movs	r3, #0
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7fa f92f 	bl	80009bc <__aeabi_dcmplt>
 800675e:	b140      	cbz	r0, 8006772 <_dtoa_r+0x16a>
 8006760:	4638      	mov	r0, r7
 8006762:	f7f9 fe4f 	bl	8000404 <__aeabi_i2d>
 8006766:	4622      	mov	r2, r4
 8006768:	462b      	mov	r3, r5
 800676a:	f7fa f91d 	bl	80009a8 <__aeabi_dcmpeq>
 800676e:	b900      	cbnz	r0, 8006772 <_dtoa_r+0x16a>
 8006770:	3f01      	subs	r7, #1
 8006772:	2f16      	cmp	r7, #22
 8006774:	d853      	bhi.n	800681e <_dtoa_r+0x216>
 8006776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800677a:	4b5c      	ldr	r3, [pc, #368]	@ (80068ec <_dtoa_r+0x2e4>)
 800677c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7fa f91a 	bl	80009bc <__aeabi_dcmplt>
 8006788:	2800      	cmp	r0, #0
 800678a:	d04a      	beq.n	8006822 <_dtoa_r+0x21a>
 800678c:	2300      	movs	r3, #0
 800678e:	3f01      	subs	r7, #1
 8006790:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006792:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006794:	1b9b      	subs	r3, r3, r6
 8006796:	1e5a      	subs	r2, r3, #1
 8006798:	bf46      	itte	mi
 800679a:	f1c3 0801 	rsbmi	r8, r3, #1
 800679e:	2300      	movmi	r3, #0
 80067a0:	f04f 0800 	movpl.w	r8, #0
 80067a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80067a6:	bf48      	it	mi
 80067a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80067aa:	2f00      	cmp	r7, #0
 80067ac:	db3b      	blt.n	8006826 <_dtoa_r+0x21e>
 80067ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80067b2:	443b      	add	r3, r7
 80067b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b6:	2300      	movs	r3, #0
 80067b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067bc:	2b09      	cmp	r3, #9
 80067be:	d866      	bhi.n	800688e <_dtoa_r+0x286>
 80067c0:	2b05      	cmp	r3, #5
 80067c2:	bfc4      	itt	gt
 80067c4:	3b04      	subgt	r3, #4
 80067c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80067c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067ca:	bfc8      	it	gt
 80067cc:	2400      	movgt	r4, #0
 80067ce:	f1a3 0302 	sub.w	r3, r3, #2
 80067d2:	bfd8      	it	le
 80067d4:	2401      	movle	r4, #1
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d864      	bhi.n	80068a4 <_dtoa_r+0x29c>
 80067da:	e8df f003 	tbb	[pc, r3]
 80067de:	382b      	.short	0x382b
 80067e0:	5636      	.short	0x5636
 80067e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80067e6:	441e      	add	r6, r3
 80067e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	bfc1      	itttt	gt
 80067f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80067f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80067f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80067fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006800:	bfd6      	itet	le
 8006802:	f1c3 0320 	rsble	r3, r3, #32
 8006806:	ea48 0003 	orrgt.w	r0, r8, r3
 800680a:	fa04 f003 	lslle.w	r0, r4, r3
 800680e:	f7f9 fde9 	bl	80003e4 <__aeabi_ui2d>
 8006812:	2201      	movs	r2, #1
 8006814:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006818:	3e01      	subs	r6, #1
 800681a:	9212      	str	r2, [sp, #72]	@ 0x48
 800681c:	e775      	b.n	800670a <_dtoa_r+0x102>
 800681e:	2301      	movs	r3, #1
 8006820:	e7b6      	b.n	8006790 <_dtoa_r+0x188>
 8006822:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006824:	e7b5      	b.n	8006792 <_dtoa_r+0x18a>
 8006826:	427b      	negs	r3, r7
 8006828:	930a      	str	r3, [sp, #40]	@ 0x28
 800682a:	2300      	movs	r3, #0
 800682c:	eba8 0807 	sub.w	r8, r8, r7
 8006830:	930e      	str	r3, [sp, #56]	@ 0x38
 8006832:	e7c2      	b.n	80067ba <_dtoa_r+0x1b2>
 8006834:	2300      	movs	r3, #0
 8006836:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006838:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800683a:	2b00      	cmp	r3, #0
 800683c:	dc35      	bgt.n	80068aa <_dtoa_r+0x2a2>
 800683e:	2301      	movs	r3, #1
 8006840:	461a      	mov	r2, r3
 8006842:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006846:	9221      	str	r2, [sp, #132]	@ 0x84
 8006848:	e00b      	b.n	8006862 <_dtoa_r+0x25a>
 800684a:	2301      	movs	r3, #1
 800684c:	e7f3      	b.n	8006836 <_dtoa_r+0x22e>
 800684e:	2300      	movs	r3, #0
 8006850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006852:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	9308      	str	r3, [sp, #32]
 8006858:	3301      	adds	r3, #1
 800685a:	2b01      	cmp	r3, #1
 800685c:	9307      	str	r3, [sp, #28]
 800685e:	bfb8      	it	lt
 8006860:	2301      	movlt	r3, #1
 8006862:	2100      	movs	r1, #0
 8006864:	2204      	movs	r2, #4
 8006866:	f8db 001c 	ldr.w	r0, [fp, #28]
 800686a:	f102 0514 	add.w	r5, r2, #20
 800686e:	429d      	cmp	r5, r3
 8006870:	d91f      	bls.n	80068b2 <_dtoa_r+0x2aa>
 8006872:	6041      	str	r1, [r0, #4]
 8006874:	4658      	mov	r0, fp
 8006876:	f000 fd8d 	bl	8007394 <_Balloc>
 800687a:	4682      	mov	sl, r0
 800687c:	2800      	cmp	r0, #0
 800687e:	d139      	bne.n	80068f4 <_dtoa_r+0x2ec>
 8006880:	4602      	mov	r2, r0
 8006882:	f240 11af 	movw	r1, #431	@ 0x1af
 8006886:	4b1a      	ldr	r3, [pc, #104]	@ (80068f0 <_dtoa_r+0x2e8>)
 8006888:	e6d2      	b.n	8006630 <_dtoa_r+0x28>
 800688a:	2301      	movs	r3, #1
 800688c:	e7e0      	b.n	8006850 <_dtoa_r+0x248>
 800688e:	2401      	movs	r4, #1
 8006890:	2300      	movs	r3, #0
 8006892:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006894:	9320      	str	r3, [sp, #128]	@ 0x80
 8006896:	f04f 33ff 	mov.w	r3, #4294967295
 800689a:	2200      	movs	r2, #0
 800689c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80068a0:	2312      	movs	r3, #18
 80068a2:	e7d0      	b.n	8006846 <_dtoa_r+0x23e>
 80068a4:	2301      	movs	r3, #1
 80068a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068a8:	e7f5      	b.n	8006896 <_dtoa_r+0x28e>
 80068aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80068b0:	e7d7      	b.n	8006862 <_dtoa_r+0x25a>
 80068b2:	3101      	adds	r1, #1
 80068b4:	0052      	lsls	r2, r2, #1
 80068b6:	e7d8      	b.n	800686a <_dtoa_r+0x262>
 80068b8:	636f4361 	.word	0x636f4361
 80068bc:	3fd287a7 	.word	0x3fd287a7
 80068c0:	8b60c8b3 	.word	0x8b60c8b3
 80068c4:	3fc68a28 	.word	0x3fc68a28
 80068c8:	509f79fb 	.word	0x509f79fb
 80068cc:	3fd34413 	.word	0x3fd34413
 80068d0:	08008cb3 	.word	0x08008cb3
 80068d4:	08008cca 	.word	0x08008cca
 80068d8:	7ff00000 	.word	0x7ff00000
 80068dc:	08008caf 	.word	0x08008caf
 80068e0:	08008c83 	.word	0x08008c83
 80068e4:	08008c82 	.word	0x08008c82
 80068e8:	3ff80000 	.word	0x3ff80000
 80068ec:	08008dc0 	.word	0x08008dc0
 80068f0:	08008d22 	.word	0x08008d22
 80068f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068f8:	6018      	str	r0, [r3, #0]
 80068fa:	9b07      	ldr	r3, [sp, #28]
 80068fc:	2b0e      	cmp	r3, #14
 80068fe:	f200 80a4 	bhi.w	8006a4a <_dtoa_r+0x442>
 8006902:	2c00      	cmp	r4, #0
 8006904:	f000 80a1 	beq.w	8006a4a <_dtoa_r+0x442>
 8006908:	2f00      	cmp	r7, #0
 800690a:	dd33      	ble.n	8006974 <_dtoa_r+0x36c>
 800690c:	4b86      	ldr	r3, [pc, #536]	@ (8006b28 <_dtoa_r+0x520>)
 800690e:	f007 020f 	and.w	r2, r7, #15
 8006912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006916:	05f8      	lsls	r0, r7, #23
 8006918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800691c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006920:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006924:	d516      	bpl.n	8006954 <_dtoa_r+0x34c>
 8006926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800692a:	4b80      	ldr	r3, [pc, #512]	@ (8006b2c <_dtoa_r+0x524>)
 800692c:	2603      	movs	r6, #3
 800692e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006932:	f7f9 fefb 	bl	800072c <__aeabi_ddiv>
 8006936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800693a:	f004 040f 	and.w	r4, r4, #15
 800693e:	4d7b      	ldr	r5, [pc, #492]	@ (8006b2c <_dtoa_r+0x524>)
 8006940:	b954      	cbnz	r4, 8006958 <_dtoa_r+0x350>
 8006942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800694a:	f7f9 feef 	bl	800072c <__aeabi_ddiv>
 800694e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006952:	e028      	b.n	80069a6 <_dtoa_r+0x39e>
 8006954:	2602      	movs	r6, #2
 8006956:	e7f2      	b.n	800693e <_dtoa_r+0x336>
 8006958:	07e1      	lsls	r1, r4, #31
 800695a:	d508      	bpl.n	800696e <_dtoa_r+0x366>
 800695c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006964:	f7f9 fdb8 	bl	80004d8 <__aeabi_dmul>
 8006968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800696c:	3601      	adds	r6, #1
 800696e:	1064      	asrs	r4, r4, #1
 8006970:	3508      	adds	r5, #8
 8006972:	e7e5      	b.n	8006940 <_dtoa_r+0x338>
 8006974:	f000 80d2 	beq.w	8006b1c <_dtoa_r+0x514>
 8006978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800697c:	427c      	negs	r4, r7
 800697e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b28 <_dtoa_r+0x520>)
 8006980:	f004 020f 	and.w	r2, r4, #15
 8006984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f7f9 fda4 	bl	80004d8 <__aeabi_dmul>
 8006990:	2602      	movs	r6, #2
 8006992:	2300      	movs	r3, #0
 8006994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006998:	4d64      	ldr	r5, [pc, #400]	@ (8006b2c <_dtoa_r+0x524>)
 800699a:	1124      	asrs	r4, r4, #4
 800699c:	2c00      	cmp	r4, #0
 800699e:	f040 80b2 	bne.w	8006b06 <_dtoa_r+0x4fe>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1d3      	bne.n	800694e <_dtoa_r+0x346>
 80069a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80b7 	beq.w	8006b20 <_dtoa_r+0x518>
 80069b2:	2200      	movs	r2, #0
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006b30 <_dtoa_r+0x528>)
 80069ba:	f7f9 ffff 	bl	80009bc <__aeabi_dcmplt>
 80069be:	2800      	cmp	r0, #0
 80069c0:	f000 80ae 	beq.w	8006b20 <_dtoa_r+0x518>
 80069c4:	9b07      	ldr	r3, [sp, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80aa 	beq.w	8006b20 <_dtoa_r+0x518>
 80069cc:	9b08      	ldr	r3, [sp, #32]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dd37      	ble.n	8006a42 <_dtoa_r+0x43a>
 80069d2:	1e7b      	subs	r3, r7, #1
 80069d4:	4620      	mov	r0, r4
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	2200      	movs	r2, #0
 80069da:	4629      	mov	r1, r5
 80069dc:	4b55      	ldr	r3, [pc, #340]	@ (8006b34 <_dtoa_r+0x52c>)
 80069de:	f7f9 fd7b 	bl	80004d8 <__aeabi_dmul>
 80069e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e6:	9c08      	ldr	r4, [sp, #32]
 80069e8:	3601      	adds	r6, #1
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7f9 fd0a 	bl	8000404 <__aeabi_i2d>
 80069f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069f4:	f7f9 fd70 	bl	80004d8 <__aeabi_dmul>
 80069f8:	2200      	movs	r2, #0
 80069fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006b38 <_dtoa_r+0x530>)
 80069fc:	f7f9 fbb6 	bl	800016c <__adddf3>
 8006a00:	4605      	mov	r5, r0
 8006a02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a06:	2c00      	cmp	r4, #0
 8006a08:	f040 809a 	bne.w	8006b40 <_dtoa_r+0x538>
 8006a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	4b4a      	ldr	r3, [pc, #296]	@ (8006b3c <_dtoa_r+0x534>)
 8006a14:	f7f9 fba8 	bl	8000168 <__aeabi_dsub>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a20:	462a      	mov	r2, r5
 8006a22:	4633      	mov	r3, r6
 8006a24:	f7f9 ffe8 	bl	80009f8 <__aeabi_dcmpgt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f040 828e 	bne.w	8006f4a <_dtoa_r+0x942>
 8006a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a32:	462a      	mov	r2, r5
 8006a34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a38:	f7f9 ffc0 	bl	80009bc <__aeabi_dcmplt>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f040 8127 	bne.w	8006c90 <_dtoa_r+0x688>
 8006a42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006a4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f2c0 8163 	blt.w	8006d18 <_dtoa_r+0x710>
 8006a52:	2f0e      	cmp	r7, #14
 8006a54:	f300 8160 	bgt.w	8006d18 <_dtoa_r+0x710>
 8006a58:	4b33      	ldr	r3, [pc, #204]	@ (8006b28 <_dtoa_r+0x520>)
 8006a5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	da03      	bge.n	8006a74 <_dtoa_r+0x46c>
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f340 8100 	ble.w	8006c74 <_dtoa_r+0x66c>
 8006a74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a78:	4656      	mov	r6, sl
 8006a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7f9 fe53 	bl	800072c <__aeabi_ddiv>
 8006a86:	f7f9 ffd7 	bl	8000a38 <__aeabi_d2iz>
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	f7f9 fcba 	bl	8000404 <__aeabi_i2d>
 8006a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a94:	f7f9 fd20 	bl	80004d8 <__aeabi_dmul>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7f9 fb62 	bl	8000168 <__aeabi_dsub>
 8006aa4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006aa8:	9d07      	ldr	r5, [sp, #28]
 8006aaa:	f806 4b01 	strb.w	r4, [r6], #1
 8006aae:	eba6 040a 	sub.w	r4, r6, sl
 8006ab2:	42a5      	cmp	r5, r4
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	f040 8116 	bne.w	8006ce8 <_dtoa_r+0x6e0>
 8006abc:	f7f9 fb56 	bl	800016c <__adddf3>
 8006ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	f7f9 ff96 	bl	80009f8 <__aeabi_dcmpgt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f040 80f8 	bne.w	8006cc2 <_dtoa_r+0x6ba>
 8006ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	4629      	mov	r1, r5
 8006ada:	f7f9 ff65 	bl	80009a8 <__aeabi_dcmpeq>
 8006ade:	b118      	cbz	r0, 8006ae8 <_dtoa_r+0x4e0>
 8006ae0:	f018 0f01 	tst.w	r8, #1
 8006ae4:	f040 80ed 	bne.w	8006cc2 <_dtoa_r+0x6ba>
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4658      	mov	r0, fp
 8006aec:	f000 fc92 	bl	8007414 <_Bfree>
 8006af0:	2300      	movs	r3, #0
 8006af2:	7033      	strb	r3, [r6, #0]
 8006af4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006af6:	3701      	adds	r7, #1
 8006af8:	601f      	str	r7, [r3, #0]
 8006afa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8320 	beq.w	8007142 <_dtoa_r+0xb3a>
 8006b02:	601e      	str	r6, [r3, #0]
 8006b04:	e31d      	b.n	8007142 <_dtoa_r+0xb3a>
 8006b06:	07e2      	lsls	r2, r4, #31
 8006b08:	d505      	bpl.n	8006b16 <_dtoa_r+0x50e>
 8006b0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b0e:	f7f9 fce3 	bl	80004d8 <__aeabi_dmul>
 8006b12:	2301      	movs	r3, #1
 8006b14:	3601      	adds	r6, #1
 8006b16:	1064      	asrs	r4, r4, #1
 8006b18:	3508      	adds	r5, #8
 8006b1a:	e73f      	b.n	800699c <_dtoa_r+0x394>
 8006b1c:	2602      	movs	r6, #2
 8006b1e:	e742      	b.n	80069a6 <_dtoa_r+0x39e>
 8006b20:	9c07      	ldr	r4, [sp, #28]
 8006b22:	9704      	str	r7, [sp, #16]
 8006b24:	e761      	b.n	80069ea <_dtoa_r+0x3e2>
 8006b26:	bf00      	nop
 8006b28:	08008dc0 	.word	0x08008dc0
 8006b2c:	08008d98 	.word	0x08008d98
 8006b30:	3ff00000 	.word	0x3ff00000
 8006b34:	40240000 	.word	0x40240000
 8006b38:	401c0000 	.word	0x401c0000
 8006b3c:	40140000 	.word	0x40140000
 8006b40:	4b70      	ldr	r3, [pc, #448]	@ (8006d04 <_dtoa_r+0x6fc>)
 8006b42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b4c:	4454      	add	r4, sl
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	d045      	beq.n	8006bde <_dtoa_r+0x5d6>
 8006b52:	2000      	movs	r0, #0
 8006b54:	496c      	ldr	r1, [pc, #432]	@ (8006d08 <_dtoa_r+0x700>)
 8006b56:	f7f9 fde9 	bl	800072c <__aeabi_ddiv>
 8006b5a:	4633      	mov	r3, r6
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	f7f9 fb03 	bl	8000168 <__aeabi_dsub>
 8006b62:	4656      	mov	r6, sl
 8006b64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b6c:	f7f9 ff64 	bl	8000a38 <__aeabi_d2iz>
 8006b70:	4605      	mov	r5, r0
 8006b72:	f7f9 fc47 	bl	8000404 <__aeabi_i2d>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b7e:	f7f9 faf3 	bl	8000168 <__aeabi_dsub>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	3530      	adds	r5, #48	@ 0x30
 8006b88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b90:	f806 5b01 	strb.w	r5, [r6], #1
 8006b94:	f7f9 ff12 	bl	80009bc <__aeabi_dcmplt>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d163      	bne.n	8006c64 <_dtoa_r+0x65c>
 8006b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	495a      	ldr	r1, [pc, #360]	@ (8006d0c <_dtoa_r+0x704>)
 8006ba4:	f7f9 fae0 	bl	8000168 <__aeabi_dsub>
 8006ba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bac:	f7f9 ff06 	bl	80009bc <__aeabi_dcmplt>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	f040 8087 	bne.w	8006cc4 <_dtoa_r+0x6bc>
 8006bb6:	42a6      	cmp	r6, r4
 8006bb8:	f43f af43 	beq.w	8006a42 <_dtoa_r+0x43a>
 8006bbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4b53      	ldr	r3, [pc, #332]	@ (8006d10 <_dtoa_r+0x708>)
 8006bc4:	f7f9 fc88 	bl	80004d8 <__aeabi_dmul>
 8006bc8:	2200      	movs	r2, #0
 8006bca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8006d10 <_dtoa_r+0x708>)
 8006bd4:	f7f9 fc80 	bl	80004d8 <__aeabi_dmul>
 8006bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bdc:	e7c4      	b.n	8006b68 <_dtoa_r+0x560>
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	f7f9 fc79 	bl	80004d8 <__aeabi_dmul>
 8006be6:	4656      	mov	r6, sl
 8006be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bec:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bf2:	f7f9 ff21 	bl	8000a38 <__aeabi_d2iz>
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	f7f9 fc04 	bl	8000404 <__aeabi_i2d>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c04:	f7f9 fab0 	bl	8000168 <__aeabi_dsub>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	3530      	adds	r5, #48	@ 0x30
 8006c0e:	f806 5b01 	strb.w	r5, [r6], #1
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	d124      	bne.n	8006c68 <_dtoa_r+0x660>
 8006c1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c22:	4b39      	ldr	r3, [pc, #228]	@ (8006d08 <_dtoa_r+0x700>)
 8006c24:	f7f9 faa2 	bl	800016c <__adddf3>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c30:	f7f9 fee2 	bl	80009f8 <__aeabi_dcmpgt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d145      	bne.n	8006cc4 <_dtoa_r+0x6bc>
 8006c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	4932      	ldr	r1, [pc, #200]	@ (8006d08 <_dtoa_r+0x700>)
 8006c40:	f7f9 fa92 	bl	8000168 <__aeabi_dsub>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c4c:	f7f9 feb6 	bl	80009bc <__aeabi_dcmplt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	f43f aef6 	beq.w	8006a42 <_dtoa_r+0x43a>
 8006c56:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006c58:	1e73      	subs	r3, r6, #1
 8006c5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c60:	2b30      	cmp	r3, #48	@ 0x30
 8006c62:	d0f8      	beq.n	8006c56 <_dtoa_r+0x64e>
 8006c64:	9f04      	ldr	r7, [sp, #16]
 8006c66:	e73f      	b.n	8006ae8 <_dtoa_r+0x4e0>
 8006c68:	4b29      	ldr	r3, [pc, #164]	@ (8006d10 <_dtoa_r+0x708>)
 8006c6a:	f7f9 fc35 	bl	80004d8 <__aeabi_dmul>
 8006c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c72:	e7bc      	b.n	8006bee <_dtoa_r+0x5e6>
 8006c74:	d10c      	bne.n	8006c90 <_dtoa_r+0x688>
 8006c76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	4b25      	ldr	r3, [pc, #148]	@ (8006d14 <_dtoa_r+0x70c>)
 8006c7e:	f7f9 fc2b 	bl	80004d8 <__aeabi_dmul>
 8006c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c86:	f7f9 fead 	bl	80009e4 <__aeabi_dcmpge>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f000 815b 	beq.w	8006f46 <_dtoa_r+0x93e>
 8006c90:	2400      	movs	r4, #0
 8006c92:	4625      	mov	r5, r4
 8006c94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c96:	4656      	mov	r6, sl
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	9304      	str	r3, [sp, #16]
 8006c9c:	2700      	movs	r7, #0
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4658      	mov	r0, fp
 8006ca2:	f000 fbb7 	bl	8007414 <_Bfree>
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	d0dc      	beq.n	8006c64 <_dtoa_r+0x65c>
 8006caa:	b12f      	cbz	r7, 8006cb8 <_dtoa_r+0x6b0>
 8006cac:	42af      	cmp	r7, r5
 8006cae:	d003      	beq.n	8006cb8 <_dtoa_r+0x6b0>
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	4658      	mov	r0, fp
 8006cb4:	f000 fbae 	bl	8007414 <_Bfree>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4658      	mov	r0, fp
 8006cbc:	f000 fbaa 	bl	8007414 <_Bfree>
 8006cc0:	e7d0      	b.n	8006c64 <_dtoa_r+0x65c>
 8006cc2:	9704      	str	r7, [sp, #16]
 8006cc4:	4633      	mov	r3, r6
 8006cc6:	461e      	mov	r6, r3
 8006cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ccc:	2a39      	cmp	r2, #57	@ 0x39
 8006cce:	d107      	bne.n	8006ce0 <_dtoa_r+0x6d8>
 8006cd0:	459a      	cmp	sl, r3
 8006cd2:	d1f8      	bne.n	8006cc6 <_dtoa_r+0x6be>
 8006cd4:	9a04      	ldr	r2, [sp, #16]
 8006cd6:	3201      	adds	r2, #1
 8006cd8:	9204      	str	r2, [sp, #16]
 8006cda:	2230      	movs	r2, #48	@ 0x30
 8006cdc:	f88a 2000 	strb.w	r2, [sl]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	3201      	adds	r2, #1
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e7bd      	b.n	8006c64 <_dtoa_r+0x65c>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4b09      	ldr	r3, [pc, #36]	@ (8006d10 <_dtoa_r+0x708>)
 8006cec:	f7f9 fbf4 	bl	80004d8 <__aeabi_dmul>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	f7f9 fe56 	bl	80009a8 <__aeabi_dcmpeq>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f43f aebc 	beq.w	8006a7a <_dtoa_r+0x472>
 8006d02:	e6f1      	b.n	8006ae8 <_dtoa_r+0x4e0>
 8006d04:	08008dc0 	.word	0x08008dc0
 8006d08:	3fe00000 	.word	0x3fe00000
 8006d0c:	3ff00000 	.word	0x3ff00000
 8006d10:	40240000 	.word	0x40240000
 8006d14:	40140000 	.word	0x40140000
 8006d18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d1a:	2a00      	cmp	r2, #0
 8006d1c:	f000 80db 	beq.w	8006ed6 <_dtoa_r+0x8ce>
 8006d20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d22:	2a01      	cmp	r2, #1
 8006d24:	f300 80bf 	bgt.w	8006ea6 <_dtoa_r+0x89e>
 8006d28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d2a:	2a00      	cmp	r2, #0
 8006d2c:	f000 80b7 	beq.w	8006e9e <_dtoa_r+0x896>
 8006d30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d34:	4646      	mov	r6, r8
 8006d36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	441a      	add	r2, r3
 8006d3e:	4658      	mov	r0, fp
 8006d40:	4498      	add	r8, r3
 8006d42:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d44:	f000 fc1a 	bl	800757c <__i2b>
 8006d48:	4605      	mov	r5, r0
 8006d4a:	b15e      	cbz	r6, 8006d64 <_dtoa_r+0x75c>
 8006d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dd08      	ble.n	8006d64 <_dtoa_r+0x75c>
 8006d52:	42b3      	cmp	r3, r6
 8006d54:	bfa8      	it	ge
 8006d56:	4633      	movge	r3, r6
 8006d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d5a:	eba8 0803 	sub.w	r8, r8, r3
 8006d5e:	1af6      	subs	r6, r6, r3
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d66:	b1f3      	cbz	r3, 8006da6 <_dtoa_r+0x79e>
 8006d68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80b7 	beq.w	8006ede <_dtoa_r+0x8d6>
 8006d70:	b18c      	cbz	r4, 8006d96 <_dtoa_r+0x78e>
 8006d72:	4629      	mov	r1, r5
 8006d74:	4622      	mov	r2, r4
 8006d76:	4658      	mov	r0, fp
 8006d78:	f000 fcbe 	bl	80076f8 <__pow5mult>
 8006d7c:	464a      	mov	r2, r9
 8006d7e:	4601      	mov	r1, r0
 8006d80:	4605      	mov	r5, r0
 8006d82:	4658      	mov	r0, fp
 8006d84:	f000 fc10 	bl	80075a8 <__multiply>
 8006d88:	4649      	mov	r1, r9
 8006d8a:	9004      	str	r0, [sp, #16]
 8006d8c:	4658      	mov	r0, fp
 8006d8e:	f000 fb41 	bl	8007414 <_Bfree>
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	4699      	mov	r9, r3
 8006d96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d98:	1b1a      	subs	r2, r3, r4
 8006d9a:	d004      	beq.n	8006da6 <_dtoa_r+0x79e>
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4658      	mov	r0, fp
 8006da0:	f000 fcaa 	bl	80076f8 <__pow5mult>
 8006da4:	4681      	mov	r9, r0
 8006da6:	2101      	movs	r1, #1
 8006da8:	4658      	mov	r0, fp
 8006daa:	f000 fbe7 	bl	800757c <__i2b>
 8006dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006db0:	4604      	mov	r4, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 81c9 	beq.w	800714a <_dtoa_r+0xb42>
 8006db8:	461a      	mov	r2, r3
 8006dba:	4601      	mov	r1, r0
 8006dbc:	4658      	mov	r0, fp
 8006dbe:	f000 fc9b 	bl	80076f8 <__pow5mult>
 8006dc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	f300 808f 	bgt.w	8006eea <_dtoa_r+0x8e2>
 8006dcc:	9b02      	ldr	r3, [sp, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f040 8087 	bne.w	8006ee2 <_dtoa_r+0x8da>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 8083 	bne.w	8006ee6 <_dtoa_r+0x8de>
 8006de0:	9b03      	ldr	r3, [sp, #12]
 8006de2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006de6:	0d1b      	lsrs	r3, r3, #20
 8006de8:	051b      	lsls	r3, r3, #20
 8006dea:	b12b      	cbz	r3, 8006df8 <_dtoa_r+0x7f0>
 8006dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dee:	f108 0801 	add.w	r8, r8, #1
 8006df2:	3301      	adds	r3, #1
 8006df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006df6:	2301      	movs	r3, #1
 8006df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 81aa 	beq.w	8007156 <_dtoa_r+0xb4e>
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e08:	6918      	ldr	r0, [r3, #16]
 8006e0a:	f000 fb6b 	bl	80074e4 <__hi0bits>
 8006e0e:	f1c0 0020 	rsb	r0, r0, #32
 8006e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e14:	4418      	add	r0, r3
 8006e16:	f010 001f 	ands.w	r0, r0, #31
 8006e1a:	d071      	beq.n	8006f00 <_dtoa_r+0x8f8>
 8006e1c:	f1c0 0320 	rsb	r3, r0, #32
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	dd65      	ble.n	8006ef0 <_dtoa_r+0x8e8>
 8006e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e26:	f1c0 001c 	rsb	r0, r0, #28
 8006e2a:	4403      	add	r3, r0
 8006e2c:	4480      	add	r8, r0
 8006e2e:	4406      	add	r6, r0
 8006e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e32:	f1b8 0f00 	cmp.w	r8, #0
 8006e36:	dd05      	ble.n	8006e44 <_dtoa_r+0x83c>
 8006e38:	4649      	mov	r1, r9
 8006e3a:	4642      	mov	r2, r8
 8006e3c:	4658      	mov	r0, fp
 8006e3e:	f000 fcb5 	bl	80077ac <__lshift>
 8006e42:	4681      	mov	r9, r0
 8006e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	dd05      	ble.n	8006e56 <_dtoa_r+0x84e>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4658      	mov	r0, fp
 8006e50:	f000 fcac 	bl	80077ac <__lshift>
 8006e54:	4604      	mov	r4, r0
 8006e56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d053      	beq.n	8006f04 <_dtoa_r+0x8fc>
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f000 fd10 	bl	8007884 <__mcmp>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	da4d      	bge.n	8006f04 <_dtoa_r+0x8fc>
 8006e68:	1e7b      	subs	r3, r7, #1
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	220a      	movs	r2, #10
 8006e70:	2300      	movs	r3, #0
 8006e72:	4658      	mov	r0, fp
 8006e74:	f000 faf0 	bl	8007458 <__multadd>
 8006e78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e7a:	4681      	mov	r9, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 816c 	beq.w	800715a <_dtoa_r+0xb52>
 8006e82:	2300      	movs	r3, #0
 8006e84:	4629      	mov	r1, r5
 8006e86:	220a      	movs	r2, #10
 8006e88:	4658      	mov	r0, fp
 8006e8a:	f000 fae5 	bl	8007458 <__multadd>
 8006e8e:	9b08      	ldr	r3, [sp, #32]
 8006e90:	4605      	mov	r5, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dc61      	bgt.n	8006f5a <_dtoa_r+0x952>
 8006e96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	dc3b      	bgt.n	8006f14 <_dtoa_r+0x90c>
 8006e9c:	e05d      	b.n	8006f5a <_dtoa_r+0x952>
 8006e9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ea0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ea4:	e746      	b.n	8006d34 <_dtoa_r+0x72c>
 8006ea6:	9b07      	ldr	r3, [sp, #28]
 8006ea8:	1e5c      	subs	r4, r3, #1
 8006eaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	bfbf      	itttt	lt
 8006eb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006eb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006eb4:	1ae3      	sublt	r3, r4, r3
 8006eb6:	18d2      	addlt	r2, r2, r3
 8006eb8:	bfa8      	it	ge
 8006eba:	1b1c      	subge	r4, r3, r4
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	bfbe      	ittt	lt
 8006ec0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006ec2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006ec4:	2400      	movlt	r4, #0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfb5      	itete	lt
 8006eca:	eba8 0603 	sublt.w	r6, r8, r3
 8006ece:	4646      	movge	r6, r8
 8006ed0:	2300      	movlt	r3, #0
 8006ed2:	9b07      	ldrge	r3, [sp, #28]
 8006ed4:	e730      	b.n	8006d38 <_dtoa_r+0x730>
 8006ed6:	4646      	mov	r6, r8
 8006ed8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006eda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006edc:	e735      	b.n	8006d4a <_dtoa_r+0x742>
 8006ede:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ee0:	e75c      	b.n	8006d9c <_dtoa_r+0x794>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e788      	b.n	8006df8 <_dtoa_r+0x7f0>
 8006ee6:	9b02      	ldr	r3, [sp, #8]
 8006ee8:	e786      	b.n	8006df8 <_dtoa_r+0x7f0>
 8006eea:	2300      	movs	r3, #0
 8006eec:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eee:	e788      	b.n	8006e02 <_dtoa_r+0x7fa>
 8006ef0:	d09f      	beq.n	8006e32 <_dtoa_r+0x82a>
 8006ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ef4:	331c      	adds	r3, #28
 8006ef6:	441a      	add	r2, r3
 8006ef8:	4498      	add	r8, r3
 8006efa:	441e      	add	r6, r3
 8006efc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006efe:	e798      	b.n	8006e32 <_dtoa_r+0x82a>
 8006f00:	4603      	mov	r3, r0
 8006f02:	e7f6      	b.n	8006ef2 <_dtoa_r+0x8ea>
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	9704      	str	r7, [sp, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	dc20      	bgt.n	8006f4e <_dtoa_r+0x946>
 8006f0c:	9308      	str	r3, [sp, #32]
 8006f0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	dd1e      	ble.n	8006f52 <_dtoa_r+0x94a>
 8006f14:	9b08      	ldr	r3, [sp, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f47f aebc 	bne.w	8006c94 <_dtoa_r+0x68c>
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	2205      	movs	r2, #5
 8006f20:	4658      	mov	r0, fp
 8006f22:	f000 fa99 	bl	8007458 <__multadd>
 8006f26:	4601      	mov	r1, r0
 8006f28:	4604      	mov	r4, r0
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	f000 fcaa 	bl	8007884 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f77f aeaf 	ble.w	8006c94 <_dtoa_r+0x68c>
 8006f36:	2331      	movs	r3, #49	@ 0x31
 8006f38:	4656      	mov	r6, sl
 8006f3a:	f806 3b01 	strb.w	r3, [r6], #1
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	3301      	adds	r3, #1
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	e6aa      	b.n	8006c9c <_dtoa_r+0x694>
 8006f46:	9c07      	ldr	r4, [sp, #28]
 8006f48:	9704      	str	r7, [sp, #16]
 8006f4a:	4625      	mov	r5, r4
 8006f4c:	e7f3      	b.n	8006f36 <_dtoa_r+0x92e>
 8006f4e:	9b07      	ldr	r3, [sp, #28]
 8006f50:	9308      	str	r3, [sp, #32]
 8006f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8104 	beq.w	8007162 <_dtoa_r+0xb5a>
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	dd05      	ble.n	8006f6a <_dtoa_r+0x962>
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4632      	mov	r2, r6
 8006f62:	4658      	mov	r0, fp
 8006f64:	f000 fc22 	bl	80077ac <__lshift>
 8006f68:	4605      	mov	r5, r0
 8006f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d05a      	beq.n	8007026 <_dtoa_r+0xa1e>
 8006f70:	4658      	mov	r0, fp
 8006f72:	6869      	ldr	r1, [r5, #4]
 8006f74:	f000 fa0e 	bl	8007394 <_Balloc>
 8006f78:	4606      	mov	r6, r0
 8006f7a:	b928      	cbnz	r0, 8006f88 <_dtoa_r+0x980>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f82:	4b83      	ldr	r3, [pc, #524]	@ (8007190 <_dtoa_r+0xb88>)
 8006f84:	f7ff bb54 	b.w	8006630 <_dtoa_r+0x28>
 8006f88:	692a      	ldr	r2, [r5, #16]
 8006f8a:	f105 010c 	add.w	r1, r5, #12
 8006f8e:	3202      	adds	r2, #2
 8006f90:	0092      	lsls	r2, r2, #2
 8006f92:	300c      	adds	r0, #12
 8006f94:	f7ff faa1 	bl	80064da <memcpy>
 8006f98:	2201      	movs	r2, #1
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4658      	mov	r0, fp
 8006f9e:	f000 fc05 	bl	80077ac <__lshift>
 8006fa2:	462f      	mov	r7, r5
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	f10a 0301 	add.w	r3, sl, #1
 8006faa:	9307      	str	r3, [sp, #28]
 8006fac:	9b08      	ldr	r3, [sp, #32]
 8006fae:	4453      	add	r3, sl
 8006fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fb2:	9b02      	ldr	r3, [sp, #8]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fba:	9b07      	ldr	r3, [sp, #28]
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	4648      	mov	r0, r9
 8006fc2:	9302      	str	r3, [sp, #8]
 8006fc4:	f7ff fa97 	bl	80064f6 <quorem>
 8006fc8:	4639      	mov	r1, r7
 8006fca:	9008      	str	r0, [sp, #32]
 8006fcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006fd0:	4648      	mov	r0, r9
 8006fd2:	f000 fc57 	bl	8007884 <__mcmp>
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006fda:	4621      	mov	r1, r4
 8006fdc:	4658      	mov	r0, fp
 8006fde:	f000 fc6d 	bl	80078bc <__mdiff>
 8006fe2:	68c2      	ldr	r2, [r0, #12]
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	bb02      	cbnz	r2, 800702a <_dtoa_r+0xa22>
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4648      	mov	r0, r9
 8006fec:	f000 fc4a 	bl	8007884 <__mcmp>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4658      	mov	r0, fp
 8006ff6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ff8:	f000 fa0c 	bl	8007414 <_Bfree>
 8006ffc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ffe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007000:	9e07      	ldr	r6, [sp, #28]
 8007002:	ea43 0102 	orr.w	r1, r3, r2
 8007006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007008:	4319      	orrs	r1, r3
 800700a:	d110      	bne.n	800702e <_dtoa_r+0xa26>
 800700c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007010:	d029      	beq.n	8007066 <_dtoa_r+0xa5e>
 8007012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	dd02      	ble.n	800701e <_dtoa_r+0xa16>
 8007018:	9b08      	ldr	r3, [sp, #32]
 800701a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800701e:	9b02      	ldr	r3, [sp, #8]
 8007020:	f883 8000 	strb.w	r8, [r3]
 8007024:	e63b      	b.n	8006c9e <_dtoa_r+0x696>
 8007026:	4628      	mov	r0, r5
 8007028:	e7bb      	b.n	8006fa2 <_dtoa_r+0x99a>
 800702a:	2201      	movs	r2, #1
 800702c:	e7e1      	b.n	8006ff2 <_dtoa_r+0x9ea>
 800702e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007030:	2b00      	cmp	r3, #0
 8007032:	db04      	blt.n	800703e <_dtoa_r+0xa36>
 8007034:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007036:	430b      	orrs	r3, r1
 8007038:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800703a:	430b      	orrs	r3, r1
 800703c:	d120      	bne.n	8007080 <_dtoa_r+0xa78>
 800703e:	2a00      	cmp	r2, #0
 8007040:	dded      	ble.n	800701e <_dtoa_r+0xa16>
 8007042:	4649      	mov	r1, r9
 8007044:	2201      	movs	r2, #1
 8007046:	4658      	mov	r0, fp
 8007048:	f000 fbb0 	bl	80077ac <__lshift>
 800704c:	4621      	mov	r1, r4
 800704e:	4681      	mov	r9, r0
 8007050:	f000 fc18 	bl	8007884 <__mcmp>
 8007054:	2800      	cmp	r0, #0
 8007056:	dc03      	bgt.n	8007060 <_dtoa_r+0xa58>
 8007058:	d1e1      	bne.n	800701e <_dtoa_r+0xa16>
 800705a:	f018 0f01 	tst.w	r8, #1
 800705e:	d0de      	beq.n	800701e <_dtoa_r+0xa16>
 8007060:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007064:	d1d8      	bne.n	8007018 <_dtoa_r+0xa10>
 8007066:	2339      	movs	r3, #57	@ 0x39
 8007068:	9a02      	ldr	r2, [sp, #8]
 800706a:	7013      	strb	r3, [r2, #0]
 800706c:	4633      	mov	r3, r6
 800706e:	461e      	mov	r6, r3
 8007070:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007074:	3b01      	subs	r3, #1
 8007076:	2a39      	cmp	r2, #57	@ 0x39
 8007078:	d052      	beq.n	8007120 <_dtoa_r+0xb18>
 800707a:	3201      	adds	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	e60e      	b.n	8006c9e <_dtoa_r+0x696>
 8007080:	2a00      	cmp	r2, #0
 8007082:	dd07      	ble.n	8007094 <_dtoa_r+0xa8c>
 8007084:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007088:	d0ed      	beq.n	8007066 <_dtoa_r+0xa5e>
 800708a:	9a02      	ldr	r2, [sp, #8]
 800708c:	f108 0301 	add.w	r3, r8, #1
 8007090:	7013      	strb	r3, [r2, #0]
 8007092:	e604      	b.n	8006c9e <_dtoa_r+0x696>
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	9a07      	ldr	r2, [sp, #28]
 8007098:	f803 8c01 	strb.w	r8, [r3, #-1]
 800709c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800709e:	4293      	cmp	r3, r2
 80070a0:	d028      	beq.n	80070f4 <_dtoa_r+0xaec>
 80070a2:	4649      	mov	r1, r9
 80070a4:	2300      	movs	r3, #0
 80070a6:	220a      	movs	r2, #10
 80070a8:	4658      	mov	r0, fp
 80070aa:	f000 f9d5 	bl	8007458 <__multadd>
 80070ae:	42af      	cmp	r7, r5
 80070b0:	4681      	mov	r9, r0
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	f04f 020a 	mov.w	r2, #10
 80070ba:	4639      	mov	r1, r7
 80070bc:	4658      	mov	r0, fp
 80070be:	d107      	bne.n	80070d0 <_dtoa_r+0xac8>
 80070c0:	f000 f9ca 	bl	8007458 <__multadd>
 80070c4:	4607      	mov	r7, r0
 80070c6:	4605      	mov	r5, r0
 80070c8:	9b07      	ldr	r3, [sp, #28]
 80070ca:	3301      	adds	r3, #1
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	e774      	b.n	8006fba <_dtoa_r+0x9b2>
 80070d0:	f000 f9c2 	bl	8007458 <__multadd>
 80070d4:	4629      	mov	r1, r5
 80070d6:	4607      	mov	r7, r0
 80070d8:	2300      	movs	r3, #0
 80070da:	220a      	movs	r2, #10
 80070dc:	4658      	mov	r0, fp
 80070de:	f000 f9bb 	bl	8007458 <__multadd>
 80070e2:	4605      	mov	r5, r0
 80070e4:	e7f0      	b.n	80070c8 <_dtoa_r+0xac0>
 80070e6:	9b08      	ldr	r3, [sp, #32]
 80070e8:	2700      	movs	r7, #0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfcc      	ite	gt
 80070ee:	461e      	movgt	r6, r3
 80070f0:	2601      	movle	r6, #1
 80070f2:	4456      	add	r6, sl
 80070f4:	4649      	mov	r1, r9
 80070f6:	2201      	movs	r2, #1
 80070f8:	4658      	mov	r0, fp
 80070fa:	f000 fb57 	bl	80077ac <__lshift>
 80070fe:	4621      	mov	r1, r4
 8007100:	4681      	mov	r9, r0
 8007102:	f000 fbbf 	bl	8007884 <__mcmp>
 8007106:	2800      	cmp	r0, #0
 8007108:	dcb0      	bgt.n	800706c <_dtoa_r+0xa64>
 800710a:	d102      	bne.n	8007112 <_dtoa_r+0xb0a>
 800710c:	f018 0f01 	tst.w	r8, #1
 8007110:	d1ac      	bne.n	800706c <_dtoa_r+0xa64>
 8007112:	4633      	mov	r3, r6
 8007114:	461e      	mov	r6, r3
 8007116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800711a:	2a30      	cmp	r2, #48	@ 0x30
 800711c:	d0fa      	beq.n	8007114 <_dtoa_r+0xb0c>
 800711e:	e5be      	b.n	8006c9e <_dtoa_r+0x696>
 8007120:	459a      	cmp	sl, r3
 8007122:	d1a4      	bne.n	800706e <_dtoa_r+0xa66>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	3301      	adds	r3, #1
 8007128:	9304      	str	r3, [sp, #16]
 800712a:	2331      	movs	r3, #49	@ 0x31
 800712c:	f88a 3000 	strb.w	r3, [sl]
 8007130:	e5b5      	b.n	8006c9e <_dtoa_r+0x696>
 8007132:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007134:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007194 <_dtoa_r+0xb8c>
 8007138:	b11b      	cbz	r3, 8007142 <_dtoa_r+0xb3a>
 800713a:	f10a 0308 	add.w	r3, sl, #8
 800713e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	4650      	mov	r0, sl
 8007144:	b017      	add	sp, #92	@ 0x5c
 8007146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800714c:	2b01      	cmp	r3, #1
 800714e:	f77f ae3d 	ble.w	8006dcc <_dtoa_r+0x7c4>
 8007152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007154:	930a      	str	r3, [sp, #40]	@ 0x28
 8007156:	2001      	movs	r0, #1
 8007158:	e65b      	b.n	8006e12 <_dtoa_r+0x80a>
 800715a:	9b08      	ldr	r3, [sp, #32]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f77f aed6 	ble.w	8006f0e <_dtoa_r+0x906>
 8007162:	4656      	mov	r6, sl
 8007164:	4621      	mov	r1, r4
 8007166:	4648      	mov	r0, r9
 8007168:	f7ff f9c5 	bl	80064f6 <quorem>
 800716c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007170:	9b08      	ldr	r3, [sp, #32]
 8007172:	f806 8b01 	strb.w	r8, [r6], #1
 8007176:	eba6 020a 	sub.w	r2, r6, sl
 800717a:	4293      	cmp	r3, r2
 800717c:	ddb3      	ble.n	80070e6 <_dtoa_r+0xade>
 800717e:	4649      	mov	r1, r9
 8007180:	2300      	movs	r3, #0
 8007182:	220a      	movs	r2, #10
 8007184:	4658      	mov	r0, fp
 8007186:	f000 f967 	bl	8007458 <__multadd>
 800718a:	4681      	mov	r9, r0
 800718c:	e7ea      	b.n	8007164 <_dtoa_r+0xb5c>
 800718e:	bf00      	nop
 8007190:	08008d22 	.word	0x08008d22
 8007194:	08008ca6 	.word	0x08008ca6

08007198 <_free_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4605      	mov	r5, r0
 800719c:	2900      	cmp	r1, #0
 800719e:	d040      	beq.n	8007222 <_free_r+0x8a>
 80071a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a4:	1f0c      	subs	r4, r1, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bfb8      	it	lt
 80071aa:	18e4      	addlt	r4, r4, r3
 80071ac:	f000 f8e6 	bl	800737c <__malloc_lock>
 80071b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007224 <_free_r+0x8c>)
 80071b2:	6813      	ldr	r3, [r2, #0]
 80071b4:	b933      	cbnz	r3, 80071c4 <_free_r+0x2c>
 80071b6:	6063      	str	r3, [r4, #4]
 80071b8:	6014      	str	r4, [r2, #0]
 80071ba:	4628      	mov	r0, r5
 80071bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c0:	f000 b8e2 	b.w	8007388 <__malloc_unlock>
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d908      	bls.n	80071da <_free_r+0x42>
 80071c8:	6820      	ldr	r0, [r4, #0]
 80071ca:	1821      	adds	r1, r4, r0
 80071cc:	428b      	cmp	r3, r1
 80071ce:	bf01      	itttt	eq
 80071d0:	6819      	ldreq	r1, [r3, #0]
 80071d2:	685b      	ldreq	r3, [r3, #4]
 80071d4:	1809      	addeq	r1, r1, r0
 80071d6:	6021      	streq	r1, [r4, #0]
 80071d8:	e7ed      	b.n	80071b6 <_free_r+0x1e>
 80071da:	461a      	mov	r2, r3
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	b10b      	cbz	r3, 80071e4 <_free_r+0x4c>
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d9fa      	bls.n	80071da <_free_r+0x42>
 80071e4:	6811      	ldr	r1, [r2, #0]
 80071e6:	1850      	adds	r0, r2, r1
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d10b      	bne.n	8007204 <_free_r+0x6c>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	4401      	add	r1, r0
 80071f0:	1850      	adds	r0, r2, r1
 80071f2:	4283      	cmp	r3, r0
 80071f4:	6011      	str	r1, [r2, #0]
 80071f6:	d1e0      	bne.n	80071ba <_free_r+0x22>
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4408      	add	r0, r1
 80071fe:	6010      	str	r0, [r2, #0]
 8007200:	6053      	str	r3, [r2, #4]
 8007202:	e7da      	b.n	80071ba <_free_r+0x22>
 8007204:	d902      	bls.n	800720c <_free_r+0x74>
 8007206:	230c      	movs	r3, #12
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	e7d6      	b.n	80071ba <_free_r+0x22>
 800720c:	6820      	ldr	r0, [r4, #0]
 800720e:	1821      	adds	r1, r4, r0
 8007210:	428b      	cmp	r3, r1
 8007212:	bf01      	itttt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	1809      	addeq	r1, r1, r0
 800721a:	6021      	streq	r1, [r4, #0]
 800721c:	6063      	str	r3, [r4, #4]
 800721e:	6054      	str	r4, [r2, #4]
 8007220:	e7cb      	b.n	80071ba <_free_r+0x22>
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20000824 	.word	0x20000824

08007228 <malloc>:
 8007228:	4b02      	ldr	r3, [pc, #8]	@ (8007234 <malloc+0xc>)
 800722a:	4601      	mov	r1, r0
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	f000 b825 	b.w	800727c <_malloc_r>
 8007232:	bf00      	nop
 8007234:	20000018 	.word	0x20000018

08007238 <sbrk_aligned>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4e0f      	ldr	r6, [pc, #60]	@ (8007278 <sbrk_aligned+0x40>)
 800723c:	460c      	mov	r4, r1
 800723e:	6831      	ldr	r1, [r6, #0]
 8007240:	4605      	mov	r5, r0
 8007242:	b911      	cbnz	r1, 800724a <sbrk_aligned+0x12>
 8007244:	f001 f804 	bl	8008250 <_sbrk_r>
 8007248:	6030      	str	r0, [r6, #0]
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f000 ffff 	bl	8008250 <_sbrk_r>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	d103      	bne.n	800725e <sbrk_aligned+0x26>
 8007256:	f04f 34ff 	mov.w	r4, #4294967295
 800725a:	4620      	mov	r0, r4
 800725c:	bd70      	pop	{r4, r5, r6, pc}
 800725e:	1cc4      	adds	r4, r0, #3
 8007260:	f024 0403 	bic.w	r4, r4, #3
 8007264:	42a0      	cmp	r0, r4
 8007266:	d0f8      	beq.n	800725a <sbrk_aligned+0x22>
 8007268:	1a21      	subs	r1, r4, r0
 800726a:	4628      	mov	r0, r5
 800726c:	f000 fff0 	bl	8008250 <_sbrk_r>
 8007270:	3001      	adds	r0, #1
 8007272:	d1f2      	bne.n	800725a <sbrk_aligned+0x22>
 8007274:	e7ef      	b.n	8007256 <sbrk_aligned+0x1e>
 8007276:	bf00      	nop
 8007278:	20000820 	.word	0x20000820

0800727c <_malloc_r>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	1ccd      	adds	r5, r1, #3
 8007282:	f025 0503 	bic.w	r5, r5, #3
 8007286:	3508      	adds	r5, #8
 8007288:	2d0c      	cmp	r5, #12
 800728a:	bf38      	it	cc
 800728c:	250c      	movcc	r5, #12
 800728e:	2d00      	cmp	r5, #0
 8007290:	4606      	mov	r6, r0
 8007292:	db01      	blt.n	8007298 <_malloc_r+0x1c>
 8007294:	42a9      	cmp	r1, r5
 8007296:	d904      	bls.n	80072a2 <_malloc_r+0x26>
 8007298:	230c      	movs	r3, #12
 800729a:	6033      	str	r3, [r6, #0]
 800729c:	2000      	movs	r0, #0
 800729e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007378 <_malloc_r+0xfc>
 80072a6:	f000 f869 	bl	800737c <__malloc_lock>
 80072aa:	f8d8 3000 	ldr.w	r3, [r8]
 80072ae:	461c      	mov	r4, r3
 80072b0:	bb44      	cbnz	r4, 8007304 <_malloc_r+0x88>
 80072b2:	4629      	mov	r1, r5
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff ffbf 	bl	8007238 <sbrk_aligned>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	4604      	mov	r4, r0
 80072be:	d158      	bne.n	8007372 <_malloc_r+0xf6>
 80072c0:	f8d8 4000 	ldr.w	r4, [r8]
 80072c4:	4627      	mov	r7, r4
 80072c6:	2f00      	cmp	r7, #0
 80072c8:	d143      	bne.n	8007352 <_malloc_r+0xd6>
 80072ca:	2c00      	cmp	r4, #0
 80072cc:	d04b      	beq.n	8007366 <_malloc_r+0xea>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	4639      	mov	r1, r7
 80072d2:	4630      	mov	r0, r6
 80072d4:	eb04 0903 	add.w	r9, r4, r3
 80072d8:	f000 ffba 	bl	8008250 <_sbrk_r>
 80072dc:	4581      	cmp	r9, r0
 80072de:	d142      	bne.n	8007366 <_malloc_r+0xea>
 80072e0:	6821      	ldr	r1, [r4, #0]
 80072e2:	4630      	mov	r0, r6
 80072e4:	1a6d      	subs	r5, r5, r1
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7ff ffa6 	bl	8007238 <sbrk_aligned>
 80072ec:	3001      	adds	r0, #1
 80072ee:	d03a      	beq.n	8007366 <_malloc_r+0xea>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	442b      	add	r3, r5
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	f8d8 3000 	ldr.w	r3, [r8]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	bb62      	cbnz	r2, 8007358 <_malloc_r+0xdc>
 80072fe:	f8c8 7000 	str.w	r7, [r8]
 8007302:	e00f      	b.n	8007324 <_malloc_r+0xa8>
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	1b52      	subs	r2, r2, r5
 8007308:	d420      	bmi.n	800734c <_malloc_r+0xd0>
 800730a:	2a0b      	cmp	r2, #11
 800730c:	d917      	bls.n	800733e <_malloc_r+0xc2>
 800730e:	1961      	adds	r1, r4, r5
 8007310:	42a3      	cmp	r3, r4
 8007312:	6025      	str	r5, [r4, #0]
 8007314:	bf18      	it	ne
 8007316:	6059      	strne	r1, [r3, #4]
 8007318:	6863      	ldr	r3, [r4, #4]
 800731a:	bf08      	it	eq
 800731c:	f8c8 1000 	streq.w	r1, [r8]
 8007320:	5162      	str	r2, [r4, r5]
 8007322:	604b      	str	r3, [r1, #4]
 8007324:	4630      	mov	r0, r6
 8007326:	f000 f82f 	bl	8007388 <__malloc_unlock>
 800732a:	f104 000b 	add.w	r0, r4, #11
 800732e:	1d23      	adds	r3, r4, #4
 8007330:	f020 0007 	bic.w	r0, r0, #7
 8007334:	1ac2      	subs	r2, r0, r3
 8007336:	bf1c      	itt	ne
 8007338:	1a1b      	subne	r3, r3, r0
 800733a:	50a3      	strne	r3, [r4, r2]
 800733c:	e7af      	b.n	800729e <_malloc_r+0x22>
 800733e:	6862      	ldr	r2, [r4, #4]
 8007340:	42a3      	cmp	r3, r4
 8007342:	bf0c      	ite	eq
 8007344:	f8c8 2000 	streq.w	r2, [r8]
 8007348:	605a      	strne	r2, [r3, #4]
 800734a:	e7eb      	b.n	8007324 <_malloc_r+0xa8>
 800734c:	4623      	mov	r3, r4
 800734e:	6864      	ldr	r4, [r4, #4]
 8007350:	e7ae      	b.n	80072b0 <_malloc_r+0x34>
 8007352:	463c      	mov	r4, r7
 8007354:	687f      	ldr	r7, [r7, #4]
 8007356:	e7b6      	b.n	80072c6 <_malloc_r+0x4a>
 8007358:	461a      	mov	r2, r3
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	42a3      	cmp	r3, r4
 800735e:	d1fb      	bne.n	8007358 <_malloc_r+0xdc>
 8007360:	2300      	movs	r3, #0
 8007362:	6053      	str	r3, [r2, #4]
 8007364:	e7de      	b.n	8007324 <_malloc_r+0xa8>
 8007366:	230c      	movs	r3, #12
 8007368:	4630      	mov	r0, r6
 800736a:	6033      	str	r3, [r6, #0]
 800736c:	f000 f80c 	bl	8007388 <__malloc_unlock>
 8007370:	e794      	b.n	800729c <_malloc_r+0x20>
 8007372:	6005      	str	r5, [r0, #0]
 8007374:	e7d6      	b.n	8007324 <_malloc_r+0xa8>
 8007376:	bf00      	nop
 8007378:	20000824 	.word	0x20000824

0800737c <__malloc_lock>:
 800737c:	4801      	ldr	r0, [pc, #4]	@ (8007384 <__malloc_lock+0x8>)
 800737e:	f7ff b89c 	b.w	80064ba <__retarget_lock_acquire_recursive>
 8007382:	bf00      	nop
 8007384:	2000081c 	.word	0x2000081c

08007388 <__malloc_unlock>:
 8007388:	4801      	ldr	r0, [pc, #4]	@ (8007390 <__malloc_unlock+0x8>)
 800738a:	f7ff b897 	b.w	80064bc <__retarget_lock_release_recursive>
 800738e:	bf00      	nop
 8007390:	2000081c 	.word	0x2000081c

08007394 <_Balloc>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	69c6      	ldr	r6, [r0, #28]
 8007398:	4604      	mov	r4, r0
 800739a:	460d      	mov	r5, r1
 800739c:	b976      	cbnz	r6, 80073bc <_Balloc+0x28>
 800739e:	2010      	movs	r0, #16
 80073a0:	f7ff ff42 	bl	8007228 <malloc>
 80073a4:	4602      	mov	r2, r0
 80073a6:	61e0      	str	r0, [r4, #28]
 80073a8:	b920      	cbnz	r0, 80073b4 <_Balloc+0x20>
 80073aa:	216b      	movs	r1, #107	@ 0x6b
 80073ac:	4b17      	ldr	r3, [pc, #92]	@ (800740c <_Balloc+0x78>)
 80073ae:	4818      	ldr	r0, [pc, #96]	@ (8007410 <_Balloc+0x7c>)
 80073b0:	f000 ff5e 	bl	8008270 <__assert_func>
 80073b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073b8:	6006      	str	r6, [r0, #0]
 80073ba:	60c6      	str	r6, [r0, #12]
 80073bc:	69e6      	ldr	r6, [r4, #28]
 80073be:	68f3      	ldr	r3, [r6, #12]
 80073c0:	b183      	cbz	r3, 80073e4 <_Balloc+0x50>
 80073c2:	69e3      	ldr	r3, [r4, #28]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073ca:	b9b8      	cbnz	r0, 80073fc <_Balloc+0x68>
 80073cc:	2101      	movs	r1, #1
 80073ce:	fa01 f605 	lsl.w	r6, r1, r5
 80073d2:	1d72      	adds	r2, r6, #5
 80073d4:	4620      	mov	r0, r4
 80073d6:	0092      	lsls	r2, r2, #2
 80073d8:	f000 ff68 	bl	80082ac <_calloc_r>
 80073dc:	b160      	cbz	r0, 80073f8 <_Balloc+0x64>
 80073de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073e2:	e00e      	b.n	8007402 <_Balloc+0x6e>
 80073e4:	2221      	movs	r2, #33	@ 0x21
 80073e6:	2104      	movs	r1, #4
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 ff5f 	bl	80082ac <_calloc_r>
 80073ee:	69e3      	ldr	r3, [r4, #28]
 80073f0:	60f0      	str	r0, [r6, #12]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e4      	bne.n	80073c2 <_Balloc+0x2e>
 80073f8:	2000      	movs	r0, #0
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	6802      	ldr	r2, [r0, #0]
 80073fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007402:	2300      	movs	r3, #0
 8007404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007408:	e7f7      	b.n	80073fa <_Balloc+0x66>
 800740a:	bf00      	nop
 800740c:	08008cb3 	.word	0x08008cb3
 8007410:	08008d33 	.word	0x08008d33

08007414 <_Bfree>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	69c6      	ldr	r6, [r0, #28]
 8007418:	4605      	mov	r5, r0
 800741a:	460c      	mov	r4, r1
 800741c:	b976      	cbnz	r6, 800743c <_Bfree+0x28>
 800741e:	2010      	movs	r0, #16
 8007420:	f7ff ff02 	bl	8007228 <malloc>
 8007424:	4602      	mov	r2, r0
 8007426:	61e8      	str	r0, [r5, #28]
 8007428:	b920      	cbnz	r0, 8007434 <_Bfree+0x20>
 800742a:	218f      	movs	r1, #143	@ 0x8f
 800742c:	4b08      	ldr	r3, [pc, #32]	@ (8007450 <_Bfree+0x3c>)
 800742e:	4809      	ldr	r0, [pc, #36]	@ (8007454 <_Bfree+0x40>)
 8007430:	f000 ff1e 	bl	8008270 <__assert_func>
 8007434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007438:	6006      	str	r6, [r0, #0]
 800743a:	60c6      	str	r6, [r0, #12]
 800743c:	b13c      	cbz	r4, 800744e <_Bfree+0x3a>
 800743e:	69eb      	ldr	r3, [r5, #28]
 8007440:	6862      	ldr	r2, [r4, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007448:	6021      	str	r1, [r4, #0]
 800744a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	08008cb3 	.word	0x08008cb3
 8007454:	08008d33 	.word	0x08008d33

08007458 <__multadd>:
 8007458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745c:	4607      	mov	r7, r0
 800745e:	460c      	mov	r4, r1
 8007460:	461e      	mov	r6, r3
 8007462:	2000      	movs	r0, #0
 8007464:	690d      	ldr	r5, [r1, #16]
 8007466:	f101 0c14 	add.w	ip, r1, #20
 800746a:	f8dc 3000 	ldr.w	r3, [ip]
 800746e:	3001      	adds	r0, #1
 8007470:	b299      	uxth	r1, r3
 8007472:	fb02 6101 	mla	r1, r2, r1, r6
 8007476:	0c1e      	lsrs	r6, r3, #16
 8007478:	0c0b      	lsrs	r3, r1, #16
 800747a:	fb02 3306 	mla	r3, r2, r6, r3
 800747e:	b289      	uxth	r1, r1
 8007480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007484:	4285      	cmp	r5, r0
 8007486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800748a:	f84c 1b04 	str.w	r1, [ip], #4
 800748e:	dcec      	bgt.n	800746a <__multadd+0x12>
 8007490:	b30e      	cbz	r6, 80074d6 <__multadd+0x7e>
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	42ab      	cmp	r3, r5
 8007496:	dc19      	bgt.n	80074cc <__multadd+0x74>
 8007498:	6861      	ldr	r1, [r4, #4]
 800749a:	4638      	mov	r0, r7
 800749c:	3101      	adds	r1, #1
 800749e:	f7ff ff79 	bl	8007394 <_Balloc>
 80074a2:	4680      	mov	r8, r0
 80074a4:	b928      	cbnz	r0, 80074b2 <__multadd+0x5a>
 80074a6:	4602      	mov	r2, r0
 80074a8:	21ba      	movs	r1, #186	@ 0xba
 80074aa:	4b0c      	ldr	r3, [pc, #48]	@ (80074dc <__multadd+0x84>)
 80074ac:	480c      	ldr	r0, [pc, #48]	@ (80074e0 <__multadd+0x88>)
 80074ae:	f000 fedf 	bl	8008270 <__assert_func>
 80074b2:	6922      	ldr	r2, [r4, #16]
 80074b4:	f104 010c 	add.w	r1, r4, #12
 80074b8:	3202      	adds	r2, #2
 80074ba:	0092      	lsls	r2, r2, #2
 80074bc:	300c      	adds	r0, #12
 80074be:	f7ff f80c 	bl	80064da <memcpy>
 80074c2:	4621      	mov	r1, r4
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff ffa5 	bl	8007414 <_Bfree>
 80074ca:	4644      	mov	r4, r8
 80074cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074d0:	3501      	adds	r5, #1
 80074d2:	615e      	str	r6, [r3, #20]
 80074d4:	6125      	str	r5, [r4, #16]
 80074d6:	4620      	mov	r0, r4
 80074d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074dc:	08008d22 	.word	0x08008d22
 80074e0:	08008d33 	.word	0x08008d33

080074e4 <__hi0bits>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80074ea:	bf3a      	itte	cc
 80074ec:	0403      	lslcc	r3, r0, #16
 80074ee:	2010      	movcc	r0, #16
 80074f0:	2000      	movcs	r0, #0
 80074f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074f6:	bf3c      	itt	cc
 80074f8:	021b      	lslcc	r3, r3, #8
 80074fa:	3008      	addcc	r0, #8
 80074fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007500:	bf3c      	itt	cc
 8007502:	011b      	lslcc	r3, r3, #4
 8007504:	3004      	addcc	r0, #4
 8007506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800750a:	bf3c      	itt	cc
 800750c:	009b      	lslcc	r3, r3, #2
 800750e:	3002      	addcc	r0, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	db05      	blt.n	8007520 <__hi0bits+0x3c>
 8007514:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007518:	f100 0001 	add.w	r0, r0, #1
 800751c:	bf08      	it	eq
 800751e:	2020      	moveq	r0, #32
 8007520:	4770      	bx	lr

08007522 <__lo0bits>:
 8007522:	6803      	ldr	r3, [r0, #0]
 8007524:	4602      	mov	r2, r0
 8007526:	f013 0007 	ands.w	r0, r3, #7
 800752a:	d00b      	beq.n	8007544 <__lo0bits+0x22>
 800752c:	07d9      	lsls	r1, r3, #31
 800752e:	d421      	bmi.n	8007574 <__lo0bits+0x52>
 8007530:	0798      	lsls	r0, r3, #30
 8007532:	bf49      	itett	mi
 8007534:	085b      	lsrmi	r3, r3, #1
 8007536:	089b      	lsrpl	r3, r3, #2
 8007538:	2001      	movmi	r0, #1
 800753a:	6013      	strmi	r3, [r2, #0]
 800753c:	bf5c      	itt	pl
 800753e:	2002      	movpl	r0, #2
 8007540:	6013      	strpl	r3, [r2, #0]
 8007542:	4770      	bx	lr
 8007544:	b299      	uxth	r1, r3
 8007546:	b909      	cbnz	r1, 800754c <__lo0bits+0x2a>
 8007548:	2010      	movs	r0, #16
 800754a:	0c1b      	lsrs	r3, r3, #16
 800754c:	b2d9      	uxtb	r1, r3
 800754e:	b909      	cbnz	r1, 8007554 <__lo0bits+0x32>
 8007550:	3008      	adds	r0, #8
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	0719      	lsls	r1, r3, #28
 8007556:	bf04      	itt	eq
 8007558:	091b      	lsreq	r3, r3, #4
 800755a:	3004      	addeq	r0, #4
 800755c:	0799      	lsls	r1, r3, #30
 800755e:	bf04      	itt	eq
 8007560:	089b      	lsreq	r3, r3, #2
 8007562:	3002      	addeq	r0, #2
 8007564:	07d9      	lsls	r1, r3, #31
 8007566:	d403      	bmi.n	8007570 <__lo0bits+0x4e>
 8007568:	085b      	lsrs	r3, r3, #1
 800756a:	f100 0001 	add.w	r0, r0, #1
 800756e:	d003      	beq.n	8007578 <__lo0bits+0x56>
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	4770      	bx	lr
 8007574:	2000      	movs	r0, #0
 8007576:	4770      	bx	lr
 8007578:	2020      	movs	r0, #32
 800757a:	4770      	bx	lr

0800757c <__i2b>:
 800757c:	b510      	push	{r4, lr}
 800757e:	460c      	mov	r4, r1
 8007580:	2101      	movs	r1, #1
 8007582:	f7ff ff07 	bl	8007394 <_Balloc>
 8007586:	4602      	mov	r2, r0
 8007588:	b928      	cbnz	r0, 8007596 <__i2b+0x1a>
 800758a:	f240 1145 	movw	r1, #325	@ 0x145
 800758e:	4b04      	ldr	r3, [pc, #16]	@ (80075a0 <__i2b+0x24>)
 8007590:	4804      	ldr	r0, [pc, #16]	@ (80075a4 <__i2b+0x28>)
 8007592:	f000 fe6d 	bl	8008270 <__assert_func>
 8007596:	2301      	movs	r3, #1
 8007598:	6144      	str	r4, [r0, #20]
 800759a:	6103      	str	r3, [r0, #16]
 800759c:	bd10      	pop	{r4, pc}
 800759e:	bf00      	nop
 80075a0:	08008d22 	.word	0x08008d22
 80075a4:	08008d33 	.word	0x08008d33

080075a8 <__multiply>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	4614      	mov	r4, r2
 80075ae:	690a      	ldr	r2, [r1, #16]
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	460f      	mov	r7, r1
 80075b4:	429a      	cmp	r2, r3
 80075b6:	bfa2      	ittt	ge
 80075b8:	4623      	movge	r3, r4
 80075ba:	460c      	movge	r4, r1
 80075bc:	461f      	movge	r7, r3
 80075be:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80075c2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80075c6:	68a3      	ldr	r3, [r4, #8]
 80075c8:	6861      	ldr	r1, [r4, #4]
 80075ca:	eb0a 0609 	add.w	r6, sl, r9
 80075ce:	42b3      	cmp	r3, r6
 80075d0:	b085      	sub	sp, #20
 80075d2:	bfb8      	it	lt
 80075d4:	3101      	addlt	r1, #1
 80075d6:	f7ff fedd 	bl	8007394 <_Balloc>
 80075da:	b930      	cbnz	r0, 80075ea <__multiply+0x42>
 80075dc:	4602      	mov	r2, r0
 80075de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80075e2:	4b43      	ldr	r3, [pc, #268]	@ (80076f0 <__multiply+0x148>)
 80075e4:	4843      	ldr	r0, [pc, #268]	@ (80076f4 <__multiply+0x14c>)
 80075e6:	f000 fe43 	bl	8008270 <__assert_func>
 80075ea:	f100 0514 	add.w	r5, r0, #20
 80075ee:	462b      	mov	r3, r5
 80075f0:	2200      	movs	r2, #0
 80075f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075f6:	4543      	cmp	r3, r8
 80075f8:	d321      	bcc.n	800763e <__multiply+0x96>
 80075fa:	f107 0114 	add.w	r1, r7, #20
 80075fe:	f104 0214 	add.w	r2, r4, #20
 8007602:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007606:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800760a:	9302      	str	r3, [sp, #8]
 800760c:	1b13      	subs	r3, r2, r4
 800760e:	3b15      	subs	r3, #21
 8007610:	f023 0303 	bic.w	r3, r3, #3
 8007614:	3304      	adds	r3, #4
 8007616:	f104 0715 	add.w	r7, r4, #21
 800761a:	42ba      	cmp	r2, r7
 800761c:	bf38      	it	cc
 800761e:	2304      	movcc	r3, #4
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	9b02      	ldr	r3, [sp, #8]
 8007624:	9103      	str	r1, [sp, #12]
 8007626:	428b      	cmp	r3, r1
 8007628:	d80c      	bhi.n	8007644 <__multiply+0x9c>
 800762a:	2e00      	cmp	r6, #0
 800762c:	dd03      	ble.n	8007636 <__multiply+0x8e>
 800762e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007632:	2b00      	cmp	r3, #0
 8007634:	d05a      	beq.n	80076ec <__multiply+0x144>
 8007636:	6106      	str	r6, [r0, #16]
 8007638:	b005      	add	sp, #20
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763e:	f843 2b04 	str.w	r2, [r3], #4
 8007642:	e7d8      	b.n	80075f6 <__multiply+0x4e>
 8007644:	f8b1 a000 	ldrh.w	sl, [r1]
 8007648:	f1ba 0f00 	cmp.w	sl, #0
 800764c:	d023      	beq.n	8007696 <__multiply+0xee>
 800764e:	46a9      	mov	r9, r5
 8007650:	f04f 0c00 	mov.w	ip, #0
 8007654:	f104 0e14 	add.w	lr, r4, #20
 8007658:	f85e 7b04 	ldr.w	r7, [lr], #4
 800765c:	f8d9 3000 	ldr.w	r3, [r9]
 8007660:	fa1f fb87 	uxth.w	fp, r7
 8007664:	b29b      	uxth	r3, r3
 8007666:	fb0a 330b 	mla	r3, sl, fp, r3
 800766a:	4463      	add	r3, ip
 800766c:	f8d9 c000 	ldr.w	ip, [r9]
 8007670:	0c3f      	lsrs	r7, r7, #16
 8007672:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007676:	fb0a c707 	mla	r7, sl, r7, ip
 800767a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007684:	4572      	cmp	r2, lr
 8007686:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800768a:	f849 3b04 	str.w	r3, [r9], #4
 800768e:	d8e3      	bhi.n	8007658 <__multiply+0xb0>
 8007690:	9b01      	ldr	r3, [sp, #4]
 8007692:	f845 c003 	str.w	ip, [r5, r3]
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	3104      	adds	r1, #4
 800769a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800769e:	f1b9 0f00 	cmp.w	r9, #0
 80076a2:	d021      	beq.n	80076e8 <__multiply+0x140>
 80076a4:	46ae      	mov	lr, r5
 80076a6:	f04f 0a00 	mov.w	sl, #0
 80076aa:	682b      	ldr	r3, [r5, #0]
 80076ac:	f104 0c14 	add.w	ip, r4, #20
 80076b0:	f8bc b000 	ldrh.w	fp, [ip]
 80076b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	fb09 770b 	mla	r7, r9, fp, r7
 80076be:	4457      	add	r7, sl
 80076c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076c4:	f84e 3b04 	str.w	r3, [lr], #4
 80076c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076d0:	f8be 3000 	ldrh.w	r3, [lr]
 80076d4:	4562      	cmp	r2, ip
 80076d6:	fb09 330a 	mla	r3, r9, sl, r3
 80076da:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80076de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076e2:	d8e5      	bhi.n	80076b0 <__multiply+0x108>
 80076e4:	9f01      	ldr	r7, [sp, #4]
 80076e6:	51eb      	str	r3, [r5, r7]
 80076e8:	3504      	adds	r5, #4
 80076ea:	e79a      	b.n	8007622 <__multiply+0x7a>
 80076ec:	3e01      	subs	r6, #1
 80076ee:	e79c      	b.n	800762a <__multiply+0x82>
 80076f0:	08008d22 	.word	0x08008d22
 80076f4:	08008d33 	.word	0x08008d33

080076f8 <__pow5mult>:
 80076f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076fc:	4615      	mov	r5, r2
 80076fe:	f012 0203 	ands.w	r2, r2, #3
 8007702:	4607      	mov	r7, r0
 8007704:	460e      	mov	r6, r1
 8007706:	d007      	beq.n	8007718 <__pow5mult+0x20>
 8007708:	4c25      	ldr	r4, [pc, #148]	@ (80077a0 <__pow5mult+0xa8>)
 800770a:	3a01      	subs	r2, #1
 800770c:	2300      	movs	r3, #0
 800770e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007712:	f7ff fea1 	bl	8007458 <__multadd>
 8007716:	4606      	mov	r6, r0
 8007718:	10ad      	asrs	r5, r5, #2
 800771a:	d03d      	beq.n	8007798 <__pow5mult+0xa0>
 800771c:	69fc      	ldr	r4, [r7, #28]
 800771e:	b97c      	cbnz	r4, 8007740 <__pow5mult+0x48>
 8007720:	2010      	movs	r0, #16
 8007722:	f7ff fd81 	bl	8007228 <malloc>
 8007726:	4602      	mov	r2, r0
 8007728:	61f8      	str	r0, [r7, #28]
 800772a:	b928      	cbnz	r0, 8007738 <__pow5mult+0x40>
 800772c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007730:	4b1c      	ldr	r3, [pc, #112]	@ (80077a4 <__pow5mult+0xac>)
 8007732:	481d      	ldr	r0, [pc, #116]	@ (80077a8 <__pow5mult+0xb0>)
 8007734:	f000 fd9c 	bl	8008270 <__assert_func>
 8007738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800773c:	6004      	str	r4, [r0, #0]
 800773e:	60c4      	str	r4, [r0, #12]
 8007740:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007748:	b94c      	cbnz	r4, 800775e <__pow5mult+0x66>
 800774a:	f240 2171 	movw	r1, #625	@ 0x271
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ff14 	bl	800757c <__i2b>
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	f8c8 0008 	str.w	r0, [r8, #8]
 800775c:	6003      	str	r3, [r0, #0]
 800775e:	f04f 0900 	mov.w	r9, #0
 8007762:	07eb      	lsls	r3, r5, #31
 8007764:	d50a      	bpl.n	800777c <__pow5mult+0x84>
 8007766:	4631      	mov	r1, r6
 8007768:	4622      	mov	r2, r4
 800776a:	4638      	mov	r0, r7
 800776c:	f7ff ff1c 	bl	80075a8 <__multiply>
 8007770:	4680      	mov	r8, r0
 8007772:	4631      	mov	r1, r6
 8007774:	4638      	mov	r0, r7
 8007776:	f7ff fe4d 	bl	8007414 <_Bfree>
 800777a:	4646      	mov	r6, r8
 800777c:	106d      	asrs	r5, r5, #1
 800777e:	d00b      	beq.n	8007798 <__pow5mult+0xa0>
 8007780:	6820      	ldr	r0, [r4, #0]
 8007782:	b938      	cbnz	r0, 8007794 <__pow5mult+0x9c>
 8007784:	4622      	mov	r2, r4
 8007786:	4621      	mov	r1, r4
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ff0d 	bl	80075a8 <__multiply>
 800778e:	6020      	str	r0, [r4, #0]
 8007790:	f8c0 9000 	str.w	r9, [r0]
 8007794:	4604      	mov	r4, r0
 8007796:	e7e4      	b.n	8007762 <__pow5mult+0x6a>
 8007798:	4630      	mov	r0, r6
 800779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779e:	bf00      	nop
 80077a0:	08008d8c 	.word	0x08008d8c
 80077a4:	08008cb3 	.word	0x08008cb3
 80077a8:	08008d33 	.word	0x08008d33

080077ac <__lshift>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	460c      	mov	r4, r1
 80077b2:	4607      	mov	r7, r0
 80077b4:	4691      	mov	r9, r2
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	6849      	ldr	r1, [r1, #4]
 80077ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077c4:	f108 0601 	add.w	r6, r8, #1
 80077c8:	42b3      	cmp	r3, r6
 80077ca:	db0b      	blt.n	80077e4 <__lshift+0x38>
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff fde1 	bl	8007394 <_Balloc>
 80077d2:	4605      	mov	r5, r0
 80077d4:	b948      	cbnz	r0, 80077ea <__lshift+0x3e>
 80077d6:	4602      	mov	r2, r0
 80077d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80077dc:	4b27      	ldr	r3, [pc, #156]	@ (800787c <__lshift+0xd0>)
 80077de:	4828      	ldr	r0, [pc, #160]	@ (8007880 <__lshift+0xd4>)
 80077e0:	f000 fd46 	bl	8008270 <__assert_func>
 80077e4:	3101      	adds	r1, #1
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	e7ee      	b.n	80077c8 <__lshift+0x1c>
 80077ea:	2300      	movs	r3, #0
 80077ec:	f100 0114 	add.w	r1, r0, #20
 80077f0:	f100 0210 	add.w	r2, r0, #16
 80077f4:	4618      	mov	r0, r3
 80077f6:	4553      	cmp	r3, sl
 80077f8:	db33      	blt.n	8007862 <__lshift+0xb6>
 80077fa:	6920      	ldr	r0, [r4, #16]
 80077fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007800:	f104 0314 	add.w	r3, r4, #20
 8007804:	f019 091f 	ands.w	r9, r9, #31
 8007808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800780c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007810:	d02b      	beq.n	800786a <__lshift+0xbe>
 8007812:	468a      	mov	sl, r1
 8007814:	2200      	movs	r2, #0
 8007816:	f1c9 0e20 	rsb	lr, r9, #32
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	fa00 f009 	lsl.w	r0, r0, r9
 8007820:	4310      	orrs	r0, r2
 8007822:	f84a 0b04 	str.w	r0, [sl], #4
 8007826:	f853 2b04 	ldr.w	r2, [r3], #4
 800782a:	459c      	cmp	ip, r3
 800782c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007830:	d8f3      	bhi.n	800781a <__lshift+0x6e>
 8007832:	ebac 0304 	sub.w	r3, ip, r4
 8007836:	3b15      	subs	r3, #21
 8007838:	f023 0303 	bic.w	r3, r3, #3
 800783c:	3304      	adds	r3, #4
 800783e:	f104 0015 	add.w	r0, r4, #21
 8007842:	4584      	cmp	ip, r0
 8007844:	bf38      	it	cc
 8007846:	2304      	movcc	r3, #4
 8007848:	50ca      	str	r2, [r1, r3]
 800784a:	b10a      	cbz	r2, 8007850 <__lshift+0xa4>
 800784c:	f108 0602 	add.w	r6, r8, #2
 8007850:	3e01      	subs	r6, #1
 8007852:	4638      	mov	r0, r7
 8007854:	4621      	mov	r1, r4
 8007856:	612e      	str	r6, [r5, #16]
 8007858:	f7ff fddc 	bl	8007414 <_Bfree>
 800785c:	4628      	mov	r0, r5
 800785e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007862:	f842 0f04 	str.w	r0, [r2, #4]!
 8007866:	3301      	adds	r3, #1
 8007868:	e7c5      	b.n	80077f6 <__lshift+0x4a>
 800786a:	3904      	subs	r1, #4
 800786c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007870:	459c      	cmp	ip, r3
 8007872:	f841 2f04 	str.w	r2, [r1, #4]!
 8007876:	d8f9      	bhi.n	800786c <__lshift+0xc0>
 8007878:	e7ea      	b.n	8007850 <__lshift+0xa4>
 800787a:	bf00      	nop
 800787c:	08008d22 	.word	0x08008d22
 8007880:	08008d33 	.word	0x08008d33

08007884 <__mcmp>:
 8007884:	4603      	mov	r3, r0
 8007886:	690a      	ldr	r2, [r1, #16]
 8007888:	6900      	ldr	r0, [r0, #16]
 800788a:	b530      	push	{r4, r5, lr}
 800788c:	1a80      	subs	r0, r0, r2
 800788e:	d10e      	bne.n	80078ae <__mcmp+0x2a>
 8007890:	3314      	adds	r3, #20
 8007892:	3114      	adds	r1, #20
 8007894:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007898:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800789c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078a4:	4295      	cmp	r5, r2
 80078a6:	d003      	beq.n	80078b0 <__mcmp+0x2c>
 80078a8:	d205      	bcs.n	80078b6 <__mcmp+0x32>
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	bd30      	pop	{r4, r5, pc}
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	d3f3      	bcc.n	800789c <__mcmp+0x18>
 80078b4:	e7fb      	b.n	80078ae <__mcmp+0x2a>
 80078b6:	2001      	movs	r0, #1
 80078b8:	e7f9      	b.n	80078ae <__mcmp+0x2a>
	...

080078bc <__mdiff>:
 80078bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	4689      	mov	r9, r1
 80078c2:	4606      	mov	r6, r0
 80078c4:	4611      	mov	r1, r2
 80078c6:	4648      	mov	r0, r9
 80078c8:	4614      	mov	r4, r2
 80078ca:	f7ff ffdb 	bl	8007884 <__mcmp>
 80078ce:	1e05      	subs	r5, r0, #0
 80078d0:	d112      	bne.n	80078f8 <__mdiff+0x3c>
 80078d2:	4629      	mov	r1, r5
 80078d4:	4630      	mov	r0, r6
 80078d6:	f7ff fd5d 	bl	8007394 <_Balloc>
 80078da:	4602      	mov	r2, r0
 80078dc:	b928      	cbnz	r0, 80078ea <__mdiff+0x2e>
 80078de:	f240 2137 	movw	r1, #567	@ 0x237
 80078e2:	4b3e      	ldr	r3, [pc, #248]	@ (80079dc <__mdiff+0x120>)
 80078e4:	483e      	ldr	r0, [pc, #248]	@ (80079e0 <__mdiff+0x124>)
 80078e6:	f000 fcc3 	bl	8008270 <__assert_func>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078f0:	4610      	mov	r0, r2
 80078f2:	b003      	add	sp, #12
 80078f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f8:	bfbc      	itt	lt
 80078fa:	464b      	movlt	r3, r9
 80078fc:	46a1      	movlt	r9, r4
 80078fe:	4630      	mov	r0, r6
 8007900:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007904:	bfba      	itte	lt
 8007906:	461c      	movlt	r4, r3
 8007908:	2501      	movlt	r5, #1
 800790a:	2500      	movge	r5, #0
 800790c:	f7ff fd42 	bl	8007394 <_Balloc>
 8007910:	4602      	mov	r2, r0
 8007912:	b918      	cbnz	r0, 800791c <__mdiff+0x60>
 8007914:	f240 2145 	movw	r1, #581	@ 0x245
 8007918:	4b30      	ldr	r3, [pc, #192]	@ (80079dc <__mdiff+0x120>)
 800791a:	e7e3      	b.n	80078e4 <__mdiff+0x28>
 800791c:	f100 0b14 	add.w	fp, r0, #20
 8007920:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007924:	f109 0310 	add.w	r3, r9, #16
 8007928:	60c5      	str	r5, [r0, #12]
 800792a:	f04f 0c00 	mov.w	ip, #0
 800792e:	f109 0514 	add.w	r5, r9, #20
 8007932:	46d9      	mov	r9, fp
 8007934:	6926      	ldr	r6, [r4, #16]
 8007936:	f104 0e14 	add.w	lr, r4, #20
 800793a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800793e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	9b01      	ldr	r3, [sp, #4]
 8007946:	f85e 0b04 	ldr.w	r0, [lr], #4
 800794a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800794e:	b281      	uxth	r1, r0
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	fa1f f38a 	uxth.w	r3, sl
 8007956:	1a5b      	subs	r3, r3, r1
 8007958:	0c00      	lsrs	r0, r0, #16
 800795a:	4463      	add	r3, ip
 800795c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007960:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007964:	b29b      	uxth	r3, r3
 8007966:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800796a:	4576      	cmp	r6, lr
 800796c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007970:	f849 3b04 	str.w	r3, [r9], #4
 8007974:	d8e6      	bhi.n	8007944 <__mdiff+0x88>
 8007976:	1b33      	subs	r3, r6, r4
 8007978:	3b15      	subs	r3, #21
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	3415      	adds	r4, #21
 8007980:	3304      	adds	r3, #4
 8007982:	42a6      	cmp	r6, r4
 8007984:	bf38      	it	cc
 8007986:	2304      	movcc	r3, #4
 8007988:	441d      	add	r5, r3
 800798a:	445b      	add	r3, fp
 800798c:	461e      	mov	r6, r3
 800798e:	462c      	mov	r4, r5
 8007990:	4544      	cmp	r4, r8
 8007992:	d30e      	bcc.n	80079b2 <__mdiff+0xf6>
 8007994:	f108 0103 	add.w	r1, r8, #3
 8007998:	1b49      	subs	r1, r1, r5
 800799a:	f021 0103 	bic.w	r1, r1, #3
 800799e:	3d03      	subs	r5, #3
 80079a0:	45a8      	cmp	r8, r5
 80079a2:	bf38      	it	cc
 80079a4:	2100      	movcc	r1, #0
 80079a6:	440b      	add	r3, r1
 80079a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079ac:	b199      	cbz	r1, 80079d6 <__mdiff+0x11a>
 80079ae:	6117      	str	r7, [r2, #16]
 80079b0:	e79e      	b.n	80078f0 <__mdiff+0x34>
 80079b2:	46e6      	mov	lr, ip
 80079b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80079b8:	fa1f fc81 	uxth.w	ip, r1
 80079bc:	44f4      	add	ip, lr
 80079be:	0c08      	lsrs	r0, r1, #16
 80079c0:	4471      	add	r1, lr
 80079c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079c6:	b289      	uxth	r1, r1
 80079c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079d0:	f846 1b04 	str.w	r1, [r6], #4
 80079d4:	e7dc      	b.n	8007990 <__mdiff+0xd4>
 80079d6:	3f01      	subs	r7, #1
 80079d8:	e7e6      	b.n	80079a8 <__mdiff+0xec>
 80079da:	bf00      	nop
 80079dc:	08008d22 	.word	0x08008d22
 80079e0:	08008d33 	.word	0x08008d33

080079e4 <__d2b>:
 80079e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80079e8:	2101      	movs	r1, #1
 80079ea:	4690      	mov	r8, r2
 80079ec:	4699      	mov	r9, r3
 80079ee:	9e08      	ldr	r6, [sp, #32]
 80079f0:	f7ff fcd0 	bl	8007394 <_Balloc>
 80079f4:	4604      	mov	r4, r0
 80079f6:	b930      	cbnz	r0, 8007a06 <__d2b+0x22>
 80079f8:	4602      	mov	r2, r0
 80079fa:	f240 310f 	movw	r1, #783	@ 0x30f
 80079fe:	4b23      	ldr	r3, [pc, #140]	@ (8007a8c <__d2b+0xa8>)
 8007a00:	4823      	ldr	r0, [pc, #140]	@ (8007a90 <__d2b+0xac>)
 8007a02:	f000 fc35 	bl	8008270 <__assert_func>
 8007a06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a0e:	b10d      	cbz	r5, 8007a14 <__d2b+0x30>
 8007a10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	f1b8 0300 	subs.w	r3, r8, #0
 8007a1a:	d024      	beq.n	8007a66 <__d2b+0x82>
 8007a1c:	4668      	mov	r0, sp
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	f7ff fd7f 	bl	8007522 <__lo0bits>
 8007a24:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a28:	b1d8      	cbz	r0, 8007a62 <__d2b+0x7e>
 8007a2a:	f1c0 0320 	rsb	r3, r0, #32
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	430b      	orrs	r3, r1
 8007a34:	40c2      	lsrs	r2, r0
 8007a36:	6163      	str	r3, [r4, #20]
 8007a38:	9201      	str	r2, [sp, #4]
 8007a3a:	9b01      	ldr	r3, [sp, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bf0c      	ite	eq
 8007a40:	2201      	moveq	r2, #1
 8007a42:	2202      	movne	r2, #2
 8007a44:	61a3      	str	r3, [r4, #24]
 8007a46:	6122      	str	r2, [r4, #16]
 8007a48:	b1ad      	cbz	r5, 8007a76 <__d2b+0x92>
 8007a4a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a4e:	4405      	add	r5, r0
 8007a50:	6035      	str	r5, [r6, #0]
 8007a52:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a58:	6018      	str	r0, [r3, #0]
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	b002      	add	sp, #8
 8007a5e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007a62:	6161      	str	r1, [r4, #20]
 8007a64:	e7e9      	b.n	8007a3a <__d2b+0x56>
 8007a66:	a801      	add	r0, sp, #4
 8007a68:	f7ff fd5b 	bl	8007522 <__lo0bits>
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	6163      	str	r3, [r4, #20]
 8007a72:	3020      	adds	r0, #32
 8007a74:	e7e7      	b.n	8007a46 <__d2b+0x62>
 8007a76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a7e:	6030      	str	r0, [r6, #0]
 8007a80:	6918      	ldr	r0, [r3, #16]
 8007a82:	f7ff fd2f 	bl	80074e4 <__hi0bits>
 8007a86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a8a:	e7e4      	b.n	8007a56 <__d2b+0x72>
 8007a8c:	08008d22 	.word	0x08008d22
 8007a90:	08008d33 	.word	0x08008d33

08007a94 <__ssputs_r>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	461f      	mov	r7, r3
 8007a9a:	688e      	ldr	r6, [r1, #8]
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	42be      	cmp	r6, r7
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	4690      	mov	r8, r2
 8007aa4:	680b      	ldr	r3, [r1, #0]
 8007aa6:	d82d      	bhi.n	8007b04 <__ssputs_r+0x70>
 8007aa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007aac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ab0:	d026      	beq.n	8007b00 <__ssputs_r+0x6c>
 8007ab2:	6965      	ldr	r5, [r4, #20]
 8007ab4:	6909      	ldr	r1, [r1, #16]
 8007ab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aba:	eba3 0901 	sub.w	r9, r3, r1
 8007abe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ac2:	1c7b      	adds	r3, r7, #1
 8007ac4:	444b      	add	r3, r9
 8007ac6:	106d      	asrs	r5, r5, #1
 8007ac8:	429d      	cmp	r5, r3
 8007aca:	bf38      	it	cc
 8007acc:	461d      	movcc	r5, r3
 8007ace:	0553      	lsls	r3, r2, #21
 8007ad0:	d527      	bpl.n	8007b22 <__ssputs_r+0x8e>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	f7ff fbd2 	bl	800727c <_malloc_r>
 8007ad8:	4606      	mov	r6, r0
 8007ada:	b360      	cbz	r0, 8007b36 <__ssputs_r+0xa2>
 8007adc:	464a      	mov	r2, r9
 8007ade:	6921      	ldr	r1, [r4, #16]
 8007ae0:	f7fe fcfb 	bl	80064da <memcpy>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	6126      	str	r6, [r4, #16]
 8007af2:	444e      	add	r6, r9
 8007af4:	6026      	str	r6, [r4, #0]
 8007af6:	463e      	mov	r6, r7
 8007af8:	6165      	str	r5, [r4, #20]
 8007afa:	eba5 0509 	sub.w	r5, r5, r9
 8007afe:	60a5      	str	r5, [r4, #8]
 8007b00:	42be      	cmp	r6, r7
 8007b02:	d900      	bls.n	8007b06 <__ssputs_r+0x72>
 8007b04:	463e      	mov	r6, r7
 8007b06:	4632      	mov	r2, r6
 8007b08:	4641      	mov	r1, r8
 8007b0a:	6820      	ldr	r0, [r4, #0]
 8007b0c:	f000 fb63 	bl	80081d6 <memmove>
 8007b10:	2000      	movs	r0, #0
 8007b12:	68a3      	ldr	r3, [r4, #8]
 8007b14:	1b9b      	subs	r3, r3, r6
 8007b16:	60a3      	str	r3, [r4, #8]
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	4433      	add	r3, r6
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b22:	462a      	mov	r2, r5
 8007b24:	f000 fbe8 	bl	80082f8 <_realloc_r>
 8007b28:	4606      	mov	r6, r0
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d1e0      	bne.n	8007af0 <__ssputs_r+0x5c>
 8007b2e:	4650      	mov	r0, sl
 8007b30:	6921      	ldr	r1, [r4, #16]
 8007b32:	f7ff fb31 	bl	8007198 <_free_r>
 8007b36:	230c      	movs	r3, #12
 8007b38:	f8ca 3000 	str.w	r3, [sl]
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b46:	81a3      	strh	r3, [r4, #12]
 8007b48:	e7e9      	b.n	8007b1e <__ssputs_r+0x8a>
	...

08007b4c <_svfiprintf_r>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	4698      	mov	r8, r3
 8007b52:	898b      	ldrh	r3, [r1, #12]
 8007b54:	4607      	mov	r7, r0
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	460d      	mov	r5, r1
 8007b5a:	4614      	mov	r4, r2
 8007b5c:	b09d      	sub	sp, #116	@ 0x74
 8007b5e:	d510      	bpl.n	8007b82 <_svfiprintf_r+0x36>
 8007b60:	690b      	ldr	r3, [r1, #16]
 8007b62:	b973      	cbnz	r3, 8007b82 <_svfiprintf_r+0x36>
 8007b64:	2140      	movs	r1, #64	@ 0x40
 8007b66:	f7ff fb89 	bl	800727c <_malloc_r>
 8007b6a:	6028      	str	r0, [r5, #0]
 8007b6c:	6128      	str	r0, [r5, #16]
 8007b6e:	b930      	cbnz	r0, 8007b7e <_svfiprintf_r+0x32>
 8007b70:	230c      	movs	r3, #12
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295
 8007b78:	b01d      	add	sp, #116	@ 0x74
 8007b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7e:	2340      	movs	r3, #64	@ 0x40
 8007b80:	616b      	str	r3, [r5, #20]
 8007b82:	2300      	movs	r3, #0
 8007b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b86:	2320      	movs	r3, #32
 8007b88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b8c:	2330      	movs	r3, #48	@ 0x30
 8007b8e:	f04f 0901 	mov.w	r9, #1
 8007b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b96:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007d30 <_svfiprintf_r+0x1e4>
 8007b9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b9e:	4623      	mov	r3, r4
 8007ba0:	469a      	mov	sl, r3
 8007ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ba6:	b10a      	cbz	r2, 8007bac <_svfiprintf_r+0x60>
 8007ba8:	2a25      	cmp	r2, #37	@ 0x25
 8007baa:	d1f9      	bne.n	8007ba0 <_svfiprintf_r+0x54>
 8007bac:	ebba 0b04 	subs.w	fp, sl, r4
 8007bb0:	d00b      	beq.n	8007bca <_svfiprintf_r+0x7e>
 8007bb2:	465b      	mov	r3, fp
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7ff ff6b 	bl	8007a94 <__ssputs_r>
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f000 80a7 	beq.w	8007d12 <_svfiprintf_r+0x1c6>
 8007bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bc6:	445a      	add	r2, fp
 8007bc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bca:	f89a 3000 	ldrb.w	r3, [sl]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 809f 	beq.w	8007d12 <_svfiprintf_r+0x1c6>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bde:	f10a 0a01 	add.w	sl, sl, #1
 8007be2:	9304      	str	r3, [sp, #16]
 8007be4:	9307      	str	r3, [sp, #28]
 8007be6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bea:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bec:	4654      	mov	r4, sl
 8007bee:	2205      	movs	r2, #5
 8007bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf4:	484e      	ldr	r0, [pc, #312]	@ (8007d30 <_svfiprintf_r+0x1e4>)
 8007bf6:	f7fe fc62 	bl	80064be <memchr>
 8007bfa:	9a04      	ldr	r2, [sp, #16]
 8007bfc:	b9d8      	cbnz	r0, 8007c36 <_svfiprintf_r+0xea>
 8007bfe:	06d0      	lsls	r0, r2, #27
 8007c00:	bf44      	itt	mi
 8007c02:	2320      	movmi	r3, #32
 8007c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c08:	0711      	lsls	r1, r2, #28
 8007c0a:	bf44      	itt	mi
 8007c0c:	232b      	movmi	r3, #43	@ 0x2b
 8007c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c12:	f89a 3000 	ldrb.w	r3, [sl]
 8007c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c18:	d015      	beq.n	8007c46 <_svfiprintf_r+0xfa>
 8007c1a:	4654      	mov	r4, sl
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f04f 0c0a 	mov.w	ip, #10
 8007c22:	9a07      	ldr	r2, [sp, #28]
 8007c24:	4621      	mov	r1, r4
 8007c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c2a:	3b30      	subs	r3, #48	@ 0x30
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d94b      	bls.n	8007cc8 <_svfiprintf_r+0x17c>
 8007c30:	b1b0      	cbz	r0, 8007c60 <_svfiprintf_r+0x114>
 8007c32:	9207      	str	r2, [sp, #28]
 8007c34:	e014      	b.n	8007c60 <_svfiprintf_r+0x114>
 8007c36:	eba0 0308 	sub.w	r3, r0, r8
 8007c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	46a2      	mov	sl, r4
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	e7d2      	b.n	8007bec <_svfiprintf_r+0xa0>
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	1d19      	adds	r1, r3, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	9103      	str	r1, [sp, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bfbb      	ittet	lt
 8007c52:	425b      	neglt	r3, r3
 8007c54:	f042 0202 	orrlt.w	r2, r2, #2
 8007c58:	9307      	strge	r3, [sp, #28]
 8007c5a:	9307      	strlt	r3, [sp, #28]
 8007c5c:	bfb8      	it	lt
 8007c5e:	9204      	strlt	r2, [sp, #16]
 8007c60:	7823      	ldrb	r3, [r4, #0]
 8007c62:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c64:	d10a      	bne.n	8007c7c <_svfiprintf_r+0x130>
 8007c66:	7863      	ldrb	r3, [r4, #1]
 8007c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c6a:	d132      	bne.n	8007cd2 <_svfiprintf_r+0x186>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	3402      	adds	r4, #2
 8007c70:	1d1a      	adds	r2, r3, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	9203      	str	r2, [sp, #12]
 8007c76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c7a:	9305      	str	r3, [sp, #20]
 8007c7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007d34 <_svfiprintf_r+0x1e8>
 8007c80:	2203      	movs	r2, #3
 8007c82:	4650      	mov	r0, sl
 8007c84:	7821      	ldrb	r1, [r4, #0]
 8007c86:	f7fe fc1a 	bl	80064be <memchr>
 8007c8a:	b138      	cbz	r0, 8007c9c <_svfiprintf_r+0x150>
 8007c8c:	2240      	movs	r2, #64	@ 0x40
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	eba0 000a 	sub.w	r0, r0, sl
 8007c94:	4082      	lsls	r2, r0
 8007c96:	4313      	orrs	r3, r2
 8007c98:	3401      	adds	r4, #1
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca0:	2206      	movs	r2, #6
 8007ca2:	4825      	ldr	r0, [pc, #148]	@ (8007d38 <_svfiprintf_r+0x1ec>)
 8007ca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ca8:	f7fe fc09 	bl	80064be <memchr>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d036      	beq.n	8007d1e <_svfiprintf_r+0x1d2>
 8007cb0:	4b22      	ldr	r3, [pc, #136]	@ (8007d3c <_svfiprintf_r+0x1f0>)
 8007cb2:	bb1b      	cbnz	r3, 8007cfc <_svfiprintf_r+0x1b0>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	3307      	adds	r3, #7
 8007cb8:	f023 0307 	bic.w	r3, r3, #7
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	9303      	str	r3, [sp, #12]
 8007cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc2:	4433      	add	r3, r6
 8007cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc6:	e76a      	b.n	8007b9e <_svfiprintf_r+0x52>
 8007cc8:	460c      	mov	r4, r1
 8007cca:	2001      	movs	r0, #1
 8007ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cd0:	e7a8      	b.n	8007c24 <_svfiprintf_r+0xd8>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f04f 0c0a 	mov.w	ip, #10
 8007cd8:	4619      	mov	r1, r3
 8007cda:	3401      	adds	r4, #1
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ce4:	3a30      	subs	r2, #48	@ 0x30
 8007ce6:	2a09      	cmp	r2, #9
 8007ce8:	d903      	bls.n	8007cf2 <_svfiprintf_r+0x1a6>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0c6      	beq.n	8007c7c <_svfiprintf_r+0x130>
 8007cee:	9105      	str	r1, [sp, #20]
 8007cf0:	e7c4      	b.n	8007c7c <_svfiprintf_r+0x130>
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cfa:	e7f0      	b.n	8007cde <_svfiprintf_r+0x192>
 8007cfc:	ab03      	add	r3, sp, #12
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	462a      	mov	r2, r5
 8007d02:	4638      	mov	r0, r7
 8007d04:	4b0e      	ldr	r3, [pc, #56]	@ (8007d40 <_svfiprintf_r+0x1f4>)
 8007d06:	a904      	add	r1, sp, #16
 8007d08:	f7fd fd72 	bl	80057f0 <_printf_float>
 8007d0c:	1c42      	adds	r2, r0, #1
 8007d0e:	4606      	mov	r6, r0
 8007d10:	d1d6      	bne.n	8007cc0 <_svfiprintf_r+0x174>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	065b      	lsls	r3, r3, #25
 8007d16:	f53f af2d 	bmi.w	8007b74 <_svfiprintf_r+0x28>
 8007d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d1c:	e72c      	b.n	8007b78 <_svfiprintf_r+0x2c>
 8007d1e:	ab03      	add	r3, sp, #12
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	462a      	mov	r2, r5
 8007d24:	4638      	mov	r0, r7
 8007d26:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <_svfiprintf_r+0x1f4>)
 8007d28:	a904      	add	r1, sp, #16
 8007d2a:	f7fd ffff 	bl	8005d2c <_printf_i>
 8007d2e:	e7ed      	b.n	8007d0c <_svfiprintf_r+0x1c0>
 8007d30:	08008e88 	.word	0x08008e88
 8007d34:	08008e8e 	.word	0x08008e8e
 8007d38:	08008e92 	.word	0x08008e92
 8007d3c:	080057f1 	.word	0x080057f1
 8007d40:	08007a95 	.word	0x08007a95

08007d44 <__sfputc_r>:
 8007d44:	6893      	ldr	r3, [r2, #8]
 8007d46:	b410      	push	{r4}
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	6093      	str	r3, [r2, #8]
 8007d4e:	da07      	bge.n	8007d60 <__sfputc_r+0x1c>
 8007d50:	6994      	ldr	r4, [r2, #24]
 8007d52:	42a3      	cmp	r3, r4
 8007d54:	db01      	blt.n	8007d5a <__sfputc_r+0x16>
 8007d56:	290a      	cmp	r1, #10
 8007d58:	d102      	bne.n	8007d60 <__sfputc_r+0x1c>
 8007d5a:	bc10      	pop	{r4}
 8007d5c:	f7fe ba9b 	b.w	8006296 <__swbuf_r>
 8007d60:	6813      	ldr	r3, [r2, #0]
 8007d62:	1c58      	adds	r0, r3, #1
 8007d64:	6010      	str	r0, [r2, #0]
 8007d66:	7019      	strb	r1, [r3, #0]
 8007d68:	4608      	mov	r0, r1
 8007d6a:	bc10      	pop	{r4}
 8007d6c:	4770      	bx	lr

08007d6e <__sfputs_r>:
 8007d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d70:	4606      	mov	r6, r0
 8007d72:	460f      	mov	r7, r1
 8007d74:	4614      	mov	r4, r2
 8007d76:	18d5      	adds	r5, r2, r3
 8007d78:	42ac      	cmp	r4, r5
 8007d7a:	d101      	bne.n	8007d80 <__sfputs_r+0x12>
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e007      	b.n	8007d90 <__sfputs_r+0x22>
 8007d80:	463a      	mov	r2, r7
 8007d82:	4630      	mov	r0, r6
 8007d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d88:	f7ff ffdc 	bl	8007d44 <__sfputc_r>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d1f3      	bne.n	8007d78 <__sfputs_r+0xa>
 8007d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d94 <_vfiprintf_r>:
 8007d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d98:	460d      	mov	r5, r1
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	4698      	mov	r8, r3
 8007d9e:	4606      	mov	r6, r0
 8007da0:	b09d      	sub	sp, #116	@ 0x74
 8007da2:	b118      	cbz	r0, 8007dac <_vfiprintf_r+0x18>
 8007da4:	6a03      	ldr	r3, [r0, #32]
 8007da6:	b90b      	cbnz	r3, 8007dac <_vfiprintf_r+0x18>
 8007da8:	f7fe f96c 	bl	8006084 <__sinit>
 8007dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dae:	07d9      	lsls	r1, r3, #31
 8007db0:	d405      	bmi.n	8007dbe <_vfiprintf_r+0x2a>
 8007db2:	89ab      	ldrh	r3, [r5, #12]
 8007db4:	059a      	lsls	r2, r3, #22
 8007db6:	d402      	bmi.n	8007dbe <_vfiprintf_r+0x2a>
 8007db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dba:	f7fe fb7e 	bl	80064ba <__retarget_lock_acquire_recursive>
 8007dbe:	89ab      	ldrh	r3, [r5, #12]
 8007dc0:	071b      	lsls	r3, r3, #28
 8007dc2:	d501      	bpl.n	8007dc8 <_vfiprintf_r+0x34>
 8007dc4:	692b      	ldr	r3, [r5, #16]
 8007dc6:	b99b      	cbnz	r3, 8007df0 <_vfiprintf_r+0x5c>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7fe faa2 	bl	8006314 <__swsetup_r>
 8007dd0:	b170      	cbz	r0, 8007df0 <_vfiprintf_r+0x5c>
 8007dd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dd4:	07dc      	lsls	r4, r3, #31
 8007dd6:	d504      	bpl.n	8007de2 <_vfiprintf_r+0x4e>
 8007dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ddc:	b01d      	add	sp, #116	@ 0x74
 8007dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	0598      	lsls	r0, r3, #22
 8007de6:	d4f7      	bmi.n	8007dd8 <_vfiprintf_r+0x44>
 8007de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dea:	f7fe fb67 	bl	80064bc <__retarget_lock_release_recursive>
 8007dee:	e7f3      	b.n	8007dd8 <_vfiprintf_r+0x44>
 8007df0:	2300      	movs	r3, #0
 8007df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007df4:	2320      	movs	r3, #32
 8007df6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dfa:	2330      	movs	r3, #48	@ 0x30
 8007dfc:	f04f 0901 	mov.w	r9, #1
 8007e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007fb0 <_vfiprintf_r+0x21c>
 8007e08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	469a      	mov	sl, r3
 8007e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e14:	b10a      	cbz	r2, 8007e1a <_vfiprintf_r+0x86>
 8007e16:	2a25      	cmp	r2, #37	@ 0x25
 8007e18:	d1f9      	bne.n	8007e0e <_vfiprintf_r+0x7a>
 8007e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e1e:	d00b      	beq.n	8007e38 <_vfiprintf_r+0xa4>
 8007e20:	465b      	mov	r3, fp
 8007e22:	4622      	mov	r2, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	4630      	mov	r0, r6
 8007e28:	f7ff ffa1 	bl	8007d6e <__sfputs_r>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f000 80a7 	beq.w	8007f80 <_vfiprintf_r+0x1ec>
 8007e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e34:	445a      	add	r2, fp
 8007e36:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e38:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 809f 	beq.w	8007f80 <_vfiprintf_r+0x1ec>
 8007e42:	2300      	movs	r3, #0
 8007e44:	f04f 32ff 	mov.w	r2, #4294967295
 8007e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e4c:	f10a 0a01 	add.w	sl, sl, #1
 8007e50:	9304      	str	r3, [sp, #16]
 8007e52:	9307      	str	r3, [sp, #28]
 8007e54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e58:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e5a:	4654      	mov	r4, sl
 8007e5c:	2205      	movs	r2, #5
 8007e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e62:	4853      	ldr	r0, [pc, #332]	@ (8007fb0 <_vfiprintf_r+0x21c>)
 8007e64:	f7fe fb2b 	bl	80064be <memchr>
 8007e68:	9a04      	ldr	r2, [sp, #16]
 8007e6a:	b9d8      	cbnz	r0, 8007ea4 <_vfiprintf_r+0x110>
 8007e6c:	06d1      	lsls	r1, r2, #27
 8007e6e:	bf44      	itt	mi
 8007e70:	2320      	movmi	r3, #32
 8007e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e76:	0713      	lsls	r3, r2, #28
 8007e78:	bf44      	itt	mi
 8007e7a:	232b      	movmi	r3, #43	@ 0x2b
 8007e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e80:	f89a 3000 	ldrb.w	r3, [sl]
 8007e84:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e86:	d015      	beq.n	8007eb4 <_vfiprintf_r+0x120>
 8007e88:	4654      	mov	r4, sl
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f04f 0c0a 	mov.w	ip, #10
 8007e90:	9a07      	ldr	r2, [sp, #28]
 8007e92:	4621      	mov	r1, r4
 8007e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e98:	3b30      	subs	r3, #48	@ 0x30
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	d94b      	bls.n	8007f36 <_vfiprintf_r+0x1a2>
 8007e9e:	b1b0      	cbz	r0, 8007ece <_vfiprintf_r+0x13a>
 8007ea0:	9207      	str	r2, [sp, #28]
 8007ea2:	e014      	b.n	8007ece <_vfiprintf_r+0x13a>
 8007ea4:	eba0 0308 	sub.w	r3, r0, r8
 8007ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	46a2      	mov	sl, r4
 8007eb0:	9304      	str	r3, [sp, #16]
 8007eb2:	e7d2      	b.n	8007e5a <_vfiprintf_r+0xc6>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	1d19      	adds	r1, r3, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	9103      	str	r1, [sp, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bfbb      	ittet	lt
 8007ec0:	425b      	neglt	r3, r3
 8007ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ec6:	9307      	strge	r3, [sp, #28]
 8007ec8:	9307      	strlt	r3, [sp, #28]
 8007eca:	bfb8      	it	lt
 8007ecc:	9204      	strlt	r2, [sp, #16]
 8007ece:	7823      	ldrb	r3, [r4, #0]
 8007ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ed2:	d10a      	bne.n	8007eea <_vfiprintf_r+0x156>
 8007ed4:	7863      	ldrb	r3, [r4, #1]
 8007ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ed8:	d132      	bne.n	8007f40 <_vfiprintf_r+0x1ac>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	3402      	adds	r4, #2
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	9203      	str	r2, [sp, #12]
 8007ee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007fb4 <_vfiprintf_r+0x220>
 8007eee:	2203      	movs	r2, #3
 8007ef0:	4650      	mov	r0, sl
 8007ef2:	7821      	ldrb	r1, [r4, #0]
 8007ef4:	f7fe fae3 	bl	80064be <memchr>
 8007ef8:	b138      	cbz	r0, 8007f0a <_vfiprintf_r+0x176>
 8007efa:	2240      	movs	r2, #64	@ 0x40
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	eba0 000a 	sub.w	r0, r0, sl
 8007f02:	4082      	lsls	r2, r0
 8007f04:	4313      	orrs	r3, r2
 8007f06:	3401      	adds	r4, #1
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	2206      	movs	r2, #6
 8007f10:	4829      	ldr	r0, [pc, #164]	@ (8007fb8 <_vfiprintf_r+0x224>)
 8007f12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f16:	f7fe fad2 	bl	80064be <memchr>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d03f      	beq.n	8007f9e <_vfiprintf_r+0x20a>
 8007f1e:	4b27      	ldr	r3, [pc, #156]	@ (8007fbc <_vfiprintf_r+0x228>)
 8007f20:	bb1b      	cbnz	r3, 8007f6a <_vfiprintf_r+0x1d6>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	3307      	adds	r3, #7
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f30:	443b      	add	r3, r7
 8007f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f34:	e76a      	b.n	8007e0c <_vfiprintf_r+0x78>
 8007f36:	460c      	mov	r4, r1
 8007f38:	2001      	movs	r0, #1
 8007f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f3e:	e7a8      	b.n	8007e92 <_vfiprintf_r+0xfe>
 8007f40:	2300      	movs	r3, #0
 8007f42:	f04f 0c0a 	mov.w	ip, #10
 8007f46:	4619      	mov	r1, r3
 8007f48:	3401      	adds	r4, #1
 8007f4a:	9305      	str	r3, [sp, #20]
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f52:	3a30      	subs	r2, #48	@ 0x30
 8007f54:	2a09      	cmp	r2, #9
 8007f56:	d903      	bls.n	8007f60 <_vfiprintf_r+0x1cc>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0c6      	beq.n	8007eea <_vfiprintf_r+0x156>
 8007f5c:	9105      	str	r1, [sp, #20]
 8007f5e:	e7c4      	b.n	8007eea <_vfiprintf_r+0x156>
 8007f60:	4604      	mov	r4, r0
 8007f62:	2301      	movs	r3, #1
 8007f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f68:	e7f0      	b.n	8007f4c <_vfiprintf_r+0x1b8>
 8007f6a:	ab03      	add	r3, sp, #12
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	462a      	mov	r2, r5
 8007f70:	4630      	mov	r0, r6
 8007f72:	4b13      	ldr	r3, [pc, #76]	@ (8007fc0 <_vfiprintf_r+0x22c>)
 8007f74:	a904      	add	r1, sp, #16
 8007f76:	f7fd fc3b 	bl	80057f0 <_printf_float>
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	1c78      	adds	r0, r7, #1
 8007f7e:	d1d6      	bne.n	8007f2e <_vfiprintf_r+0x19a>
 8007f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f82:	07d9      	lsls	r1, r3, #31
 8007f84:	d405      	bmi.n	8007f92 <_vfiprintf_r+0x1fe>
 8007f86:	89ab      	ldrh	r3, [r5, #12]
 8007f88:	059a      	lsls	r2, r3, #22
 8007f8a:	d402      	bmi.n	8007f92 <_vfiprintf_r+0x1fe>
 8007f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f8e:	f7fe fa95 	bl	80064bc <__retarget_lock_release_recursive>
 8007f92:	89ab      	ldrh	r3, [r5, #12]
 8007f94:	065b      	lsls	r3, r3, #25
 8007f96:	f53f af1f 	bmi.w	8007dd8 <_vfiprintf_r+0x44>
 8007f9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f9c:	e71e      	b.n	8007ddc <_vfiprintf_r+0x48>
 8007f9e:	ab03      	add	r3, sp, #12
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	4b06      	ldr	r3, [pc, #24]	@ (8007fc0 <_vfiprintf_r+0x22c>)
 8007fa8:	a904      	add	r1, sp, #16
 8007faa:	f7fd febf 	bl	8005d2c <_printf_i>
 8007fae:	e7e4      	b.n	8007f7a <_vfiprintf_r+0x1e6>
 8007fb0:	08008e88 	.word	0x08008e88
 8007fb4:	08008e8e 	.word	0x08008e8e
 8007fb8:	08008e92 	.word	0x08008e92
 8007fbc:	080057f1 	.word	0x080057f1
 8007fc0:	08007d6f 	.word	0x08007d6f

08007fc4 <__sflush_r>:
 8007fc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	0716      	lsls	r6, r2, #28
 8007fcc:	4605      	mov	r5, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	d454      	bmi.n	800807c <__sflush_r+0xb8>
 8007fd2:	684b      	ldr	r3, [r1, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	dc02      	bgt.n	8007fde <__sflush_r+0x1a>
 8007fd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	dd48      	ble.n	8008070 <__sflush_r+0xac>
 8007fde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fe0:	2e00      	cmp	r6, #0
 8007fe2:	d045      	beq.n	8008070 <__sflush_r+0xac>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fea:	682f      	ldr	r7, [r5, #0]
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	d030      	beq.n	8008054 <__sflush_r+0x90>
 8007ff2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	0759      	lsls	r1, r3, #29
 8007ff8:	d505      	bpl.n	8008006 <__sflush_r+0x42>
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	1ad2      	subs	r2, r2, r3
 8007ffe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008000:	b10b      	cbz	r3, 8008006 <__sflush_r+0x42>
 8008002:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008004:	1ad2      	subs	r2, r2, r3
 8008006:	2300      	movs	r3, #0
 8008008:	4628      	mov	r0, r5
 800800a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800800c:	6a21      	ldr	r1, [r4, #32]
 800800e:	47b0      	blx	r6
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	d106      	bne.n	8008024 <__sflush_r+0x60>
 8008016:	6829      	ldr	r1, [r5, #0]
 8008018:	291d      	cmp	r1, #29
 800801a:	d82b      	bhi.n	8008074 <__sflush_r+0xb0>
 800801c:	4a28      	ldr	r2, [pc, #160]	@ (80080c0 <__sflush_r+0xfc>)
 800801e:	410a      	asrs	r2, r1
 8008020:	07d6      	lsls	r6, r2, #31
 8008022:	d427      	bmi.n	8008074 <__sflush_r+0xb0>
 8008024:	2200      	movs	r2, #0
 8008026:	6062      	str	r2, [r4, #4]
 8008028:	6922      	ldr	r2, [r4, #16]
 800802a:	04d9      	lsls	r1, r3, #19
 800802c:	6022      	str	r2, [r4, #0]
 800802e:	d504      	bpl.n	800803a <__sflush_r+0x76>
 8008030:	1c42      	adds	r2, r0, #1
 8008032:	d101      	bne.n	8008038 <__sflush_r+0x74>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b903      	cbnz	r3, 800803a <__sflush_r+0x76>
 8008038:	6560      	str	r0, [r4, #84]	@ 0x54
 800803a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800803c:	602f      	str	r7, [r5, #0]
 800803e:	b1b9      	cbz	r1, 8008070 <__sflush_r+0xac>
 8008040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008044:	4299      	cmp	r1, r3
 8008046:	d002      	beq.n	800804e <__sflush_r+0x8a>
 8008048:	4628      	mov	r0, r5
 800804a:	f7ff f8a5 	bl	8007198 <_free_r>
 800804e:	2300      	movs	r3, #0
 8008050:	6363      	str	r3, [r4, #52]	@ 0x34
 8008052:	e00d      	b.n	8008070 <__sflush_r+0xac>
 8008054:	2301      	movs	r3, #1
 8008056:	4628      	mov	r0, r5
 8008058:	47b0      	blx	r6
 800805a:	4602      	mov	r2, r0
 800805c:	1c50      	adds	r0, r2, #1
 800805e:	d1c9      	bne.n	8007ff4 <__sflush_r+0x30>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0c6      	beq.n	8007ff4 <__sflush_r+0x30>
 8008066:	2b1d      	cmp	r3, #29
 8008068:	d001      	beq.n	800806e <__sflush_r+0xaa>
 800806a:	2b16      	cmp	r3, #22
 800806c:	d11d      	bne.n	80080aa <__sflush_r+0xe6>
 800806e:	602f      	str	r7, [r5, #0]
 8008070:	2000      	movs	r0, #0
 8008072:	e021      	b.n	80080b8 <__sflush_r+0xf4>
 8008074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008078:	b21b      	sxth	r3, r3
 800807a:	e01a      	b.n	80080b2 <__sflush_r+0xee>
 800807c:	690f      	ldr	r7, [r1, #16]
 800807e:	2f00      	cmp	r7, #0
 8008080:	d0f6      	beq.n	8008070 <__sflush_r+0xac>
 8008082:	0793      	lsls	r3, r2, #30
 8008084:	bf18      	it	ne
 8008086:	2300      	movne	r3, #0
 8008088:	680e      	ldr	r6, [r1, #0]
 800808a:	bf08      	it	eq
 800808c:	694b      	ldreq	r3, [r1, #20]
 800808e:	1bf6      	subs	r6, r6, r7
 8008090:	600f      	str	r7, [r1, #0]
 8008092:	608b      	str	r3, [r1, #8]
 8008094:	2e00      	cmp	r6, #0
 8008096:	ddeb      	ble.n	8008070 <__sflush_r+0xac>
 8008098:	4633      	mov	r3, r6
 800809a:	463a      	mov	r2, r7
 800809c:	4628      	mov	r0, r5
 800809e:	6a21      	ldr	r1, [r4, #32]
 80080a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80080a4:	47e0      	blx	ip
 80080a6:	2800      	cmp	r0, #0
 80080a8:	dc07      	bgt.n	80080ba <__sflush_r+0xf6>
 80080aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b2:	f04f 30ff 	mov.w	r0, #4294967295
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ba:	4407      	add	r7, r0
 80080bc:	1a36      	subs	r6, r6, r0
 80080be:	e7e9      	b.n	8008094 <__sflush_r+0xd0>
 80080c0:	dfbffffe 	.word	0xdfbffffe

080080c4 <_fflush_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	690b      	ldr	r3, [r1, #16]
 80080c8:	4605      	mov	r5, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	b913      	cbnz	r3, 80080d4 <_fflush_r+0x10>
 80080ce:	2500      	movs	r5, #0
 80080d0:	4628      	mov	r0, r5
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	b118      	cbz	r0, 80080de <_fflush_r+0x1a>
 80080d6:	6a03      	ldr	r3, [r0, #32]
 80080d8:	b90b      	cbnz	r3, 80080de <_fflush_r+0x1a>
 80080da:	f7fd ffd3 	bl	8006084 <__sinit>
 80080de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0f3      	beq.n	80080ce <_fflush_r+0xa>
 80080e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080e8:	07d0      	lsls	r0, r2, #31
 80080ea:	d404      	bmi.n	80080f6 <_fflush_r+0x32>
 80080ec:	0599      	lsls	r1, r3, #22
 80080ee:	d402      	bmi.n	80080f6 <_fflush_r+0x32>
 80080f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f2:	f7fe f9e2 	bl	80064ba <__retarget_lock_acquire_recursive>
 80080f6:	4628      	mov	r0, r5
 80080f8:	4621      	mov	r1, r4
 80080fa:	f7ff ff63 	bl	8007fc4 <__sflush_r>
 80080fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008100:	4605      	mov	r5, r0
 8008102:	07da      	lsls	r2, r3, #31
 8008104:	d4e4      	bmi.n	80080d0 <_fflush_r+0xc>
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	059b      	lsls	r3, r3, #22
 800810a:	d4e1      	bmi.n	80080d0 <_fflush_r+0xc>
 800810c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800810e:	f7fe f9d5 	bl	80064bc <__retarget_lock_release_recursive>
 8008112:	e7dd      	b.n	80080d0 <_fflush_r+0xc>

08008114 <__swhatbuf_r>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	460c      	mov	r4, r1
 8008118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811c:	4615      	mov	r5, r2
 800811e:	2900      	cmp	r1, #0
 8008120:	461e      	mov	r6, r3
 8008122:	b096      	sub	sp, #88	@ 0x58
 8008124:	da0c      	bge.n	8008140 <__swhatbuf_r+0x2c>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	2100      	movs	r1, #0
 800812a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800812e:	bf14      	ite	ne
 8008130:	2340      	movne	r3, #64	@ 0x40
 8008132:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008136:	2000      	movs	r0, #0
 8008138:	6031      	str	r1, [r6, #0]
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	b016      	add	sp, #88	@ 0x58
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	466a      	mov	r2, sp
 8008142:	f000 f863 	bl	800820c <_fstat_r>
 8008146:	2800      	cmp	r0, #0
 8008148:	dbed      	blt.n	8008126 <__swhatbuf_r+0x12>
 800814a:	9901      	ldr	r1, [sp, #4]
 800814c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008150:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008154:	4259      	negs	r1, r3
 8008156:	4159      	adcs	r1, r3
 8008158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800815c:	e7eb      	b.n	8008136 <__swhatbuf_r+0x22>

0800815e <__smakebuf_r>:
 800815e:	898b      	ldrh	r3, [r1, #12]
 8008160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008162:	079d      	lsls	r5, r3, #30
 8008164:	4606      	mov	r6, r0
 8008166:	460c      	mov	r4, r1
 8008168:	d507      	bpl.n	800817a <__smakebuf_r+0x1c>
 800816a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	6123      	str	r3, [r4, #16]
 8008172:	2301      	movs	r3, #1
 8008174:	6163      	str	r3, [r4, #20]
 8008176:	b003      	add	sp, #12
 8008178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800817a:	466a      	mov	r2, sp
 800817c:	ab01      	add	r3, sp, #4
 800817e:	f7ff ffc9 	bl	8008114 <__swhatbuf_r>
 8008182:	9f00      	ldr	r7, [sp, #0]
 8008184:	4605      	mov	r5, r0
 8008186:	4639      	mov	r1, r7
 8008188:	4630      	mov	r0, r6
 800818a:	f7ff f877 	bl	800727c <_malloc_r>
 800818e:	b948      	cbnz	r0, 80081a4 <__smakebuf_r+0x46>
 8008190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008194:	059a      	lsls	r2, r3, #22
 8008196:	d4ee      	bmi.n	8008176 <__smakebuf_r+0x18>
 8008198:	f023 0303 	bic.w	r3, r3, #3
 800819c:	f043 0302 	orr.w	r3, r3, #2
 80081a0:	81a3      	strh	r3, [r4, #12]
 80081a2:	e7e2      	b.n	800816a <__smakebuf_r+0xc>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	6020      	str	r0, [r4, #0]
 80081b4:	b15b      	cbz	r3, 80081ce <__smakebuf_r+0x70>
 80081b6:	4630      	mov	r0, r6
 80081b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081bc:	f000 f838 	bl	8008230 <_isatty_r>
 80081c0:	b128      	cbz	r0, 80081ce <__smakebuf_r+0x70>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f023 0303 	bic.w	r3, r3, #3
 80081c8:	f043 0301 	orr.w	r3, r3, #1
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	431d      	orrs	r5, r3
 80081d2:	81a5      	strh	r5, [r4, #12]
 80081d4:	e7cf      	b.n	8008176 <__smakebuf_r+0x18>

080081d6 <memmove>:
 80081d6:	4288      	cmp	r0, r1
 80081d8:	b510      	push	{r4, lr}
 80081da:	eb01 0402 	add.w	r4, r1, r2
 80081de:	d902      	bls.n	80081e6 <memmove+0x10>
 80081e0:	4284      	cmp	r4, r0
 80081e2:	4623      	mov	r3, r4
 80081e4:	d807      	bhi.n	80081f6 <memmove+0x20>
 80081e6:	1e43      	subs	r3, r0, #1
 80081e8:	42a1      	cmp	r1, r4
 80081ea:	d008      	beq.n	80081fe <memmove+0x28>
 80081ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081f4:	e7f8      	b.n	80081e8 <memmove+0x12>
 80081f6:	4601      	mov	r1, r0
 80081f8:	4402      	add	r2, r0
 80081fa:	428a      	cmp	r2, r1
 80081fc:	d100      	bne.n	8008200 <memmove+0x2a>
 80081fe:	bd10      	pop	{r4, pc}
 8008200:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008204:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008208:	e7f7      	b.n	80081fa <memmove+0x24>
	...

0800820c <_fstat_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	2300      	movs	r3, #0
 8008210:	4d06      	ldr	r5, [pc, #24]	@ (800822c <_fstat_r+0x20>)
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	f7fa f895 	bl	8002348 <_fstat>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d102      	bne.n	8008228 <_fstat_r+0x1c>
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	b103      	cbz	r3, 8008228 <_fstat_r+0x1c>
 8008226:	6023      	str	r3, [r4, #0]
 8008228:	bd38      	pop	{r3, r4, r5, pc}
 800822a:	bf00      	nop
 800822c:	20000818 	.word	0x20000818

08008230 <_isatty_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	2300      	movs	r3, #0
 8008234:	4d05      	ldr	r5, [pc, #20]	@ (800824c <_isatty_r+0x1c>)
 8008236:	4604      	mov	r4, r0
 8008238:	4608      	mov	r0, r1
 800823a:	602b      	str	r3, [r5, #0]
 800823c:	f7fa f893 	bl	8002366 <_isatty>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_isatty_r+0x1a>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_isatty_r+0x1a>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	20000818 	.word	0x20000818

08008250 <_sbrk_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	2300      	movs	r3, #0
 8008254:	4d05      	ldr	r5, [pc, #20]	@ (800826c <_sbrk_r+0x1c>)
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7fa f89a 	bl	8002394 <_sbrk>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_sbrk_r+0x1a>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_sbrk_r+0x1a>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	20000818 	.word	0x20000818

08008270 <__assert_func>:
 8008270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008272:	4614      	mov	r4, r2
 8008274:	461a      	mov	r2, r3
 8008276:	4b09      	ldr	r3, [pc, #36]	@ (800829c <__assert_func+0x2c>)
 8008278:	4605      	mov	r5, r0
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68d8      	ldr	r0, [r3, #12]
 800827e:	b954      	cbnz	r4, 8008296 <__assert_func+0x26>
 8008280:	4b07      	ldr	r3, [pc, #28]	@ (80082a0 <__assert_func+0x30>)
 8008282:	461c      	mov	r4, r3
 8008284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008288:	9100      	str	r1, [sp, #0]
 800828a:	462b      	mov	r3, r5
 800828c:	4905      	ldr	r1, [pc, #20]	@ (80082a4 <__assert_func+0x34>)
 800828e:	f000 f86f 	bl	8008370 <fiprintf>
 8008292:	f000 f87f 	bl	8008394 <abort>
 8008296:	4b04      	ldr	r3, [pc, #16]	@ (80082a8 <__assert_func+0x38>)
 8008298:	e7f4      	b.n	8008284 <__assert_func+0x14>
 800829a:	bf00      	nop
 800829c:	20000018 	.word	0x20000018
 80082a0:	08008ede 	.word	0x08008ede
 80082a4:	08008eb0 	.word	0x08008eb0
 80082a8:	08008ea3 	.word	0x08008ea3

080082ac <_calloc_r>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	fba1 5402 	umull	r5, r4, r1, r2
 80082b2:	b93c      	cbnz	r4, 80082c4 <_calloc_r+0x18>
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7fe ffe1 	bl	800727c <_malloc_r>
 80082ba:	4606      	mov	r6, r0
 80082bc:	b928      	cbnz	r0, 80082ca <_calloc_r+0x1e>
 80082be:	2600      	movs	r6, #0
 80082c0:	4630      	mov	r0, r6
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	220c      	movs	r2, #12
 80082c6:	6002      	str	r2, [r0, #0]
 80082c8:	e7f9      	b.n	80082be <_calloc_r+0x12>
 80082ca:	462a      	mov	r2, r5
 80082cc:	4621      	mov	r1, r4
 80082ce:	f7fe f877 	bl	80063c0 <memset>
 80082d2:	e7f5      	b.n	80082c0 <_calloc_r+0x14>

080082d4 <__ascii_mbtowc>:
 80082d4:	b082      	sub	sp, #8
 80082d6:	b901      	cbnz	r1, 80082da <__ascii_mbtowc+0x6>
 80082d8:	a901      	add	r1, sp, #4
 80082da:	b142      	cbz	r2, 80082ee <__ascii_mbtowc+0x1a>
 80082dc:	b14b      	cbz	r3, 80082f2 <__ascii_mbtowc+0x1e>
 80082de:	7813      	ldrb	r3, [r2, #0]
 80082e0:	600b      	str	r3, [r1, #0]
 80082e2:	7812      	ldrb	r2, [r2, #0]
 80082e4:	1e10      	subs	r0, r2, #0
 80082e6:	bf18      	it	ne
 80082e8:	2001      	movne	r0, #1
 80082ea:	b002      	add	sp, #8
 80082ec:	4770      	bx	lr
 80082ee:	4610      	mov	r0, r2
 80082f0:	e7fb      	b.n	80082ea <__ascii_mbtowc+0x16>
 80082f2:	f06f 0001 	mvn.w	r0, #1
 80082f6:	e7f8      	b.n	80082ea <__ascii_mbtowc+0x16>

080082f8 <_realloc_r>:
 80082f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	4680      	mov	r8, r0
 80082fe:	4615      	mov	r5, r2
 8008300:	460c      	mov	r4, r1
 8008302:	b921      	cbnz	r1, 800830e <_realloc_r+0x16>
 8008304:	4611      	mov	r1, r2
 8008306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830a:	f7fe bfb7 	b.w	800727c <_malloc_r>
 800830e:	b92a      	cbnz	r2, 800831c <_realloc_r+0x24>
 8008310:	f7fe ff42 	bl	8007198 <_free_r>
 8008314:	2400      	movs	r4, #0
 8008316:	4620      	mov	r0, r4
 8008318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831c:	f000 f841 	bl	80083a2 <_malloc_usable_size_r>
 8008320:	4285      	cmp	r5, r0
 8008322:	4606      	mov	r6, r0
 8008324:	d802      	bhi.n	800832c <_realloc_r+0x34>
 8008326:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800832a:	d8f4      	bhi.n	8008316 <_realloc_r+0x1e>
 800832c:	4629      	mov	r1, r5
 800832e:	4640      	mov	r0, r8
 8008330:	f7fe ffa4 	bl	800727c <_malloc_r>
 8008334:	4607      	mov	r7, r0
 8008336:	2800      	cmp	r0, #0
 8008338:	d0ec      	beq.n	8008314 <_realloc_r+0x1c>
 800833a:	42b5      	cmp	r5, r6
 800833c:	462a      	mov	r2, r5
 800833e:	4621      	mov	r1, r4
 8008340:	bf28      	it	cs
 8008342:	4632      	movcs	r2, r6
 8008344:	f7fe f8c9 	bl	80064da <memcpy>
 8008348:	4621      	mov	r1, r4
 800834a:	4640      	mov	r0, r8
 800834c:	f7fe ff24 	bl	8007198 <_free_r>
 8008350:	463c      	mov	r4, r7
 8008352:	e7e0      	b.n	8008316 <_realloc_r+0x1e>

08008354 <__ascii_wctomb>:
 8008354:	4603      	mov	r3, r0
 8008356:	4608      	mov	r0, r1
 8008358:	b141      	cbz	r1, 800836c <__ascii_wctomb+0x18>
 800835a:	2aff      	cmp	r2, #255	@ 0xff
 800835c:	d904      	bls.n	8008368 <__ascii_wctomb+0x14>
 800835e:	228a      	movs	r2, #138	@ 0x8a
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	4770      	bx	lr
 8008368:	2001      	movs	r0, #1
 800836a:	700a      	strb	r2, [r1, #0]
 800836c:	4770      	bx	lr
	...

08008370 <fiprintf>:
 8008370:	b40e      	push	{r1, r2, r3}
 8008372:	b503      	push	{r0, r1, lr}
 8008374:	4601      	mov	r1, r0
 8008376:	ab03      	add	r3, sp, #12
 8008378:	4805      	ldr	r0, [pc, #20]	@ (8008390 <fiprintf+0x20>)
 800837a:	f853 2b04 	ldr.w	r2, [r3], #4
 800837e:	6800      	ldr	r0, [r0, #0]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	f7ff fd07 	bl	8007d94 <_vfiprintf_r>
 8008386:	b002      	add	sp, #8
 8008388:	f85d eb04 	ldr.w	lr, [sp], #4
 800838c:	b003      	add	sp, #12
 800838e:	4770      	bx	lr
 8008390:	20000018 	.word	0x20000018

08008394 <abort>:
 8008394:	2006      	movs	r0, #6
 8008396:	b508      	push	{r3, lr}
 8008398:	f000 f834 	bl	8008404 <raise>
 800839c:	2001      	movs	r0, #1
 800839e:	f7f9 ff84 	bl	80022aa <_exit>

080083a2 <_malloc_usable_size_r>:
 80083a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a6:	1f18      	subs	r0, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bfbc      	itt	lt
 80083ac:	580b      	ldrlt	r3, [r1, r0]
 80083ae:	18c0      	addlt	r0, r0, r3
 80083b0:	4770      	bx	lr

080083b2 <_raise_r>:
 80083b2:	291f      	cmp	r1, #31
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4605      	mov	r5, r0
 80083b8:	460c      	mov	r4, r1
 80083ba:	d904      	bls.n	80083c6 <_raise_r+0x14>
 80083bc:	2316      	movs	r3, #22
 80083be:	6003      	str	r3, [r0, #0]
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	bd38      	pop	{r3, r4, r5, pc}
 80083c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083c8:	b112      	cbz	r2, 80083d0 <_raise_r+0x1e>
 80083ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083ce:	b94b      	cbnz	r3, 80083e4 <_raise_r+0x32>
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 f831 	bl	8008438 <_getpid_r>
 80083d6:	4622      	mov	r2, r4
 80083d8:	4601      	mov	r1, r0
 80083da:	4628      	mov	r0, r5
 80083dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083e0:	f000 b818 	b.w	8008414 <_kill_r>
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d00a      	beq.n	80083fe <_raise_r+0x4c>
 80083e8:	1c59      	adds	r1, r3, #1
 80083ea:	d103      	bne.n	80083f4 <_raise_r+0x42>
 80083ec:	2316      	movs	r3, #22
 80083ee:	6003      	str	r3, [r0, #0]
 80083f0:	2001      	movs	r0, #1
 80083f2:	e7e7      	b.n	80083c4 <_raise_r+0x12>
 80083f4:	2100      	movs	r1, #0
 80083f6:	4620      	mov	r0, r4
 80083f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083fc:	4798      	blx	r3
 80083fe:	2000      	movs	r0, #0
 8008400:	e7e0      	b.n	80083c4 <_raise_r+0x12>
	...

08008404 <raise>:
 8008404:	4b02      	ldr	r3, [pc, #8]	@ (8008410 <raise+0xc>)
 8008406:	4601      	mov	r1, r0
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f7ff bfd2 	b.w	80083b2 <_raise_r>
 800840e:	bf00      	nop
 8008410:	20000018 	.word	0x20000018

08008414 <_kill_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	2300      	movs	r3, #0
 8008418:	4d06      	ldr	r5, [pc, #24]	@ (8008434 <_kill_r+0x20>)
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	4611      	mov	r1, r2
 8008420:	602b      	str	r3, [r5, #0]
 8008422:	f7f9 ff32 	bl	800228a <_kill>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d102      	bne.n	8008430 <_kill_r+0x1c>
 800842a:	682b      	ldr	r3, [r5, #0]
 800842c:	b103      	cbz	r3, 8008430 <_kill_r+0x1c>
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	bd38      	pop	{r3, r4, r5, pc}
 8008432:	bf00      	nop
 8008434:	20000818 	.word	0x20000818

08008438 <_getpid_r>:
 8008438:	f7f9 bf20 	b.w	800227c <_getpid>

0800843c <atan2>:
 800843c:	f000 ba90 	b.w	8008960 <__ieee754_atan2>

08008440 <sqrt>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	4606      	mov	r6, r0
 8008444:	460f      	mov	r7, r1
 8008446:	f000 f9b3 	bl	80087b0 <__ieee754_sqrt>
 800844a:	4632      	mov	r2, r6
 800844c:	4604      	mov	r4, r0
 800844e:	460d      	mov	r5, r1
 8008450:	463b      	mov	r3, r7
 8008452:	4630      	mov	r0, r6
 8008454:	4639      	mov	r1, r7
 8008456:	f7f8 fad9 	bl	8000a0c <__aeabi_dcmpun>
 800845a:	b990      	cbnz	r0, 8008482 <sqrt+0x42>
 800845c:	2200      	movs	r2, #0
 800845e:	2300      	movs	r3, #0
 8008460:	4630      	mov	r0, r6
 8008462:	4639      	mov	r1, r7
 8008464:	f7f8 faaa 	bl	80009bc <__aeabi_dcmplt>
 8008468:	b158      	cbz	r0, 8008482 <sqrt+0x42>
 800846a:	f7fd fffb 	bl	8006464 <__errno>
 800846e:	2321      	movs	r3, #33	@ 0x21
 8008470:	2200      	movs	r2, #0
 8008472:	6003      	str	r3, [r0, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	4610      	mov	r0, r2
 8008478:	4619      	mov	r1, r3
 800847a:	f7f8 f957 	bl	800072c <__aeabi_ddiv>
 800847e:	4604      	mov	r4, r0
 8008480:	460d      	mov	r5, r1
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008488 <atan>:
 8008488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	4bbc      	ldr	r3, [pc, #752]	@ (8008780 <atan+0x2f8>)
 800848e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008492:	429e      	cmp	r6, r3
 8008494:	4604      	mov	r4, r0
 8008496:	460d      	mov	r5, r1
 8008498:	468b      	mov	fp, r1
 800849a:	d918      	bls.n	80084ce <atan+0x46>
 800849c:	4bb9      	ldr	r3, [pc, #740]	@ (8008784 <atan+0x2fc>)
 800849e:	429e      	cmp	r6, r3
 80084a0:	d801      	bhi.n	80084a6 <atan+0x1e>
 80084a2:	d109      	bne.n	80084b8 <atan+0x30>
 80084a4:	b140      	cbz	r0, 80084b8 <atan+0x30>
 80084a6:	4622      	mov	r2, r4
 80084a8:	462b      	mov	r3, r5
 80084aa:	4620      	mov	r0, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	f7f7 fe5d 	bl	800016c <__adddf3>
 80084b2:	4604      	mov	r4, r0
 80084b4:	460d      	mov	r5, r1
 80084b6:	e006      	b.n	80084c6 <atan+0x3e>
 80084b8:	f1bb 0f00 	cmp.w	fp, #0
 80084bc:	f340 8123 	ble.w	8008706 <atan+0x27e>
 80084c0:	a593      	add	r5, pc, #588	@ (adr r5, 8008710 <atan+0x288>)
 80084c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	4bae      	ldr	r3, [pc, #696]	@ (8008788 <atan+0x300>)
 80084d0:	429e      	cmp	r6, r3
 80084d2:	d811      	bhi.n	80084f8 <atan+0x70>
 80084d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80084d8:	429e      	cmp	r6, r3
 80084da:	d80a      	bhi.n	80084f2 <atan+0x6a>
 80084dc:	a38e      	add	r3, pc, #568	@ (adr r3, 8008718 <atan+0x290>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f7 fe43 	bl	800016c <__adddf3>
 80084e6:	2200      	movs	r2, #0
 80084e8:	4ba8      	ldr	r3, [pc, #672]	@ (800878c <atan+0x304>)
 80084ea:	f7f8 fa85 	bl	80009f8 <__aeabi_dcmpgt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d1e9      	bne.n	80084c6 <atan+0x3e>
 80084f2:	f04f 3aff 	mov.w	sl, #4294967295
 80084f6:	e027      	b.n	8008548 <atan+0xc0>
 80084f8:	f000 f956 	bl	80087a8 <fabs>
 80084fc:	4ba4      	ldr	r3, [pc, #656]	@ (8008790 <atan+0x308>)
 80084fe:	4604      	mov	r4, r0
 8008500:	429e      	cmp	r6, r3
 8008502:	460d      	mov	r5, r1
 8008504:	f200 80b8 	bhi.w	8008678 <atan+0x1f0>
 8008508:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800850c:	429e      	cmp	r6, r3
 800850e:	f200 809c 	bhi.w	800864a <atan+0x1c2>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	f7f7 fe29 	bl	800016c <__adddf3>
 800851a:	2200      	movs	r2, #0
 800851c:	4b9b      	ldr	r3, [pc, #620]	@ (800878c <atan+0x304>)
 800851e:	f7f7 fe23 	bl	8000168 <__aeabi_dsub>
 8008522:	2200      	movs	r2, #0
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	f7f7 fe1c 	bl	800016c <__adddf3>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f8 f8f6 	bl	800072c <__aeabi_ddiv>
 8008540:	f04f 0a00 	mov.w	sl, #0
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	4622      	mov	r2, r4
 800854a:	462b      	mov	r3, r5
 800854c:	4620      	mov	r0, r4
 800854e:	4629      	mov	r1, r5
 8008550:	f7f7 ffc2 	bl	80004d8 <__aeabi_dmul>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4680      	mov	r8, r0
 800855a:	4689      	mov	r9, r1
 800855c:	f7f7 ffbc 	bl	80004d8 <__aeabi_dmul>
 8008560:	a36f      	add	r3, pc, #444	@ (adr r3, 8008720 <atan+0x298>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	4606      	mov	r6, r0
 8008568:	460f      	mov	r7, r1
 800856a:	f7f7 ffb5 	bl	80004d8 <__aeabi_dmul>
 800856e:	a36e      	add	r3, pc, #440	@ (adr r3, 8008728 <atan+0x2a0>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f7f7 fdfa 	bl	800016c <__adddf3>
 8008578:	4632      	mov	r2, r6
 800857a:	463b      	mov	r3, r7
 800857c:	f7f7 ffac 	bl	80004d8 <__aeabi_dmul>
 8008580:	a36b      	add	r3, pc, #428	@ (adr r3, 8008730 <atan+0x2a8>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	f7f7 fdf1 	bl	800016c <__adddf3>
 800858a:	4632      	mov	r2, r6
 800858c:	463b      	mov	r3, r7
 800858e:	f7f7 ffa3 	bl	80004d8 <__aeabi_dmul>
 8008592:	a369      	add	r3, pc, #420	@ (adr r3, 8008738 <atan+0x2b0>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f7f7 fde8 	bl	800016c <__adddf3>
 800859c:	4632      	mov	r2, r6
 800859e:	463b      	mov	r3, r7
 80085a0:	f7f7 ff9a 	bl	80004d8 <__aeabi_dmul>
 80085a4:	a366      	add	r3, pc, #408	@ (adr r3, 8008740 <atan+0x2b8>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f7f7 fddf 	bl	800016c <__adddf3>
 80085ae:	4632      	mov	r2, r6
 80085b0:	463b      	mov	r3, r7
 80085b2:	f7f7 ff91 	bl	80004d8 <__aeabi_dmul>
 80085b6:	a364      	add	r3, pc, #400	@ (adr r3, 8008748 <atan+0x2c0>)
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f7f7 fdd6 	bl	800016c <__adddf3>
 80085c0:	4642      	mov	r2, r8
 80085c2:	464b      	mov	r3, r9
 80085c4:	f7f7 ff88 	bl	80004d8 <__aeabi_dmul>
 80085c8:	a361      	add	r3, pc, #388	@ (adr r3, 8008750 <atan+0x2c8>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	4680      	mov	r8, r0
 80085d0:	4689      	mov	r9, r1
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f7 ff7f 	bl	80004d8 <__aeabi_dmul>
 80085da:	a35f      	add	r3, pc, #380	@ (adr r3, 8008758 <atan+0x2d0>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f7 fdc2 	bl	8000168 <__aeabi_dsub>
 80085e4:	4632      	mov	r2, r6
 80085e6:	463b      	mov	r3, r7
 80085e8:	f7f7 ff76 	bl	80004d8 <__aeabi_dmul>
 80085ec:	a35c      	add	r3, pc, #368	@ (adr r3, 8008760 <atan+0x2d8>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fdb9 	bl	8000168 <__aeabi_dsub>
 80085f6:	4632      	mov	r2, r6
 80085f8:	463b      	mov	r3, r7
 80085fa:	f7f7 ff6d 	bl	80004d8 <__aeabi_dmul>
 80085fe:	a35a      	add	r3, pc, #360	@ (adr r3, 8008768 <atan+0x2e0>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f7 fdb0 	bl	8000168 <__aeabi_dsub>
 8008608:	4632      	mov	r2, r6
 800860a:	463b      	mov	r3, r7
 800860c:	f7f7 ff64 	bl	80004d8 <__aeabi_dmul>
 8008610:	a357      	add	r3, pc, #348	@ (adr r3, 8008770 <atan+0x2e8>)
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	f7f7 fda7 	bl	8000168 <__aeabi_dsub>
 800861a:	4632      	mov	r2, r6
 800861c:	463b      	mov	r3, r7
 800861e:	f7f7 ff5b 	bl	80004d8 <__aeabi_dmul>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4640      	mov	r0, r8
 8008628:	4649      	mov	r1, r9
 800862a:	f7f7 fd9f 	bl	800016c <__adddf3>
 800862e:	4622      	mov	r2, r4
 8008630:	462b      	mov	r3, r5
 8008632:	f7f7 ff51 	bl	80004d8 <__aeabi_dmul>
 8008636:	f1ba 3fff 	cmp.w	sl, #4294967295
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	d144      	bne.n	80086ca <atan+0x242>
 8008640:	4620      	mov	r0, r4
 8008642:	4629      	mov	r1, r5
 8008644:	f7f7 fd90 	bl	8000168 <__aeabi_dsub>
 8008648:	e733      	b.n	80084b2 <atan+0x2a>
 800864a:	2200      	movs	r2, #0
 800864c:	4b4f      	ldr	r3, [pc, #316]	@ (800878c <atan+0x304>)
 800864e:	f7f7 fd8b 	bl	8000168 <__aeabi_dsub>
 8008652:	2200      	movs	r2, #0
 8008654:	4606      	mov	r6, r0
 8008656:	460f      	mov	r7, r1
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	4b4b      	ldr	r3, [pc, #300]	@ (800878c <atan+0x304>)
 800865e:	f7f7 fd85 	bl	800016c <__adddf3>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4630      	mov	r0, r6
 8008668:	4639      	mov	r1, r7
 800866a:	f7f8 f85f 	bl	800072c <__aeabi_ddiv>
 800866e:	f04f 0a01 	mov.w	sl, #1
 8008672:	4604      	mov	r4, r0
 8008674:	460d      	mov	r5, r1
 8008676:	e767      	b.n	8008548 <atan+0xc0>
 8008678:	4b46      	ldr	r3, [pc, #280]	@ (8008794 <atan+0x30c>)
 800867a:	429e      	cmp	r6, r3
 800867c:	d21a      	bcs.n	80086b4 <atan+0x22c>
 800867e:	2200      	movs	r2, #0
 8008680:	4b45      	ldr	r3, [pc, #276]	@ (8008798 <atan+0x310>)
 8008682:	f7f7 fd71 	bl	8000168 <__aeabi_dsub>
 8008686:	2200      	movs	r2, #0
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	4620      	mov	r0, r4
 800868e:	4629      	mov	r1, r5
 8008690:	4b41      	ldr	r3, [pc, #260]	@ (8008798 <atan+0x310>)
 8008692:	f7f7 ff21 	bl	80004d8 <__aeabi_dmul>
 8008696:	2200      	movs	r2, #0
 8008698:	4b3c      	ldr	r3, [pc, #240]	@ (800878c <atan+0x304>)
 800869a:	f7f7 fd67 	bl	800016c <__adddf3>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f8 f841 	bl	800072c <__aeabi_ddiv>
 80086aa:	f04f 0a02 	mov.w	sl, #2
 80086ae:	4604      	mov	r4, r0
 80086b0:	460d      	mov	r5, r1
 80086b2:	e749      	b.n	8008548 <atan+0xc0>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	2000      	movs	r0, #0
 80086ba:	4938      	ldr	r1, [pc, #224]	@ (800879c <atan+0x314>)
 80086bc:	f7f8 f836 	bl	800072c <__aeabi_ddiv>
 80086c0:	f04f 0a03 	mov.w	sl, #3
 80086c4:	4604      	mov	r4, r0
 80086c6:	460d      	mov	r5, r1
 80086c8:	e73e      	b.n	8008548 <atan+0xc0>
 80086ca:	4b35      	ldr	r3, [pc, #212]	@ (80087a0 <atan+0x318>)
 80086cc:	4e35      	ldr	r6, [pc, #212]	@ (80087a4 <atan+0x31c>)
 80086ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 fd47 	bl	8000168 <__aeabi_dsub>
 80086da:	4622      	mov	r2, r4
 80086dc:	462b      	mov	r3, r5
 80086de:	f7f7 fd43 	bl	8000168 <__aeabi_dsub>
 80086e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 80086ee:	f7f7 fd3b 	bl	8000168 <__aeabi_dsub>
 80086f2:	f1bb 0f00 	cmp.w	fp, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	460d      	mov	r5, r1
 80086fa:	f6bf aee4 	bge.w	80084c6 <atan+0x3e>
 80086fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008702:	461d      	mov	r5, r3
 8008704:	e6df      	b.n	80084c6 <atan+0x3e>
 8008706:	a51c      	add	r5, pc, #112	@ (adr r5, 8008778 <atan+0x2f0>)
 8008708:	e9d5 4500 	ldrd	r4, r5, [r5]
 800870c:	e6db      	b.n	80084c6 <atan+0x3e>
 800870e:	bf00      	nop
 8008710:	54442d18 	.word	0x54442d18
 8008714:	3ff921fb 	.word	0x3ff921fb
 8008718:	8800759c 	.word	0x8800759c
 800871c:	7e37e43c 	.word	0x7e37e43c
 8008720:	e322da11 	.word	0xe322da11
 8008724:	3f90ad3a 	.word	0x3f90ad3a
 8008728:	24760deb 	.word	0x24760deb
 800872c:	3fa97b4b 	.word	0x3fa97b4b
 8008730:	a0d03d51 	.word	0xa0d03d51
 8008734:	3fb10d66 	.word	0x3fb10d66
 8008738:	c54c206e 	.word	0xc54c206e
 800873c:	3fb745cd 	.word	0x3fb745cd
 8008740:	920083ff 	.word	0x920083ff
 8008744:	3fc24924 	.word	0x3fc24924
 8008748:	5555550d 	.word	0x5555550d
 800874c:	3fd55555 	.word	0x3fd55555
 8008750:	2c6a6c2f 	.word	0x2c6a6c2f
 8008754:	bfa2b444 	.word	0xbfa2b444
 8008758:	52defd9a 	.word	0x52defd9a
 800875c:	3fadde2d 	.word	0x3fadde2d
 8008760:	af749a6d 	.word	0xaf749a6d
 8008764:	3fb3b0f2 	.word	0x3fb3b0f2
 8008768:	fe231671 	.word	0xfe231671
 800876c:	3fbc71c6 	.word	0x3fbc71c6
 8008770:	9998ebc4 	.word	0x9998ebc4
 8008774:	3fc99999 	.word	0x3fc99999
 8008778:	54442d18 	.word	0x54442d18
 800877c:	bff921fb 	.word	0xbff921fb
 8008780:	440fffff 	.word	0x440fffff
 8008784:	7ff00000 	.word	0x7ff00000
 8008788:	3fdbffff 	.word	0x3fdbffff
 800878c:	3ff00000 	.word	0x3ff00000
 8008790:	3ff2ffff 	.word	0x3ff2ffff
 8008794:	40038000 	.word	0x40038000
 8008798:	3ff80000 	.word	0x3ff80000
 800879c:	bff00000 	.word	0xbff00000
 80087a0:	08008fe0 	.word	0x08008fe0
 80087a4:	08009000 	.word	0x08009000

080087a8 <fabs>:
 80087a8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80087ac:	4619      	mov	r1, r3
 80087ae:	4770      	bx	lr

080087b0 <__ieee754_sqrt>:
 80087b0:	4a67      	ldr	r2, [pc, #412]	@ (8008950 <__ieee754_sqrt+0x1a0>)
 80087b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b6:	438a      	bics	r2, r1
 80087b8:	4606      	mov	r6, r0
 80087ba:	460f      	mov	r7, r1
 80087bc:	460b      	mov	r3, r1
 80087be:	4604      	mov	r4, r0
 80087c0:	d10e      	bne.n	80087e0 <__ieee754_sqrt+0x30>
 80087c2:	4602      	mov	r2, r0
 80087c4:	f7f7 fe88 	bl	80004d8 <__aeabi_dmul>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4630      	mov	r0, r6
 80087ce:	4639      	mov	r1, r7
 80087d0:	f7f7 fccc 	bl	800016c <__adddf3>
 80087d4:	4606      	mov	r6, r0
 80087d6:	460f      	mov	r7, r1
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e0:	2900      	cmp	r1, #0
 80087e2:	dc0c      	bgt.n	80087fe <__ieee754_sqrt+0x4e>
 80087e4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80087e8:	4302      	orrs	r2, r0
 80087ea:	d0f5      	beq.n	80087d8 <__ieee754_sqrt+0x28>
 80087ec:	b189      	cbz	r1, 8008812 <__ieee754_sqrt+0x62>
 80087ee:	4602      	mov	r2, r0
 80087f0:	f7f7 fcba 	bl	8000168 <__aeabi_dsub>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	f7f7 ff98 	bl	800072c <__aeabi_ddiv>
 80087fc:	e7ea      	b.n	80087d4 <__ieee754_sqrt+0x24>
 80087fe:	150a      	asrs	r2, r1, #20
 8008800:	d115      	bne.n	800882e <__ieee754_sqrt+0x7e>
 8008802:	2100      	movs	r1, #0
 8008804:	e009      	b.n	800881a <__ieee754_sqrt+0x6a>
 8008806:	0ae3      	lsrs	r3, r4, #11
 8008808:	3a15      	subs	r2, #21
 800880a:	0564      	lsls	r4, r4, #21
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0fa      	beq.n	8008806 <__ieee754_sqrt+0x56>
 8008810:	e7f7      	b.n	8008802 <__ieee754_sqrt+0x52>
 8008812:	460a      	mov	r2, r1
 8008814:	e7fa      	b.n	800880c <__ieee754_sqrt+0x5c>
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	3101      	adds	r1, #1
 800881a:	02d8      	lsls	r0, r3, #11
 800881c:	d5fb      	bpl.n	8008816 <__ieee754_sqrt+0x66>
 800881e:	1e48      	subs	r0, r1, #1
 8008820:	1a12      	subs	r2, r2, r0
 8008822:	f1c1 0020 	rsb	r0, r1, #32
 8008826:	fa24 f000 	lsr.w	r0, r4, r0
 800882a:	4303      	orrs	r3, r0
 800882c:	408c      	lsls	r4, r1
 800882e:	2600      	movs	r6, #0
 8008830:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008834:	2116      	movs	r1, #22
 8008836:	07d2      	lsls	r2, r2, #31
 8008838:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800883c:	4632      	mov	r2, r6
 800883e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008846:	bf5c      	itt	pl
 8008848:	005b      	lslpl	r3, r3, #1
 800884a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800884e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008852:	bf58      	it	pl
 8008854:	0064      	lslpl	r4, r4, #1
 8008856:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800885a:	107f      	asrs	r7, r7, #1
 800885c:	0064      	lsls	r4, r4, #1
 800885e:	1815      	adds	r5, r2, r0
 8008860:	429d      	cmp	r5, r3
 8008862:	bfde      	ittt	le
 8008864:	182a      	addle	r2, r5, r0
 8008866:	1b5b      	suble	r3, r3, r5
 8008868:	1836      	addle	r6, r6, r0
 800886a:	0fe5      	lsrs	r5, r4, #31
 800886c:	3901      	subs	r1, #1
 800886e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008872:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008876:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800887a:	d1f0      	bne.n	800885e <__ieee754_sqrt+0xae>
 800887c:	460d      	mov	r5, r1
 800887e:	f04f 0a20 	mov.w	sl, #32
 8008882:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008886:	429a      	cmp	r2, r3
 8008888:	eb01 0c00 	add.w	ip, r1, r0
 800888c:	db02      	blt.n	8008894 <__ieee754_sqrt+0xe4>
 800888e:	d113      	bne.n	80088b8 <__ieee754_sqrt+0x108>
 8008890:	45a4      	cmp	ip, r4
 8008892:	d811      	bhi.n	80088b8 <__ieee754_sqrt+0x108>
 8008894:	f1bc 0f00 	cmp.w	ip, #0
 8008898:	eb0c 0100 	add.w	r1, ip, r0
 800889c:	da42      	bge.n	8008924 <__ieee754_sqrt+0x174>
 800889e:	2900      	cmp	r1, #0
 80088a0:	db40      	blt.n	8008924 <__ieee754_sqrt+0x174>
 80088a2:	f102 0e01 	add.w	lr, r2, #1
 80088a6:	1a9b      	subs	r3, r3, r2
 80088a8:	4672      	mov	r2, lr
 80088aa:	45a4      	cmp	ip, r4
 80088ac:	bf88      	it	hi
 80088ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80088b2:	eba4 040c 	sub.w	r4, r4, ip
 80088b6:	4405      	add	r5, r0
 80088b8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80088bc:	f1ba 0a01 	subs.w	sl, sl, #1
 80088c0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80088c4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80088c8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80088cc:	d1db      	bne.n	8008886 <__ieee754_sqrt+0xd6>
 80088ce:	431c      	orrs	r4, r3
 80088d0:	d01a      	beq.n	8008908 <__ieee754_sqrt+0x158>
 80088d2:	4c20      	ldr	r4, [pc, #128]	@ (8008954 <__ieee754_sqrt+0x1a4>)
 80088d4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008958 <__ieee754_sqrt+0x1a8>
 80088d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80088dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80088e0:	f7f7 fc42 	bl	8000168 <__aeabi_dsub>
 80088e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4640      	mov	r0, r8
 80088ee:	4649      	mov	r1, r9
 80088f0:	f7f8 f86e 	bl	80009d0 <__aeabi_dcmple>
 80088f4:	b140      	cbz	r0, 8008908 <__ieee754_sqrt+0x158>
 80088f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80088fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80088fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008902:	d111      	bne.n	8008928 <__ieee754_sqrt+0x178>
 8008904:	4655      	mov	r5, sl
 8008906:	3601      	adds	r6, #1
 8008908:	1072      	asrs	r2, r6, #1
 800890a:	086b      	lsrs	r3, r5, #1
 800890c:	07f1      	lsls	r1, r6, #31
 800890e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008912:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008916:	bf48      	it	mi
 8008918:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800891c:	4618      	mov	r0, r3
 800891e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008922:	e757      	b.n	80087d4 <__ieee754_sqrt+0x24>
 8008924:	4696      	mov	lr, r2
 8008926:	e7be      	b.n	80088a6 <__ieee754_sqrt+0xf6>
 8008928:	f7f7 fc20 	bl	800016c <__adddf3>
 800892c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4640      	mov	r0, r8
 8008936:	4649      	mov	r1, r9
 8008938:	f7f8 f840 	bl	80009bc <__aeabi_dcmplt>
 800893c:	b120      	cbz	r0, 8008948 <__ieee754_sqrt+0x198>
 800893e:	1ca8      	adds	r0, r5, #2
 8008940:	bf08      	it	eq
 8008942:	3601      	addeq	r6, #1
 8008944:	3502      	adds	r5, #2
 8008946:	e7df      	b.n	8008908 <__ieee754_sqrt+0x158>
 8008948:	1c6b      	adds	r3, r5, #1
 800894a:	f023 0501 	bic.w	r5, r3, #1
 800894e:	e7db      	b.n	8008908 <__ieee754_sqrt+0x158>
 8008950:	7ff00000 	.word	0x7ff00000
 8008954:	200001e0 	.word	0x200001e0
 8008958:	200001d8 	.word	0x200001d8
 800895c:	00000000 	.word	0x00000000

08008960 <__ieee754_atan2>:
 8008960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	4617      	mov	r7, r2
 8008966:	4690      	mov	r8, r2
 8008968:	4699      	mov	r9, r3
 800896a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800896e:	427b      	negs	r3, r7
 8008970:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8008af8 <__ieee754_atan2+0x198>
 8008974:	433b      	orrs	r3, r7
 8008976:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800897a:	4553      	cmp	r3, sl
 800897c:	4604      	mov	r4, r0
 800897e:	460d      	mov	r5, r1
 8008980:	d809      	bhi.n	8008996 <__ieee754_atan2+0x36>
 8008982:	4246      	negs	r6, r0
 8008984:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008988:	4306      	orrs	r6, r0
 800898a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800898e:	4556      	cmp	r6, sl
 8008990:	468e      	mov	lr, r1
 8008992:	4683      	mov	fp, r0
 8008994:	d908      	bls.n	80089a8 <__ieee754_atan2+0x48>
 8008996:	4642      	mov	r2, r8
 8008998:	464b      	mov	r3, r9
 800899a:	4620      	mov	r0, r4
 800899c:	4629      	mov	r1, r5
 800899e:	f7f7 fbe5 	bl	800016c <__adddf3>
 80089a2:	4604      	mov	r4, r0
 80089a4:	460d      	mov	r5, r1
 80089a6:	e016      	b.n	80089d6 <__ieee754_atan2+0x76>
 80089a8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 80089ac:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80089b0:	433e      	orrs	r6, r7
 80089b2:	d103      	bne.n	80089bc <__ieee754_atan2+0x5c>
 80089b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	f7ff bd66 	b.w	8008488 <atan>
 80089bc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80089c0:	f006 0602 	and.w	r6, r6, #2
 80089c4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80089c8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80089cc:	d107      	bne.n	80089de <__ieee754_atan2+0x7e>
 80089ce:	2e02      	cmp	r6, #2
 80089d0:	d064      	beq.n	8008a9c <__ieee754_atan2+0x13c>
 80089d2:	2e03      	cmp	r6, #3
 80089d4:	d066      	beq.n	8008aa4 <__ieee754_atan2+0x144>
 80089d6:	4620      	mov	r0, r4
 80089d8:	4629      	mov	r1, r5
 80089da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089de:	4317      	orrs	r7, r2
 80089e0:	d106      	bne.n	80089f0 <__ieee754_atan2+0x90>
 80089e2:	f1be 0f00 	cmp.w	lr, #0
 80089e6:	da68      	bge.n	8008aba <__ieee754_atan2+0x15a>
 80089e8:	a537      	add	r5, pc, #220	@ (adr r5, 8008ac8 <__ieee754_atan2+0x168>)
 80089ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80089ee:	e7f2      	b.n	80089d6 <__ieee754_atan2+0x76>
 80089f0:	4552      	cmp	r2, sl
 80089f2:	d10f      	bne.n	8008a14 <__ieee754_atan2+0xb4>
 80089f4:	4293      	cmp	r3, r2
 80089f6:	f106 36ff 	add.w	r6, r6, #4294967295
 80089fa:	d107      	bne.n	8008a0c <__ieee754_atan2+0xac>
 80089fc:	2e02      	cmp	r6, #2
 80089fe:	d855      	bhi.n	8008aac <__ieee754_atan2+0x14c>
 8008a00:	4b3e      	ldr	r3, [pc, #248]	@ (8008afc <__ieee754_atan2+0x19c>)
 8008a02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a06:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008a0a:	e7e4      	b.n	80089d6 <__ieee754_atan2+0x76>
 8008a0c:	2e02      	cmp	r6, #2
 8008a0e:	d851      	bhi.n	8008ab4 <__ieee754_atan2+0x154>
 8008a10:	4b3b      	ldr	r3, [pc, #236]	@ (8008b00 <__ieee754_atan2+0x1a0>)
 8008a12:	e7f6      	b.n	8008a02 <__ieee754_atan2+0xa2>
 8008a14:	4553      	cmp	r3, sl
 8008a16:	d0e4      	beq.n	80089e2 <__ieee754_atan2+0x82>
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008a1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a22:	da21      	bge.n	8008a68 <__ieee754_atan2+0x108>
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	da01      	bge.n	8008a2e <__ieee754_atan2+0xce>
 8008a2a:	323c      	adds	r2, #60	@ 0x3c
 8008a2c:	db20      	blt.n	8008a70 <__ieee754_atan2+0x110>
 8008a2e:	4642      	mov	r2, r8
 8008a30:	464b      	mov	r3, r9
 8008a32:	4620      	mov	r0, r4
 8008a34:	4629      	mov	r1, r5
 8008a36:	f7f7 fe79 	bl	800072c <__aeabi_ddiv>
 8008a3a:	f7ff feb5 	bl	80087a8 <fabs>
 8008a3e:	f7ff fd23 	bl	8008488 <atan>
 8008a42:	4604      	mov	r4, r0
 8008a44:	460d      	mov	r5, r1
 8008a46:	2e01      	cmp	r6, #1
 8008a48:	d015      	beq.n	8008a76 <__ieee754_atan2+0x116>
 8008a4a:	2e02      	cmp	r6, #2
 8008a4c:	d017      	beq.n	8008a7e <__ieee754_atan2+0x11e>
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d0c1      	beq.n	80089d6 <__ieee754_atan2+0x76>
 8008a52:	a31f      	add	r3, pc, #124	@ (adr r3, 8008ad0 <__ieee754_atan2+0x170>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	4620      	mov	r0, r4
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	f7f7 fb84 	bl	8000168 <__aeabi_dsub>
 8008a60:	a31d      	add	r3, pc, #116	@ (adr r3, 8008ad8 <__ieee754_atan2+0x178>)
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	e016      	b.n	8008a96 <__ieee754_atan2+0x136>
 8008a68:	a51d      	add	r5, pc, #116	@ (adr r5, 8008ae0 <__ieee754_atan2+0x180>)
 8008a6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a6e:	e7ea      	b.n	8008a46 <__ieee754_atan2+0xe6>
 8008a70:	2400      	movs	r4, #0
 8008a72:	2500      	movs	r5, #0
 8008a74:	e7e7      	b.n	8008a46 <__ieee754_atan2+0xe6>
 8008a76:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8008a7a:	461d      	mov	r5, r3
 8008a7c:	e7ab      	b.n	80089d6 <__ieee754_atan2+0x76>
 8008a7e:	a314      	add	r3, pc, #80	@ (adr r3, 8008ad0 <__ieee754_atan2+0x170>)
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f7 fb6e 	bl	8000168 <__aeabi_dsub>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	a111      	add	r1, pc, #68	@ (adr r1, 8008ad8 <__ieee754_atan2+0x178>)
 8008a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a96:	f7f7 fb67 	bl	8000168 <__aeabi_dsub>
 8008a9a:	e782      	b.n	80089a2 <__ieee754_atan2+0x42>
 8008a9c:	a50e      	add	r5, pc, #56	@ (adr r5, 8008ad8 <__ieee754_atan2+0x178>)
 8008a9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008aa2:	e798      	b.n	80089d6 <__ieee754_atan2+0x76>
 8008aa4:	a510      	add	r5, pc, #64	@ (adr r5, 8008ae8 <__ieee754_atan2+0x188>)
 8008aa6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008aaa:	e794      	b.n	80089d6 <__ieee754_atan2+0x76>
 8008aac:	a510      	add	r5, pc, #64	@ (adr r5, 8008af0 <__ieee754_atan2+0x190>)
 8008aae:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ab2:	e790      	b.n	80089d6 <__ieee754_atan2+0x76>
 8008ab4:	2400      	movs	r4, #0
 8008ab6:	2500      	movs	r5, #0
 8008ab8:	e78d      	b.n	80089d6 <__ieee754_atan2+0x76>
 8008aba:	a509      	add	r5, pc, #36	@ (adr r5, 8008ae0 <__ieee754_atan2+0x180>)
 8008abc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ac0:	e789      	b.n	80089d6 <__ieee754_atan2+0x76>
 8008ac2:	bf00      	nop
 8008ac4:	f3af 8000 	nop.w
 8008ac8:	54442d18 	.word	0x54442d18
 8008acc:	bff921fb 	.word	0xbff921fb
 8008ad0:	33145c07 	.word	0x33145c07
 8008ad4:	3ca1a626 	.word	0x3ca1a626
 8008ad8:	54442d18 	.word	0x54442d18
 8008adc:	400921fb 	.word	0x400921fb
 8008ae0:	54442d18 	.word	0x54442d18
 8008ae4:	3ff921fb 	.word	0x3ff921fb
 8008ae8:	54442d18 	.word	0x54442d18
 8008aec:	c00921fb 	.word	0xc00921fb
 8008af0:	54442d18 	.word	0x54442d18
 8008af4:	3fe921fb 	.word	0x3fe921fb
 8008af8:	7ff00000 	.word	0x7ff00000
 8008afc:	08009038 	.word	0x08009038
 8008b00:	08009020 	.word	0x08009020

08008b04 <_init>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr

08008b10 <_fini>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr
